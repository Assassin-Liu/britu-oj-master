<<<<<<< HEAD
CREATE DATABASE  IF NOT EXISTS `ojdb` /*!40100 DEFAULT CHARACTER SET latin1 */;
USE `ojdb`;
-- MySQL dump 10.13  Distrib 8.0.21, for Win64 (x86_64)
--
-- Host: localhost    Database: ojdb
-- ------------------------------------------------------
-- Server version	5.7.31-log
=======
-- MySQL dump 10.13  Distrib 5.7.21, for Linux (x86_64)
--
-- Host: 127.0.0.1    Database: ojdb
-- ------------------------------------------------------
-- Server version	5.7.21-1
>>>>>>> 11c2e33... 0816

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
<<<<<<< HEAD
/*!50503 SET NAMES utf8 */;
=======
/*!40101 SET NAMES utf8 */;
>>>>>>> 11c2e33... 0816
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
<<<<<<< HEAD
-- Table structure for table `answer`
--

DROP TABLE IF EXISTS `answer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `answer` (
  `pid` int(11) NOT NULL,
  `answer_c` varchar(5255) CHARACTER SET utf8 DEFAULT NULL,
  `answer_cpro` varchar(5255) CHARACTER SET utf8 DEFAULT NULL,
  `answer_java` varchar(5255) CHARACTER SET utf8 DEFAULT NULL,
  `answer_python2` varchar(5255) CHARACTER SET utf8 DEFAULT NULL,
  `answer_python3` varchar(255) DEFAULT NULL,
  `problem_name` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  PRIMARY KEY (`pid`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `answer`
--

LOCK TABLES `answer` WRITE;
/*!40000 ALTER TABLE `answer` DISABLE KEYS */;
INSERT INTO `answer` VALUES (1000,'<p>1.我们在打代码时应该行首对齐，最好不要顶格，因为以后代码太长会很乱。\n2.注意每句末尾加上分号 \" 这其实相当于我们C语言中的句号，说活不能一口气一直说下去，要合理添加句号。</p>\n<pre style=\"height: 183.33px;\"><code class=\"mali\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span> a,b;\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d\"</span>,&amp;a,&amp;b);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>, a+b);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>','<p>其实iostream就是 input output stream输入输出流，主要用cin标准输入流函数和cout标准输出流函数。用法如下：cin&gt;&gt;输入的数据变量名称;（注意分号）cout&lt;&lt;输出数据变量名称;（注意分号）或者cout&lt;&lt;输出数据变量名称&lt;&lt;endl;（注意分号）</p>\n<pre style=\"height: 253px;\"><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span> a,b;\n    <span class=\"hljs-built_in\">cin</span> &gt;&gt; a &gt;&gt; b;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; a+b;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>','<p>这里用到了Scanner类，这个类是SDK1.5新增的一个类，它可以直接输入整型数据，不像JAVA其他从键盘输入的方法只能输入字符或字符串，非常方便。</p>\n<pre style=\"height: 381px;\"><code class=\"language-java hljs\"><span class=\"hljs-keyword\">import</span> java.util.Scanner;  \n  \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main</span> </span>{ \n    \n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Scanner sc;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    Scanner(<span class=\"hljs-number\">0</span>);\n} \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Scanner</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> sum)</span></span>{ \n    sc = <span class=\"hljs-keyword\">new</span> Scanner(System.in); \n    <span class=\"hljs-keyword\">int</span> a = sc.nextInt();\n    <span class=\"hljs-keyword\">int</span> b = sc.nextInt();\n    <span class=\"hljs-keyword\">int</span> c;\n    c = a + b;\n    System.out.println(c); \n	} \n}\n</code></pre>','<p>Python万能的运算看起来比C++的的算法要简单得多。但我看见过很多人用Python成功RE爆零的，原因是Python在一行上检测到空格时不会将前面的内容储存进变量，而是会将一整行内容转成字符串，自然会RE。本方法是将输入先以字符串格式读入变量string，再以空格为依据用split()函数进行分片，产生一个字符型的列表，再用int()函数将两个字符转为数，相加，再输出它们的和。</p>\n<pre style=\"height: 92px;\"><code class=\"hljs lisp\">string=input()\n\nprint(<span class=\"hljs-name\">int</span>(<span class=\"hljs-name\">string</span>.split(<span class=\"hljs-string\">\" \"</span>)[<span class=\"hljs-number\">0</span>])+int(<span class=\"hljs-name\">string</span>.split(<span class=\"hljs-string\">\" \"</span>)[<span class=\"hljs-number\">1</span>]))\n</code></pre>',NULL,'A + B problem'),(1001,'<p>认真想一想就能明白，其实各自掉头与穿过对方时间是一模一样的！我们不妨算直接穿过对方的，比较简单。<br>\n我非常好奇为什么你们的代码都这么长——————</p>\n<pre style = \"height: 609px; \"><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">float</span> j,k,D=<span class=\"hljs-number\">0</span>,X=<span class=\"hljs-number\">5000</span>;\n    <span class=\"hljs-keyword\">int</span> n,m,i;\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%f\"</span>,&amp;j);\n    j=(j+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,&amp;n);\n    <span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">0</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"0 0\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)\n    {\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%f\"</span>,&amp;k);\n        <span class=\"hljs-keyword\">if</span>(k&gt;=j)\n        k=k-j;\n        <span class=\"hljs-keyword\">else</span>\n        k=j-k;\n        <span class=\"hljs-keyword\">if</span>(k&lt;X)\n        X=k;\n        <span class=\"hljs-keyword\">if</span>(k&gt;D)\n        D=k;\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%.f %.f\"</span>,j-X,j+D);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>','<p>首先自行脑补一下，假装你正在20000米高空的轰炸机上用高倍<s>显微镜</s>望远镜默默欣赏士兵离开，你会发现什么东西？一堆花花绿绿的迷彩服在移动。（不是鬼片！不是鬼片！不是鬼片！重要的事情说三遍）</p>\n<p>那么当两个士兵撞在一起时，从你的视角看会发生什么？当然他们认为他们都掉头了，但因为你在特高的地方，你会认为他们“穿过”了对方。换言之，这与他们相互穿过并没有任何区别。</p>\n<p>然后我们就可以把士兵分开了。比方说有一个士兵在位置3，开始时向右，那么一定有一个士兵在两秒后在位置5。虽然这两个家伙可能不是同一个人，但由于士兵都是相同的，我们可以认为他们相同。</p>\n<p>那么我们就可以把所有士兵分开。首先，我们把他们一个个读进去。然后，对于每一个士兵，他有向左和向右两种选择。设士兵在位置p，如果向左，需要p时间单位；向右，需要L-p+1个。分别取max和min，更新答案即可。</p>\n<pre style=\"height: 361px;\"><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> n,l,p,maxv=<span class=\"hljs-number\">0</span>,minv=<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d\"</span>,&amp;l,&amp;n);\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)\n    {\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,&amp;p);\n        maxv=max(maxv,max(l-p+<span class=\"hljs-number\">1</span>,p));\n        minv=max(minv,min(l-p+<span class=\"hljs-number\">1</span>,p));\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d %d\"</span>,minv,maxv);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>',NULL,'<p>当你看人当做一群蚂蚁过独木桥时，你根本分不清他是否掉头，既然分不清楚，就干脆不要分开，将两个人作为一个整体，</p>\n<p>等价于两人穿插而过！</p>\n<p>你会发现总时间和速度都是一样的！</p>\n<p>一样就好办了，</p>\n<p>又是一句话：最大值的最大值！！</p>\n<p>max（a[i],len-a[i]+1）;</p>\n<pre style = \"height: 733px;\"><code class=\"language-cpp hljs\">var\n  n,m,i,j,len,maxmin,maxmax,m1:longint;\n  a:<span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">1.</span><span class=\"hljs-number\">.100000</span>] of longint;\n<span class=\"hljs-comment\">//maxmin、maxmax是最小的最大和最大最大</span>\n<span class=\"hljs-function\">function <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(a,b:longint)</span>:longint</span>;\nbegin\n  <span class=\"hljs-keyword\">if</span> a&lt;<span class=\"hljs-function\">b then <span class=\"hljs-title\">exit</span><span class=\"hljs-params\">(a)</span></span>;\n  <span class=\"hljs-built_in\">exit</span>(b);\nend;\n<span class=\"hljs-function\">function <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(a,b:longint)</span>:longint</span>;\nbegin\n  <span class=\"hljs-keyword\">if</span> a&gt;<span class=\"hljs-function\">b then <span class=\"hljs-title\">exit</span><span class=\"hljs-params\">(a)</span></span>;\n  <span class=\"hljs-built_in\">exit</span>(b);\nend;\n<span class=\"hljs-function\">begin\n  <span class=\"hljs-title\">readln</span><span class=\"hljs-params\">(len)</span></span>;\n  readln(n);\n  <span class=\"hljs-keyword\">for</span> i:=<span class=\"hljs-number\">1</span> to n <span class=\"hljs-keyword\">do</span>\n    read(a[i]);\n  <span class=\"hljs-keyword\">for</span> i:=<span class=\"hljs-number\">1</span> to n <span class=\"hljs-keyword\">do</span>\n  begin\n    m:=min(a[i],len+<span class=\"hljs-number\">1</span>-a[i]);\n    <span class=\"hljs-keyword\">if</span> m&gt;maxmin then\n      maxmin:=m;\n  end;\n  <span class=\"hljs-keyword\">for</span> i:=<span class=\"hljs-number\">1</span> to n <span class=\"hljs-keyword\">do</span>\n  begin\n    m1:=max(a[i],len+<span class=\"hljs-number\">1</span>-a[i]);<span class=\"hljs-comment\">//都不做解释，题解说明有</span>\n    <span class=\"hljs-keyword\">if</span> m1&gt;maxmax then\n      maxmax:=m1;\n  end;\n  writeln(maxmin,<span class=\"hljs-string\">\' \'</span>,maxmax);\nend.\n\n</code></pre>',NULL,'独木桥'),(1002,'<p>我们数组先开大一点，接下来我们就需要输入数据了。利用一个for循环来完成，并且储存在数组中。</p>\n<pre style=\"height: 423px;\"><code class=\"language-c hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n	<span class=\"hljs-keyword\">int</span> i,n,x[<span class=\"hljs-number\">10005</span>],y[<span class=\"hljs-number\">10005</span>],a[<span class=\"hljs-number\">10005</span>],b[<span class=\"hljs-number\">10005</span>],x1,y1,k=<span class=\"hljs-number\">1</span>;\n	<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,&amp;n);\n	<span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)\n		<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d%d%d\"</span>,&amp;x[i],&amp;y[i],&amp;a[i],&amp;b[i]);\n	<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d\"</span>,&amp;x1,&amp;y1);\n	<span class=\"hljs-keyword\">for</span>(i=n<span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--)\n	{\n	    <span class=\"hljs-keyword\">if</span>((x1&gt;=x[i]&amp;&amp;x1&lt;=x[i]+a[i])&amp;&amp;(y1&gt;=y[i]&amp;&amp;y1&lt;=y[i]+b[i]))\n		{    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\\n\"</span>,i+<span class=\"hljs-number\">1</span>); k*=<span class=\"hljs-number\">0</span>;}\n		<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">continue</span>;\n		<span class=\"hljs-keyword\">if</span>((x1&gt;=x[i]&amp;&amp;x1&lt;=x[i]+a[i])&amp;&amp;(y1&gt;=y[i]&amp;&amp;y1&lt;=y[i]+b[i]))\n	        <span class=\"hljs-keyword\">break</span>;\n	}\n	<span class=\"hljs-keyword\">if</span>(k==<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"-1\\n\"</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>','<p>其实这道题，有些题解的方法有些复杂。我们可以有一些投机取巧，因为，是看特定的某个位置上最后一块覆盖了的地毯。所以说，你可以从最后一个输入的数据开始排查，如果说你找到了这个点上面有地毯，那么就直接输出这个值，如果没找到就按照题干的意思输出-1。</p>\n<pre style=\"height: 729px;\"><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-keyword\">int</span> shuzu[<span class=\"hljs-number\">10001</span>][<span class=\"hljs-number\">10001</span>];<span class=\"hljs-comment\">//自定义一个二维数组，内存看自己。</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> n,x,y;\n    <span class=\"hljs-keyword\">int</span> b=<span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-built_in\">cin</span>&gt;&gt;n;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;++i)\n    {\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> ii=<span class=\"hljs-number\">1</span>;ii&lt;=<span class=\"hljs-number\">4</span>;++ii)\n        <span class=\"hljs-built_in\">cin</span>&gt;&gt;shuzu[i][ii];                               <span class=\"hljs-comment\">//输入数据</span>\n    }\n    <span class=\"hljs-built_in\">cin</span>&gt;&gt;x&gt;&gt;y;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> q=n;q&gt;=<span class=\"hljs-number\">1</span>;--q)\n    {\n        <span class=\"hljs-keyword\">if</span>((shuzu[q][<span class=\"hljs-number\">1</span>]&lt;=x)&amp;&amp;(shuzu[q][<span class=\"hljs-number\">3</span>]+shuzu[q][<span class=\"hljs-number\">1</span>]&gt;=x)&amp;&amp;(shuzu[q][<span class=\"hljs-number\">2</span>]&lt;=y)&amp;&amp;(shuzu[q][<span class=\"hljs-number\">2</span>]+shuzu[q][<span class=\"hljs-number\">4</span>]&gt;=y))    <span class=\"hljs-comment\">//比较，如果包含了，就继续。</span>\n        {\n            <span class=\"hljs-built_in\">cout</span>&lt;&lt;q;\n        b=<span class=\"hljs-number\">2</span>    ;\n        }\n        <span class=\"hljs-keyword\">if</span>(b==<span class=\"hljs-number\">2</span>)\n        <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">if</span>(q==<span class=\"hljs-number\">1</span>)\n        {\n            <span class=\"hljs-built_in\">cout</span>&lt;&lt;<span class=\"hljs-number\">-1</span>;\n        <span class=\"hljs-keyword\">break</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n总之这道题不算难，如果把题看懂了，就可以做了。做法会用一点投机，但是第二次就AC了，每有什么超时的问题。\n</code></pre>',NULL,'<p>直接判断4个点的边界即可</p>\n<pre style=\"height: 423px; \"><code class=\"language-delphi hljs\">\n\n<span class=\"hljs-keyword\">var</span> a,b,c,d,e,f,g,x,y,n,m,i,j:longint;\n    ab:<span class=\"hljs-keyword\">array</span> [<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">10001</span>,<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">4</span>]<span class=\"hljs-keyword\">of</span> longint;\n<span class=\"hljs-keyword\">begin</span>\n <span class=\"hljs-keyword\">read</span>(a);\n <span class=\"hljs-keyword\">for</span> i:=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">to</span> a <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-keyword\">read</span>(ab[i,<span class=\"hljs-number\">1</span>],ab[i,<span class=\"hljs-number\">2</span>],ab[i,<span class=\"hljs-number\">3</span>],ab[i,<span class=\"hljs-number\">4</span>]);\n <span class=\"hljs-keyword\">read</span>(x,y);\n <span class=\"hljs-keyword\">for</span> i:=a <span class=\"hljs-keyword\">downto</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-keyword\">if</span> (x&gt;=ab[i,<span class=\"hljs-number\">1</span>]) <span class=\"hljs-keyword\">and</span> (x&lt;=ab[i,<span class=\"hljs-number\">3</span>]+ab[i,<span class=\"hljs-number\">1</span>]) <span class=\"hljs-keyword\">and</span> (y&gt;=ab[i,<span class=\"hljs-number\">2</span>]) <span class=\"hljs-keyword\">and</span> (y&lt;=ab[i,<span class=\"hljs-number\">4</span>]+ab[i,<span class=\"hljs-number\">2</span>]) <span class=\"hljs-keyword\">then</span>\n   <span class=\"hljs-keyword\">begin</span>\n    <span class=\"hljs-keyword\">write</span>(i);\n    <span class=\"hljs-keyword\">exit</span>;\n   <span class=\"hljs-keyword\">end</span>;\n <span class=\"hljs-keyword\">write</span>(-<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-keyword\">end</span>.\n\n\n</code></pre>',NULL,'铺地毯');
/*!40000 ALTER TABLE `answer` ENABLE KEYS */;
UNLOCK TABLES;

--
=======
>>>>>>> 11c2e33... 0816
-- Table structure for table `blog`
--

DROP TABLE IF EXISTS `blog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `blog` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `bc_id` int(11) DEFAULT NULL COMMENT '博客分类id',
  `title` varchar(30) DEFAULT NULL COMMENT '标题',
  `content` text COMMENT '内容',
  `html_content` text COMMENT 'html内容',
  `tags` varchar(20) DEFAULT NULL COMMENT '标签',
  `view_count` int(11) DEFAULT '0' COMMENT '浏览次数',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog`
--

LOCK TABLES `blog` WRITE;
/*!40000 ALTER TABLE `blog` DISABLE KEYS */;
<<<<<<< HEAD
INSERT INTO `blog` VALUES (5,1,2,'高精度加法和普通模拟：回文数的判断','高精度加法和普通模拟：回文数的判断','<div data-v-5a58a989=\"\" data-v-677ffeda=\"\" class=\"marked\" data-v-0776707c=\"\">\n<p>这题是高精度加法和普通模拟的一道好题。</p>\n<p>郑重声明：本题正解为高精度+模拟。利用数据范围模糊的题目漏洞而使用long long水过此题应当是一个应当坚决制止的行为。我本人刚学OI时做题经常只考虑局部正确性而忽视数据范围，然后稀里糊涂发了这篇题解。如今这篇题解截至此时因为利用数据范围漏洞而水过而成为第一高赞题解，但是我忽视了其影响力，<strong>给后来的初学者开了一个很坏的头</strong>，我做自我检讨。感谢评论区狂轰滥炸的督促，今天我这道题目和这篇题解重写。</p>\n<p><strong>请注意：我们应当认为，在任何时候利用题目数据、评测机器或其他漏洞而 <em>主观人为</em> 获取AC的行为与作弊行为性质上无异，是学术失信行为，应当坚决制止。</strong></p>\n<p>本题按照题目意思模拟即可。我们可以开两个数组来记录高精度数字，这样方便我们处理。判断“该数组是否回文”、“c翻转存入d再做c+d”可以写成两个单独的函数。然后主程序组织一下他们即可。注意好退出循环的条件。</p>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstring&gt;</span></span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> S=<span class=\"hljs-number\">303</span>;<span class=\"hljs-comment\">//一次加法顶多多一位，所以顶多多30位，也就是130位左右。我开大一点，开到300.</span>\n<span class=\"hljs-keyword\">int</span> n,a[S],l;\n<span class=\"hljs-keyword\">char</span> c[S],d[S];\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">()</span>\n</span>{\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;l;++i)\n		d[l-i<span class=\"hljs-number\">-1</span>]=c[i];\n	l+=<span class=\"hljs-number\">2</span>;<span class=\"hljs-comment\">//可能有进位，所以我们干脆在前面先多空个两位</span>\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;l;++i)\n	{\n		c[i]+=d[i];\n		<span class=\"hljs-keyword\">if</span> (c[i]&gt;=n) c[i+<span class=\"hljs-number\">1</span>]++,c[i]-=n;\n	}\n	<span class=\"hljs-keyword\">while</span> (!c[l<span class=\"hljs-number\">-1</span>]) --l;<span class=\"hljs-comment\">//大不了多余的前导0再减回来嘛~~简化思维~~</span>\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">pd</span><span class=\"hljs-params\">()</span>\n</span>{\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;l;++i)\n		<span class=\"hljs-keyword\">if</span> (c[i]!=c[l<span class=\"hljs-number\">-1</span>-i]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n	<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n	<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%s\"</span>,&amp;n,c);l=<span class=\"hljs-built_in\">strlen</span>(c);\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;l;++i)\n	{\n		<span class=\"hljs-keyword\">if</span> (c[i]&gt;=<span class=\"hljs-string\">\'0\'</span> &amp;&amp; c[i]&lt;=<span class=\"hljs-string\">\'9\'</span>) c[i]-=<span class=\"hljs-string\">\'0\'</span>;\n		<span class=\"hljs-keyword\">else</span> c[i]=c[i]-<span class=\"hljs-string\">\'A\'</span>+<span class=\"hljs-number\">10</span>;\n	}\n	<span class=\"hljs-keyword\">int</span> step=<span class=\"hljs-number\">0</span>;\n	<span class=\"hljs-keyword\">while</span> (!pd())\n	{\n		++step;\n		<span class=\"hljs-keyword\">if</span> (step&gt;<span class=\"hljs-number\">30</span>) <span class=\"hljs-keyword\">break</span>;\n		add();\n	}\n	<span class=\"hljs-keyword\">if</span> (step&lt;=<span class=\"hljs-number\">30</span>) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"STEP=%d\\n\"</span>,step);\n	<span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">\"Impossible!\"</span>);\n	<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p>把不同的一些并不小的功能写成不同的函数再在主程序当中组织它们，是属于一种标准化、模块化编程的思维。这种思维在以后编程，尤其是像高精度这样主程序调用频繁的程序当中，可以大大简化思维和代码量。其特点就是函数间独立性较为明显，函数接口较为简单，函数调用方便。一个函数应当干完它所有的任务，如果把某些任务拖延到主程序或者是其他函数当中，将大大复杂编程思维复杂度和代码量。</p>\n<hr>\n\n<p>如果题目是int64整形范围内的话，那么将毫无必要转进制！</p>\n<p>一个小技巧：将n进制数反转，在十进制下即可翻转，无需转成字符数组。判断反转后的数（10进制）与原来的数（先把它转成10进制）是否相同即可。</p>\n<p>代码：</p>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">pd</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> a)</span><span class=\"hljs-comment\">//判断a与其n进制下反转是否相等。</span>\n</span>{\n    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> s=<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> i=a;i;i/=n)\n        s=s*k+i%n;<span class=\"hljs-comment\">//用十进制，但是把它按照n进制操作</span>\n    nex=s+a;\n    <span class=\"hljs-keyword\">return</span> s==a;\n}\n\n</code></pre>\n</div>','算法，数据结构',620,'2020-08-04 21:26:07','2020-08-13 09:25:15'),(6,4,2,'加分二叉树的三步解题方法','加分二叉树的三步解题方法','<div data-v-5a58a989=\"\" data-v-677ffeda=\"\" class=\"marked\" data-v-0776707c=\"\"><p>这题是一道比较简单的<strong>树形DP</strong>。我们可以分成3个任务分别解决，如下：（包含CPP及Pascal代码片段）</p>\n<p><strong>【任务一】采用动态规划方法计算最大分值</strong></p>\n<p>本题可以采用动态规划方法来解决，具体如下：</p>\n<p>设f[i, j]为顶点i . . 顶点j所组成的子树的最大分值。若f[i, j] = -1，则表明最大分值尚未计算出。</p>\n<p><strong>f(i,j)={1 (i&gt;j) ; 顶点i的分数 (i=j) ; max(f{i,k-1}*f{k+1,j}+顶点i的分数 (i&lt;j) 『k取i～j』)</strong></p>\n<p>root[i, j]——顶点i..顶点j所组成的子树达到最大分值时的根编号。当i = j时，root[i, i] := i。</p>\n<p>由于问题没有明显的阶段特征，而是呈现为非线性的树形结构，因此，我们采用后序遍历的顺序来计算状态转移方程。计算过程如下：</p>\n<p><strong>【参考程序片段】{cpp版}</strong></p>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> L, <span class=\"hljs-keyword\">int</span> r)</span>    <span class=\"hljs-comment\">// 递归计算f[L][r]</span>\n</span>{\n<span class=\"hljs-keyword\">int</span>  k;\n<span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span>  now, ans;    <span class=\"hljs-comment\">// 当前分值</span>\n<span class=\"hljs-keyword\">if</span> (L &gt; r) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">if</span> (f[L][r]== <span class=\"hljs-number\">-1</span>)     <span class=\"hljs-comment\">// 若尚未计算出顶点L..顶点r对应子树的最高分值</span>\n   <span class=\"hljs-keyword\">for</span>(k=L; k&lt;=r; k++) {     <span class=\"hljs-comment\">// 穷举每一个可能的子根k</span>\n      now = search(L, k<span class=\"hljs-number\">-1</span>) * search(k+<span class=\"hljs-number\">1</span>, r) + f[k][k];  \n<span class=\"hljs-comment\">// 计算以k为根的子树的分值</span>\n      <span class=\"hljs-keyword\">if</span>(now &gt; f[L][r])  {\n<span class=\"hljs-comment\">//若该分值为目前最高，则记入状态转移方程，并记下子根}</span>\n          f[L][r] = now; \nroot[L][r] = k;\n      }\n}\n<span class=\"hljs-keyword\">return</span>  f[L][r];   {返回顶点L..顶点r对应子树的最高分值}\n}\n</code></pre>\n<p><strong>【参考程序】{Pascal版}</strong>\nfunction search(L, r: integer) : int64;    {递归计算f[L. r]}</p>\n<pre><code class=\"language-cpp hljs\">var\n  i: integer;\n  now: int64;   {当前分值}\nbegin\n  <span class=\"hljs-keyword\">if</span> L &gt; r then search := <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">else</span> \nbegin\n      <span class=\"hljs-keyword\">if</span> f[L, r] = <span class=\"hljs-number\">-1</span> then {若尚未计算出顶点L..顶点r对应子树的最高分值}\n        <span class=\"hljs-keyword\">for</span> i := L to r <span class=\"hljs-keyword\">do</span>  {穷举每一个可能的子根i}\n          begin\n            now := search(L, i<span class=\"hljs-number\">-1</span>) * search(i+<span class=\"hljs-number\">1</span>, r) + f[i, i];  {计算以i为根的子树的分值}\n            <span class=\"hljs-keyword\">if</span> now &gt; f[L, r] then  {若该分值为目前最高，则记入状态转移方程，并记下子根}\n              begin\n                f[L, r] := now; way[L, r] := i;\n              end;\n        end;  {<span class=\"hljs-keyword\">for</span>}\n        search := f[L, r];   {返回顶点L..顶点r对应子树的最高分值}\n    end;   {<span class=\"hljs-keyword\">else</span>}\nend;  {search}\n</code></pre>\n<p>显然，主程序可以通过递归调用search(1, n)来计算最高分值。算法的时间复杂度为O(n^2)。</p>\n<p><strong>【任务二】输出加分二叉树的前序遍历</strong></p>\n<p>递归调用search(1, n)后得出的way给出了加分二叉树的结构，其中way[i, j]为该树中顶点i..顶点j的根序号。由于二叉树中序遍历的顺序为1..n，因此，1..way[i, j]-1为左子树，way[i, j] + 1 .. j为右子树。现按照根→左子树→右子树的顺序对加分二叉树进行前序遍历。</p>\n<p>注意：由于数字之间用空格隔开，而第一个数字前没有空格，因此，设firstwrite为首数字标志。一旦输出了第一个数字，firstwrite设为false，表明在输入新的数字前需要加空格。</p>\n<p>由此，得出前序遍历加分二叉树的算法：</p>\n<p><strong>【参考程序片段】{CPP版}</strong></p>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-comment\">// 前序遍历顶点L..顶点r对应的子树</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span>  <span class=\"hljs-title\">preorder</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> L, <span class=\"hljs-keyword\">int</span> r)</span>\n</span>{\n<span class=\"hljs-keyword\">if</span> (L &gt; r)  <span class=\"hljs-keyword\">return</span>;\n<span class=\"hljs-keyword\">if</span> (firstwrite)\nfirstwrite = <span class=\"hljs-literal\">false</span>;\n<span class=\"hljs-keyword\">else</span>\n  <span class=\"hljs-built_in\">cout</span>&lt;&lt;‘ ‘;      <span class=\"hljs-comment\">// 顶点间用空格分开</span>\n<span class=\"hljs-built_in\">cout</span> &lt;&lt; root[L][r];             <span class=\"hljs-comment\">// 输出子树的根</span>\npreorder(L, root[L][r]<span class=\"hljs-number\">-1</span>);     <span class=\"hljs-comment\">// 前序遍历左子树</span>\npreorder(root[L][r]+<span class=\"hljs-number\">1</span>, r);     <span class=\"hljs-comment\">// 前序遍历右子树</span>\n}\n</code></pre>\n<p><strong>【参考程序片段】{Pascal版}</strong></p>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-function\">procedure  <span class=\"hljs-title\">preorder</span><span class=\"hljs-params\">(L, r: integer)</span></span>;\n<span class=\"hljs-comment\">// 前序遍历顶点L..顶点r对应的子树</span>\nbegin\n   <span class=\"hljs-keyword\">if</span> L &gt; r then <span class=\"hljs-built_in\">exit</span>;\n   <span class=\"hljs-keyword\">if</span> firstwrite then\n       firstwrite := <span class=\"hljs-literal\">false</span>\n   <span class=\"hljs-keyword\">else</span>\n       write(‘ ‘);   {顶点间用空格分开}\n   write(way[L, r]);   {输出子根}\n   preorder(L, way[L, r] - <span class=\"hljs-number\">1</span>);   {前序遍历左子树}\n   preorder(way[L, r] + <span class=\"hljs-number\">1</span>, r);   {前序遍历右子树}\nend;\n</code></pre>\n<p><strong>【任务三】主程序</strong>\n有了search函数和preorder过程，就不难得出主程序了：</p>\n<p><strong>『Cpp』</strong></p>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n<span class=\"hljs-keyword\">int</span> n, i;\n<span class=\"hljs-keyword\">bool</span>  firstwrite;\n<span class=\"hljs-built_in\">cin</span> &gt;&gt; n;    <span class=\"hljs-comment\">// 读顶点数</span>\n<span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)      <span class=\"hljs-comment\">// 状态转移方程初始化</span>\n  <span class=\"hljs-keyword\">for</span>(j=i; j&lt;=n; j++)\n    f[i][j] = <span class=\"hljs-number\">-1</span>;\n<span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) {\n  <span class=\"hljs-built_in\">cin</span> &gt;&gt; f[i][i];       <span class=\"hljs-comment\">// 读顶点i的分值</span>\n  root[i][i] = i;        <span class=\"hljs-comment\">// 顶点i单独成一棵子树</span>\n   }\n<span class=\"hljs-built_in\">cout</span> &lt;&lt; search(<span class=\"hljs-number\">1</span>, n) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;      <span class=\"hljs-comment\">// 计算和输出最高加分</span>\nfirstwrite = <span class=\"hljs-literal\">true</span>;                   <span class=\"hljs-comment\">// 设立首顶点标志</span>\npreorder(<span class=\"hljs-number\">1</span>, n);                       <span class=\"hljs-comment\">// 前序遍历二叉树</span>\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p><strong>『Pascal』</strong></p>\n<pre><code class=\"language-cpp hljs\">read(n);  {读顶点数}\n<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span> to n <span class=\"hljs-keyword\">do</span>   {状态转移方程初始化}\n  <span class=\"hljs-keyword\">for</span> j := i to n <span class=\"hljs-keyword\">do</span>\n    f[i j] := <span class=\"hljs-number\">-1</span>;\n<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span> to n <span class=\"hljs-keyword\">do</span>\n  begin\n    read(temp);   {读顶点i的分值}\n    f[i, i] := temp;  way[i, i] := i;   {顶点i单独成一棵子树}\n  end;\nwriteln(search(<span class=\"hljs-number\">1</span>, n));   {计算和输出最高加分}\nfirstwrite := <span class=\"hljs-literal\">true</span>;     {设立首顶点标志}\npreorder(<span class=\"hljs-number\">1</span>, n);    {前序遍历二叉树}\nwriteln;\n</code></pre>\n<p>以上算法采用了自上而下的<strong>记忆化方法</strong>，即程序流程基本按照<strong>原问题的递归定义</strong>，不同的是，它专门设置了一张表way，用来记忆在求解过程中得出的所有子树的根，以便在前序遍历中使用。\n另外，当在递归过程中第一次遇到一个子问题（f[L, r]=-1）时，计算其解，以后每遇到该子问题时，就不重复计算f[L, r]了。记忆化方式有着只解那些肯定要解的子问题的优点。_<strong>在应用动态规划方法求解非线性结构问题时，一般采用自上而下的记忆化方法</strong>_。</p>\n</div>','二叉树，树形结构',38,'2020-08-04 21:26:07','2020-08-13 09:16:25'),(7,3,3,'请问一下如何识别某个像素的颜色？（萌新求助）','![](http://file.gkuoj.com/image/ming/blog/1548766734974.jpg)\n\n:tw-1f600:','<p>请问一下如何识别某个像素的颜色？（萌新求助）</p>','Java,大神',65,'2020-08-04 21:26:07','2020-08-13 09:25:15'),(9,1,2,'进制转换的一般方法（正进制和负进制）','进制转换的一般方法（正进制和负进制）','<div data-v-5a58a989=\"\" data-v-677ffeda=\"\" class=\"marked\" data-v-0776707c=\"\"><p>这道题唯一的难点就是</p>\n<h3><s>题目写不清楚</s></h3>\n<h3><s>而且题解也没写清楚</s></h3>\n<h2>对负进制不了解</h2>\n<p>（于是我百度了回来）</p>\n<p>首先，不管对于什么语言，</p>\n<h3>被除数=商*除数+余数，</h3>\n<p>这是解决问题的关键</p>\n<p>例如在C++里，-15%-2=-1，-15/-2=7,而7*-2+（-1）=-15</p>\n<p>但是因为我们是不断取余数倒序为转换结果，所以余数不能出现负数，那怎么办呢？</p>\n<p>很简单<s>虽然我一开始看不懂</s></p>\n<p>我们只需要将商+1，余数-除数即可，因为余数（绝对值）一定小于除数，所以这样就可以将余数装换为正数</p>\n<p>正确性证明：</p>\n<pre><code class=\"hljs angelscript\">（商+<span class=\"hljs-number\">1</span>）*除数+（余数-除数）=商*除数+除数+余数-除数=商*除数+余数=被除数\n</code></pre>\n<p>于是就可以愉快的做题啦</p>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstring&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">zhuan</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n,<span class=\"hljs-keyword\">int</span> r)</span>\n</span>{\n	<span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> ;\n	<span class=\"hljs-keyword\">int</span> m=n%r;<span class=\"hljs-comment\">//m为余数 </span>\n\n	<span class=\"hljs-keyword\">if</span>(m&lt;<span class=\"hljs-number\">0</span>) m-=r,n+=r;<span class=\"hljs-comment\">//如果余数小于0，转化为正数</span>\n	\n	<span class=\"hljs-comment\">//将余数转化为ascll码方便输出，省略了一个数组 </span>\n	<span class=\"hljs-keyword\">if</span>(m&gt;=<span class=\"hljs-number\">10</span>) m=<span class=\"hljs-string\">\'A\'</span>+m<span class=\"hljs-number\">-10</span>;\n	<span class=\"hljs-keyword\">else</span> m+=<span class=\"hljs-string\">\'0\'</span>;\n	\n	zhuan(n/r,r);\n	\n	<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%c\"</span>,m);<span class=\"hljs-comment\">//注意，因为结果为余数倒序，输出要写在递归后面，不然会顺序输出 </span>\n	<span class=\"hljs-keyword\">return</span> ;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n	<span class=\"hljs-comment\">//freopen(\"in.txt\",\"r\",stdin);</span>\n	<span class=\"hljs-keyword\">int</span> n,r;\n	<span class=\"hljs-built_in\">string</span> ans=<span class=\"hljs-string\">\"\"</span>;\n	<span class=\"hljs-built_in\">cin</span>&gt;&gt;n&gt;&gt;r;\n	<span class=\"hljs-built_in\">cout</span>&lt;&lt;n&lt;&lt;<span class=\"hljs-string\">\"=\"</span>;\n	zhuan(n,r);\n	<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"(base%d)\"</span>,r);\n	<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n</div>','进制转换',280,'2020-08-04 21:26:07','2020-08-13 09:25:15'),(10,5,3,'萌新刚学计算几何，求助，WA 40pts','萌新刚学计算几何，求助，WA 40pts','<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;deque&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span> ;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> MAXN = <span class=\"hljs-number\">1110</span> ;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">double</span> eps = <span class=\"hljs-number\">1e-12</span> ;\n<span class=\"hljs-keyword\">int</span> n , m , cnt , head = <span class=\"hljs-number\">1</span> , tail = <span class=\"hljs-number\">1</span> ;\n<span class=\"hljs-keyword\">double</span> ans = <span class=\"hljs-number\">0</span> ;\n<span class=\"hljs-keyword\">struct</span> point {\n    <span class=\"hljs-keyword\">double</span> x , y ;\n    point (<span class=\"hljs-keyword\">double</span> xx = <span class=\"hljs-number\">0</span> , <span class=\"hljs-keyword\">double</span> yy = <span class=\"hljs-number\">0</span>) : x(xx) , y(yy) {}\n    point <span class=\"hljs-keyword\">operator</span> + (<span class=\"hljs-keyword\">const</span> point &amp;A) <span class=\"hljs-keyword\">const</span> {<span class=\"hljs-keyword\">return</span> point (x + A.x , y + A.y) ;} \n    point <span class=\"hljs-keyword\">operator</span> - (<span class=\"hljs-keyword\">const</span> point &amp;A) <span class=\"hljs-keyword\">const</span> {<span class=\"hljs-keyword\">return</span> point (x - A.x , y - A.y) ;}\n    point <span class=\"hljs-keyword\">operator</span> * (<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">double</span> &amp;t) <span class=\"hljs-keyword\">const</span> {<span class=\"hljs-keyword\">return</span> point (x * t , y * t) ;}\n} a[MAXN] , t[MAXN] ;\n<span class=\"hljs-keyword\">struct</span> line {\n    point A , B ;\n    <span class=\"hljs-keyword\">double</span> k ;\n    line (point AA , point BB): A(AA) , B(BB) {k = <span class=\"hljs-built_in\">atan2</span> (B.y , B.x) ;}\n    line () {}\n    <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-keyword\">operator</span> &lt; (<span class=\"hljs-keyword\">const</span> line &amp;a) <span class=\"hljs-keyword\">const</span> {<span class=\"hljs-keyword\">return</span> k &lt; a.k ;}\n} p[MAXN] , q[MAXN] ;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">xmul</span> <span class=\"hljs-params\">(point A , point B)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> A.x * B.y - A.y * B.x ;\n}\n<span class=\"hljs-function\">point <span class=\"hljs-title\">getp</span> <span class=\"hljs-params\">(line x , line y)</span> </span>{\n    point A = x.A - y.A ;\n    <span class=\"hljs-keyword\">double</span> t = xmul (y.B , A) / xmul (x.B , y.B) ;\n    <span class=\"hljs-keyword\">return</span> x.A + x.B * t ;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">scanf</span> (<span class=\"hljs-string\">\"%d\"</span> , &amp;n) ;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span> ; i &lt;= n ; i++) {\n        <span class=\"hljs-built_in\">scanf</span> (<span class=\"hljs-string\">\"%d\"</span> , &amp;m) ;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span> ; j &lt;= m ; j++)\n            <span class=\"hljs-built_in\">scanf</span> (<span class=\"hljs-string\">\"%lf %lf\"</span> , &amp;a[j].x , &amp;a[j].y) ;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span> ; j &lt;= m ; j++) {\n            <span class=\"hljs-keyword\">int</span> nxt = (j == m) ? <span class=\"hljs-number\">1</span> : j + <span class=\"hljs-number\">1</span> ;\n            p[++cnt] = line (a[j] , a[nxt] - a[j]) ;\n        }\n    }\n    sort (p + <span class=\"hljs-number\">1</span> , p + cnt + <span class=\"hljs-number\">1</span>) ;\n    q[<span class=\"hljs-number\">1</span>] = p[<span class=\"hljs-number\">1</span>] ;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">2</span> ; i &lt;= cnt ; i++) {\n        <span class=\"hljs-keyword\">while</span> (head &lt; <span class=\"hljs-function\">tail &amp;&amp; <span class=\"hljs-title\">xmul</span> <span class=\"hljs-params\">(p[i].B , t[tail - <span class=\"hljs-number\">1</span>] - p[i].A)</span> &lt;</span>= eps) tail-- ;\n        <span class=\"hljs-keyword\">while</span> (head &lt; <span class=\"hljs-function\">tail &amp;&amp; <span class=\"hljs-title\">xmul</span> <span class=\"hljs-params\">(p[i].B , t[head] - p[i].A)</span> &lt;</span>= eps) head++ ;\n        q[++tail] = p[i] ;\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">fabs</span> (xmul (q[tail].B , q[tail - <span class=\"hljs-number\">1</span>].B)) &lt;= eps) {\n            tail-- ;\n            <span class=\"hljs-keyword\">if</span> (xmul (q[tail].B , p[i].A - q[tail].A) &gt; eps) q[tail] = p[i] ;\n        }\n        <span class=\"hljs-keyword\">if</span> (head &lt; tail) t[tail - <span class=\"hljs-number\">1</span>] = getp (q[tail - <span class=\"hljs-number\">1</span>] , q[tail]) ;\n    }\n    <span class=\"hljs-keyword\">while</span> (head &lt; <span class=\"hljs-function\">tail &amp;&amp; <span class=\"hljs-title\">xmul</span> <span class=\"hljs-params\">(q[tail].B , t[tail - <span class=\"hljs-number\">1</span>] - q[head].A)</span> &lt;</span>= eps) tail-- ;\n    <span class=\"hljs-keyword\">if</span> (head &lt; tail) t[tail] = getp (q[head] , q[tail]) ;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = head ; i &lt;= tail ; i++) {\n        <span class=\"hljs-keyword\">int</span> nxt = (i == tail) ? head : i + <span class=\"hljs-number\">1</span> ;\n        ans += xmul (t[i] , t[nxt]) ;\n    }\n    <span class=\"hljs-built_in\">printf</span> (<span class=\"hljs-string\">\"%.3lf\"</span> , ans / <span class=\"hljs-number\">2</span>) ;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span> ;\n}</code></pre>','计算几何',308,'2020-08-04 21:26:07','2020-08-13 09:28:06'),(12,1,2,'搜索算法：邮票面值设计问题','搜索算法：邮票面值设计问题','<div data-v-5a58a989=\"\" data-v-677ffeda=\"\" class=\"marked\" data-v-0776707c=\"\"><p>一道很经典的题目，下面我们来分析下这种问题</p>\n<p>这道题显然要先搜索出满足条件的面值组合，比如n=3,k=3时</p>\n<p>在搜索时加入适当优化：</p>\n<p>以n=3,k=3为例:第一个面值肯定为1，但是第二个面值只能是</p>\n<p>但是第二个面值只能是2，3，4，因为面值为1的最多贴3张</p>\n<p>贴满的最大值为3，要保证数字连续,那么第二个数字最大是4</p>\n<p>所以我们可以得到规律，如果邮票张数为n，种类为k,那么从小到大的顺序，邮票a[i]的下一种面值的取值范围必然是f[i]+1到f[i]*n+1</p>\n<p>深搜加动规</p>\n<p>如果已知邮票的不同面值，可以用动态规划求出这些不同面值的邮票能组合出的最大连续数：</p>\n<p>设dp[i]表示已知面值的邮票组合出面值为i所需要的最小邮票数，我们把已知的q种不同的邮票面值存在num中，则有状态转移方程：dp[i]=min(dp[i-f[j]]+1)</p>\n<p>然后随着搜索不断枚举面值集合，同时更新最大值    #include&lt;iostream&gt;</p>\n<pre><code class=\"language-cpp hljs\">    <span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span>\n    <span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstring&gt;</span></span>\n    <span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;algorithm&gt;</span></span>\n    <span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> maxn=<span class=\"hljs-number\">51</span>;\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> INF=<span class=\"hljs-number\">2147483647</span>;\n    <span class=\"hljs-keyword\">int</span> n,k,f[maxn],b[maxn],ans,dp[maxn*<span class=\"hljs-number\">100</span>];\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span>\n    </span>{\n        <span class=\"hljs-keyword\">if</span>(x==k+<span class=\"hljs-number\">1</span>)\n        {\n            <span class=\"hljs-built_in\">memset</span>(dp,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">sizeof</span>(dp));\n            <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">while</span>(dp[i]&lt;=n)\n            {\n                i++;\n                dp[i]=INF;\n                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">1</span>;j&lt;=k&amp;&amp;i-f[j]&gt;=<span class=\"hljs-number\">0</span>;j++)\n                {\n                    dp[i]=min(dp[i],dp[i-f[j]]+<span class=\"hljs-number\">1</span>);\n                }\n            }\n            <span class=\"hljs-keyword\">if</span>(i<span class=\"hljs-number\">-1</span>&gt;ans)\n            {\n                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">1</span>;j&lt;=k;j++)\n                {\n                    b[j]=f[j];\n                    ans=i<span class=\"hljs-number\">-1</span>;\n                }\n            }\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=f[x<span class=\"hljs-number\">-1</span>]+<span class=\"hljs-number\">1</span>;i&lt;=f[x<span class=\"hljs-number\">-1</span>]*n+<span class=\"hljs-number\">1</span>;i++)\n        {\n            f[x]=i;\n            dfs(x+<span class=\"hljs-number\">1</span>);\n        }\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> \n    </span>{\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%d\"</span>,&amp;n,&amp;k);\n        f[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">1</span>;\n        dfs(<span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=k;i++)<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>,b[i]);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"MAX=%d\\n\"</span>,ans);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n</div>','搜索算法',9,'2020-08-04 21:26:07','2020-08-13 09:32:46'),(22,1,4,'【重要必读】赛事答疑帖','【重要必读】赛事答疑帖','<div class=\"am-comment-bd\">\n                        <p>欢迎各位的参加，祝各位玩得愉快~</p>\n<h3>可以在此帖中发的内容：</h3>\n<ul>\n<li>膜拜除菜鸡<code>L_C_A</code>外的其他出题组成员</li>\n<li><span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>q</mi><mi>p</mi><mo separator=\"true\">,</mo><mi>z</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">qp,zc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height: 0.43056em;\"></span><span class=\"strut bottom\" style=\"height: 0.625em; vertical-align: -0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right: 0.03588em;\">q</span><span class=\"mord mathit\">p</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right: 0.04398em;\">z</span><span class=\"mord mathit\">c</span></span></span></span></span> 等内容</li>\n<li>请求解释题目（一般会处理，如果没有处理请私信<code>L_C_A</code>或<code>LHQing</code>或<code>Gooder_tmi</code>）</li>\n<li>请求添加样例（酌情处理）</li>\n<li>请求开打时空限制（酌情处理）</li>\n<li>其它合理内容</li>\n</ul>\n<h3>不可以在此贴中发的内容</h3>\n<ul>\n<li><strong>赛时</strong>的无意义内容</li>\n<li>讨论关于比赛的算法等</li>\n<li>侮辱、辱骂他人等内容</li>\n<li>其它不合理内容</li>\n</ul>\n                    </div>','社区规则',3,'2020-08-04 21:26:07','2020-08-13 09:42:38'),(24,1,1,'Birtu教育机器人开发环境信息','为了方便大家使用洛谷，现在将评测机的语言环境公布如下：\n\n语言	版本信息\nPascal	Free Pascal Compiler version 3.0.4+dfsg-21 [2019/01/16] for x86_64\nC/C++	gcc version 8.2.0 (Debian 8.2.0-14)\nPython 2	2.7.15, NumPy 1.16.0\nPython 3	3.6.8, NumPy 1.16.0\nPyPy 2	Python 2.7.13 (6.0.0+dfsg-3+b1, Oct 10 2018, 09:33:53), PyPy 6.0.0 with GCC 8.2.0\nPyPy 3	Python 3.5.3 (fdd60ed87e94, Apr 24 2018, 06:10:04), PyPy 6.0.0 with GCC 6.2.0 20160901\nJava 8	OpenJDK Runtime Environment (build 1.8.0_171-8u171-b11-2-b11)\nNode 8	8.15.0\nRuby	ruby 2.5.3p105 (2018-10-18 revision 65156) [x86_64-linux-gnu]\nGo	1.10.7\nRust	1.30.0\nPHP 7	PHP 7.2.9-1 (cli) (built: Aug 19 2018 06:56:13) ( NTS ) Zend Engine v3.2.0, with Zend OPcache v7.2.9-1\nMono C#	Mono C# compiler version 4.6.2.0\nMono VB	Visual Basic.Net Compiler version 0.0.0.5943 (Mono 4.0.1 - tarball)\nKotlin/Native	kotlinc-native 1.3.11, Kotlin/Native: 1.0.3\nKotlin/JVM	kotlinc-jvm 1.3.11\nScala	Scala compiler version 2.11.12\nHaskell	Glasgow Haskell Compiler, Version 8.4.4, stage 2 booted by GHC version 8.4.3\nPerl	perl 5, version 28, subversion 1 (v5.28.1) built for x86_64-linux-gnu-thread-multi\n最后更新时间：2019/01/21\n\n注意：\n\n除 C/C++/Pascal 外的语言，由于常数时间差距，不保证正确算法的执行所用时间和内存能够通过评测而不超出限制。洛谷不为此类语言提供多余的时间和内存限制。\nPyPy 无 NumPy 支持，若需要使用 NumPy，请选择 Python。\nHaskell 环境安装了官网所列举的核心包和常用包。','<div class=\"am-comment-bd\">\n                        <p>为了方便大家使用Birtu，现在将评测机的语言环境公布如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left;\">语言</th>\n<th style=\"text-align: left;\">版本信息</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left;\">Pascal</td>\n<td style=\"text-align: left;\"><code>Free Pascal Compiler version 3.0.4+dfsg-22 [2019/01/24] for x86_64</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">C/C++</td>\n<td style=\"text-align: left;\"><code>gcc version 8.3.0 (Debian 8.3.0-6)</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Python 2</td>\n<td style=\"text-align: left;\"><code>2.7.16, NumPy 1.16.6</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Python 3</td>\n<td style=\"text-align: left;\"><code>3.7.3, NumPy 1.18.4</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">PyPy 2</td>\n<td style=\"text-align: left;\"><code>Python 2.7.13 (7.0.0+dfsg-3, Mar 24 2019, 15:30:18), PyPy 7.0.0 with GCC 8.3.0</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">PyPy 3</td>\n<td style=\"text-align: left;\"><code>Python 3.5.3 (7.0.0+dfsg-3, Feb 21 2019, 03:51:22), PyPy 7.0.0 with GCC 8.3.0</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Java 8</td>\n<td style=\"text-align: left;\"><code>OpenJDK Runtime Environment (build 1.8.0_171-8u171-b11-2-b11)</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Node 8</td>\n<td style=\"text-align: left;\"><code>12.16.3</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Ruby</td>\n<td style=\"text-align: left;\"><code>ruby 2.5.5p157 (2019-03-15 revision 67260) [x86_64-linux-gnu]</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Go</td>\n<td style=\"text-align: left;\"><code>1.11.6</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Rust</td>\n<td style=\"text-align: left;\"><code>rustc 1.47.0-nightly (bbebe7351 2020-07-22)</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">PHP 7</td>\n<td style=\"text-align: left;\"><code>PHP 7.3.14-1~deb10u1 (cli) (built: Feb 16 2020 15:07:23) ( NTS ) Zend Engine v3.3.14, with Zend OPcache v7.3.14-1~deb10u1</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Mono C#</td>\n<td style=\"text-align: left;\"><code>Mono C# compiler version 5.18.0.240</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Mono VB</td>\n<td style=\"text-align: left;\"><code>Visual Basic.Net Compiler version 0.0.0.5943 (Mono 4.0.1 - tarball)</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Kotlin/Native</td>\n<td style=\"text-align: left;\"><code>kotlinc-native 1.3.72-eap-463, Kotlin/Native: 1.3.72</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Kotlin/JVM</td>\n<td style=\"text-align: left;\"><code>kotlinc-jvm 1.3.72</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Scala</td>\n<td style=\"text-align: left;\"><code>Scala compiler version 2.11.12</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Haskell</td>\n<td style=\"text-align: left;\"><code>Glasgow Haskell Compiler, Version 8.4.4</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Perl</td>\n<td style=\"text-align: left;\"><code>perl 5, version 28, subversion 1 (v5.28.1) built for x86_64-linux-gnu-thread-multi</code></td>\n</tr>\n</tbody>\n</table>\n<p><em>最后更新时间：2020/07/23</em></p>\n<p>注意：</p>\n<ul>\n<li>除 C/C++/Pascal 外的语言，由于常数时间差距，不保证正确算法的执行所用时间和内存能够通过评测而不超出限制。Birtu不为此类语言提供多余的时间和内存限制。</li>\n<li>PyPy 无 NumPy 支持，若需要使用 NumPy，请选择 Python。</li>\n<li>Haskell 环境安装了官网所列举的<a href=\"https://www.haskell.org/platform/contents.html\">核心包和常用包</a>。</li>\n<li>环境基本使用 Debian buster 的 apt 管理。</li>\n</ul>\n<p>另附部分语言的编译命令行（不包括源码和二进制文件路径、开启 O2 优化的参数和 gcc 的语言标准限定参数）：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left;\">语言</th>\n<th style=\"text-align: left;\">参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left;\">Pascal</td>\n<td style=\"text-align: left;\"><code>fpc -dONLINE_JUDGE -vnw</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">C/C++</td>\n<td style=\"text-align: left;\"><code>gcc -DONLINE_JUDGE -Wall -fno-asm -lm</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Java 8</td>\n<td style=\"text-align: left;\"><code>javac</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Go</td>\n<td style=\"text-align: left;\"><code>go build</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Rust</td>\n<td style=\"text-align: left;\"><code>rustc -W warnings</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Mono C#</td>\n<td style=\"text-align: left;\"><code>mcs -define:ONLINE_JUDGE</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Mono VB</td>\n<td style=\"text-align: left;\"><code>vbnc -define:ONLINE_JUDGE</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Kotlin/Native</td>\n<td style=\"text-align: left;\"><code>kotlinc</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Kotlin/JVM</td>\n<td style=\"text-align: left;\"><code>kotlinc -jvm-target 1.8 -include-runtime</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Scala</td>\n<td style=\"text-align: left;\"><code>scalac -optimize -deprecation -feature -explaintypes -target:jvm-1.8</code></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Haskell</td>\n<td style=\"text-align: left;\"><code>ghc -DONLINE_JUDGE -Wall</code></td>\n</tr>\n</tbody>\n</table>\n                    </div>','开发环境',45,'2020-08-04 21:26:07','2020-08-12 21:20:08'),(27,35,2,'栈 & 卡特兰数','栈 & 卡特兰数','<div data-v-5a58a989=\"\" data-v-677ffeda=\"\" class=\"marked\" data-v-0776707c=\"\"><p>看到大家的题解都写到了卡特兰数，但是没有细细的讲讲这跟本题有什么关系</p>\n<p>本题的描述十分简单。n个数依次进栈，可随机出栈。求有几种可能。</p>\n<p>dfs可以解，但是递推仿佛好像如同看上去貌似更简单一些。</p>\n<p>解释一下原理：</p>\n<p>建立数组f。f[i]表示i个数的全部可能性。</p>\n<p>f[0] = 1, f[1] = 1;  //当然只有一个</p>\n<p>设 x 为当前出栈序列的最后一个，则x有n种取值</p>\n<p>由于x是最后一个出栈的，所以可以将已经出栈的数分成两部分</p>\n<ol>\n<li>\n<p>比x小</p>\n</li>\n<li>\n<p>比x大</p>\n</li>\n</ol>\n<p>比x小的数有x-1个，所以这些数的全部出栈可能为f[x-1]</p>\n<p>比x大的数有n-x个，所以这些数的全部出栈可能为f[n-x]</p>\n<p>这两部分互相影响，所以一个x的取值能够得到的所有可能性为f[x-1] * f[n-x]</p>\n<p>另外，由于x有n个取值，所以</p>\n<p>ans = f[0]*f[n-1] + f[1]*f[n-2] + ... + f[n-1]*f[0];</p>\n<p>这，就是传说中的卡特兰数</p>\n<p>附上代码：</p>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-comment\">//This program is written by QiXingZhi </span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span>\n\n<span class=\"hljs-keyword\">int</span> n, f[<span class=\"hljs-number\">30</span>];\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-comment\">//递推实现卡特兰数 </span>\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;n);\n    f[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>, f[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">2</span>; i&lt;=n; i++)              \n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>; j&lt;i; j++) \n            f[i] += f[j] * f[i-j<span class=\"hljs-number\">-1</span>];     <span class=\"hljs-comment\">//递推公式 </span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>, f[n]);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n</div>','acm',34,'2020-08-04 21:26:07','2020-08-13 09:42:23');
=======
INSERT INTO `blog` VALUES (5,1,5,'2019应届生补招互联网名企','![](http://file.gkuoj.com/image/ming/blog/1548765707310.jpeg)\n:joy:\nhhahahahaha','<p><img src=\"http://file.gkuoj.com/image/ming/blog/1548765707310.jpeg\" alt=\"\"><br><img src=\"../plugins/markdown/plugins/emoji-dialog/emoji/joy.png\" class=\"emoji\" title=\"&#58;joy&#58;\" alt=\"&#58;joy&#58;\" /><br>hhahahahaha','内推,面经',607,'2019-01-29 20:42:09','2019-03-25 00:49:39'),(6,4,2,'刚刚实习简历被拒了','![](http://file.gkuoj.com/image/ming/blog/1548766443854.jpeg)\n:satisfied:','<p><img src=\"http://file.gkuoj.com/image/ming/blog/1548766443854.jpeg\" alt=\"\"><br><img src=\"../plugins/markdown/plugins/emoji-dialog/emoji/satisfied.png\" class=\"emoji\" title=\":satisfied:\" alt=\":satisfied:\">','广科捞头,屌丝',35,'2019-01-29 20:54:34','2019-03-25 00:49:49'),(7,3,2,'就你这个傻逼也来开发我Java','![](http://file.gkuoj.com/image/ming/blog/1548766734974.jpg)\n\n:tw-1f600:','<p><img src=\"http://file.gkuoj.com/image/ming/blog/1548766734974.jpg\" alt=\"\">\n<p><img src=\"http://twemoji.maxcdn.com/36x36/1f600.png\" title=\"twemoji-1f600\" alt=\"twemoji-1f600\" class=\"emoji twemoji\">','Java,大神',60,'2019-01-29 20:59:18','2019-03-25 00:49:33'),(9,1,4,'CYaRon：测试数据生成利器','Project CYaRon\nCYaRon Yet Another Random Olympic-iNformatics test data generator\n\nBy Luogu 项目地址: https://github.com/luogu-dev/cyaron\n\n\n\n你是否遇到以下情况：\n\n希望在5分钟内写出一组随机数据，并方便地使用它们对拍几个程序\n\n希望生成一个合适的随机图或者树，且有一定强度\n\n希望生成一组随机数列或者向量，且不能重复。\n\n那么，你可以借助 CYaRon 和 Python ，来快速生成一组数据。目前支持的特性有：\n\n建一个随机图（简单图或者非简单图，有向图或无向图，带权图或者无权图）\n\n建一个随机树（链状、随机树、或者菊花图，而且可以设定树的强弱）\n\n生成一组允许相同或者互相不同的多维向量（可以较快速度生成10^6组、范围到10^9的向量或者数列）\n\n根据函数解析式生成数列\n\n生成一些随机多边形，并且可以求面积、周长等\n\n从字典生成随机字符串、单词、句子、段落\n\n使用以上功能生成的数据和您其他地方下载的测试数据方便地进行程序对拍\n\n快速上手指南\n\n稳定版本可以从pip获取: pip install cyaron，在此之前，需要准备好Python。\n\n最新开发版可以克隆GitHub源代码: git clone https://github.com/luogu-dev/cyaron.git\n\n请您查看CYaRon文档和CYaRon基本入门来学习如何使用CYaRon。\n\n若您发现文档中有缺漏，请提出Issue并暂时根据examples和源代码进行YY。\n\nCYaRon基于Python。若您对Python不熟悉，可看快速入门教程。\n\n之后计划实现云Generator，即只需提供写好的脚本以及std，上传到服务器，即可下载一个测试数据的压缩包，真正实现5分钟生成一个测试数据！\n\n希望各位大佬一起来协助改进这个项目。希望这个项目可以帮助大家节省时间！\n\n使用范例','<div>\n	牛客新出的实习平台，学长直推，反馈快，靠谱，点击查看：<a href=\"https://www.nowcoder.com/job/center?\" target=\"_blank\">https://www.nowcoder.com/job/center?</a> \n</div>','用例生成器',277,'2019-01-30 00:02:56','2019-05-02 22:34:06'),(10,5,3,'我今年收割了10个offer，你们呢？','','<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n							<!-- flowchart 箭头图标 勿删 -->\n							<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"><path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path></svg>\n					\n\n\n\n<h2 id=\"前言\"><a name=\"t0\"></a>前言</h2>\n\n<p>首先祝大家新春快乐！</p>\n\n<p>大概在一个月前就已经打算写一篇关于我三月份面试的一个总结了，但由于没有时间在加上还没有想好该怎么写，所以一直没有写。适逢端午佳节，有了一段相对较长的时间可以理理所以决定下笔。</p>\n\n<p>正如标题所说：目前我是一名安卓实习生，现在在上海工作。我在三月份有一段将近半个月左右的面试经历，期间跑过南京，杭州和上海；总共面试了应该有六七家公司，拿到几个Offer就不说了，没有多大意义（毕竟每个人只有选择一个），最终选择了在上海就职。</p>\n\n<p>之所以会写这篇文章，考虑到两点：一点是总结自己的面试经历与经验，以便为了以后更好的应对面试；另外一点是希望能够给那些即将准备面试的大学生(以及其他学生)点帮助，望在接下来的面试中能够提供点参考意见和帮助。</p>\n\n<p>有几点需要说明一下：（一）我不会教你该怎么写简历，其实网上已经有很多的资源了；（二）不要期望看了这篇文章就觉得自己能够进入BAT了，我自己目前的面试水平还没达到那个水平，所以我也不知道该怎么教你。</p>\n\n\n\n<h2 id=\"累\"><a name=\"t1\"></a>累</h2>\n\n<p>如果你要问我那段面试时间给你最大感受是什么，我会说：累，是真的累。我在投简历的时候把范围限制在了江浙沪这一带，其实也就上海，南京，杭州这几个城市。所以需要我不停的奔波。我记得我是先把南京（当时我在南京）的面试完了，大概有三四家吧，然后又去杭州三四天，总共面了两家，推了一家，然后去上海，不过上海就一天，也就是面我现在所在的公司。我记得那天是早上五点多从南京坐火车去上海，然后迟了一个小时（打电话跟公司说了，可以延迟），面试完，当天下午就又回南京了，其实当时我还想在上海面试两家，但那个时候就觉得累，真的，所以就决定回去了，不面了（因为那个时候我已经得到口头Offer了）。其实还有一个原因是我之前去杭州面试已经拿到了一家Offer，所以就….你懂的。</p>\n\n<p>我记得那天早上五点多起床坐火车去上海的路上，我发现整个火车上都是人，你会发现这个世界上原来有那么多人跟你一样在为了生活奔波，虽然大家的目的不尽相同，但都是为了有个更好的生活。之前工作都是八点半去公司，你会发现过斑马线的时候会有很多跟你一样的人，其实哪怕五六点，也会有很多人也已经工作了。</p>\n\n<p>但是我觉得，这个累从某种程度上是可以减轻的。以后大家在面试的时候，尽量把时间安排得宽松点，其实我这个还好，一天只有一个面试，我之前看过别人有一天两个面试的。如果面了其他城市的，首先考虑可不可以电面或者视频面试等等，如果不行，再考虑自己有没有那个必要为了这个面试去奔波。</p>\n\n\n\n<h2 id=\"套路\"><a name=\"t2\"></a>套路</h2>\n\n<p>最大的收获呢？套路…哈哈，可能有的人会觉得很奇怪。此套路非彼套路。面试作为工作，对的，对于HR来说面试就是工作的一部分。既然是工作，那一定是有规则（准则），其实可以理解为套路啦。也就是说你得按照规则来。面试有什么规则呢？认真对待简历，做好笔试，回答好问题….</p>\n\n<p>当然，套路是相对于绝大多数的人来说的，如果你觉得自己不是那绝大多数，那你可以突破常规，来个不一样的也是可以的。不知道你之前有没有看个一个很吊的一个面试，大概是前端吧，就做了一个网页，这种创意是很好的。哦，对了，忘记跟你说了，作者应该在国外，哈哈..</p>\n\n<p>所以要想拿到Offer，你就需要学会从HR的角度考虑问题，想想如果你是HR你看到什么的简历你会让它过；再想想如果你是面试官，你希望面试到什么的人，什么样的人你会觉得他的技术可以，符合公司的要求；再想想如果你是人事主管（CTO或者CEO）你需要对方具有什么样的性格…</p>\n\n<p>这个东西我觉得是非常的重要，原因在于：绝大多数的情况下，看你简历的人之前是不了解你的（你是著名人物除外）所以他想了解你只能通过你的简历，而筛选简历作为工作的一部分，那肯定是有标准的（有的公司可能是HR筛选一下，然后给技术总监在筛一下）。这个时候你就要学会换位思考了，这个标准是什么呢？你在结合一下你自己的面试岗位，我想你应该知道的。</p>\n\n<p>其实之所以会有这种想法，由来已久。我记得我大三时候考英语六级的时候，我是在考试10天前开始准备的。大一考过四级以后我应该就没有认真看过英语课本了。所以我并没有非常好的英语底子。还有十天考试，如果是你你会怎么做？背单词?做真题?参加培训?买押题?我记得当时我想的就是：首先我肯定得不了高分，一个有自知之明的人应该都知道的；其次我肯定要及格（其实英语六级没有及格说法，但很多人都会觉得425就是及格分，在这里我不去争辩），如果不及格那不就是只参与了嘛。还有一点需要提的是：及格分从来不是用来为难人的，也就是说对于绝大多数人只要你认真准备，就算考的再差也不会不及格的。在这种指导思想下，我就开始了我的复写。其实也没啥，我就做了三四份真题，然后就一直看真题分析，并没有刻意的被单词，也没有被什么预测题。其实我这样做的目的就是希望能够了解试卷的套路，然后在做试卷的时候我就尽量按照套路来。最终也是考过了，我想说的是其实我并不厉害，我所做的只是尽可能的多去了解对方。知己知彼，才能那个啥嘛。所以举这个例子我只是想说明：套路或者说是规则对于一个行业来讲是极其的重要的。</p>\n\n<p>所以以后准备面试的时候多去了解你所投递的公司，多去了解公司的招聘要求，多了解自己。</p>\n\n\n\n<h2 id=\"关于简历\"><a name=\"t3\"></a>关于简历</h2>\n\n<p>简历怎么写我不会教你，因为我也是跟别人学的，有几个点需要注意下：</p>\n\n<ol>\n<li>保持简历的实时性，尽量保持你的简历时效性，很多时候当你决定要换工作的时候在写简历了，那个时候你就会遇到人生的一大难题：妈的，我过去几年做了啥？所以在你工作中如果学到了新的技能或者新的语言的时候就可以及时的添加到你的简历中了。插一句，当你工作了要学会写工作报告，不是为了给老板看啊，是给自己总结的，以后写简历或者总结自己工作的时候也会有个参考资料，我目前已经在坚持了，我是按月来写的，写的内容无外乎就是这个月我做了啥，学到了啥。很简单的。</li>\n<li>真实性。一方面指的是不要作假，不要有侥幸心里，没用的；另一方面指的是和自己目前的水平相匹配，也就说简历上写的就是你的真实能力。不要觉得性能优化，这种词多么牛B啊，写在简历上肯定牛逼哄哄。额…性能优化不是一个实习生要做的事（不是说你不会，而是在性能优化上就算你工作了也不一定要你做）。</li>\n<li>具体。写简历尽量突出你的工作内容（有实习经历），而你的工作内容肯定不是整天性能优化，代码优化吧。把你具体做的东西写出来，然后在深化到理论知识点。</li>\n</ol>\n\n\n\n<h2 id=\"关于面试\"><a name=\"t4\"></a>关于面试</h2>\n\n<p>其实这个没啥要写的，很多时候都取决于你的面试官，如果面试官人好，可能不要几分钟就过了。不要怀疑，我遇到过两次了：在杭州面试的时候，技术面试官来面试我的时候，总共花儿三四分钟，然后就直接找负责人来面了。上海这边，就看了一下我做的题，然后看了我的简历，就过了。对于实习生，很多东西要求并不会那么高，当然我也遇到过问的很深的，那个时候我就觉得：我只是来面试个实习生，要这样吗！这个时候也没办法，所以在准备面试的时候要好好准备，哈哈。</p>\n\n<p>准备技术面试官的面试其实还好，毕竟大家的工作的一样，所以在准备的时候把基础知识，简历上的实习经历准备好就OK了。但是在回答HR，负责人的问题的时候就需要提前准备了，其实网上已经有人总结好了。我在面试的过程中被问的最多的问题有：为什么离开上个公司？为什么要来上海?你了解我们公司吗？你有什么要问我的？其实都是套路，只要你面试你几乎逃不了，尤其是最后一个，哈哈。所以这个需要大家提前准备好，自己也练练。</p>\n\n\n\n<h2 id=\"关于其他\"><a name=\"t5\"></a>关于其他</h2>\n\n<p>找工作是件大事，这个毫无疑问。所以既然是大事，那你一定要准备充分，同时很多细节也要注意。</p>\n\n<p>在和HR聊天的时候要体现出对对方的尊重，这个不仅仅是在面试，其实在很多时候，如果你有求于人，那一定要表示出你对对方的尊重以及对这个件事的重视。绝大多数的HR都是非常友好的，当然长的也是很漂亮的，反正我遇到的都是：）。所以只要你按照套路来基本上拿到面试资格一点问题都没有。怎么尊重？无外乎就是敬语（你好，谢谢，祝您工作顺利生活愉快等等），还是那句话，多从对方的角度考虑问题。</p>\n\n<p>面试的时候不要说出很随意的话，陌生人在聊天的时候大家都是很警觉的，只要你的肢体语言或者言语透露出你的不想要拿到Offer那你就JJ了。一定要稳，带着诚意而来，拿着Offer而走！</p>\n\n<p>很多时候你要相信自己不是自己不行，而是没有遇到你合适的。如果一家不行就在投另外一家嘛，找不到工作是懦夫的表现。</p>\n\n\n\n<h2 id=\"其他小事\"><a name=\"t6\"></a>其他小事</h2>\n\n<p>HR绝对是一个颜值很高的职业，要么不可能HR都那么漂亮，简直<a href=\"https://www.baidu.com/s?wd=%E4%B8%8D%E5%8F%AF%E6%80%9D%E8%AE%AE&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd\" target=\"_blank\">不可思议</a>。</p>\n\n<p>我刚进入这个行业的时候（最开始实习）我觉得无论是初创公司还是已经做到行业领先的公司觉得没啥区别，但现在过来，我只想说，不是没啥区别，简直就不能放在一起比。如果一个公司已经做到自己所在行业<a href=\"https://www.baidu.com/s?wd=%E6%95%B0%E4%B8%80%E6%95%B0%E4%BA%8C&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd\" target=\"_blank\">数一数二</a>的了，那么<a href=\"https://www.baidu.com/s?wd=%E6%97%A0%E8%AE%BA%E5%A6%82%E4%BD%95&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd\" target=\"_blank\">无论如何</a>，这个公司基本上是靠谱的，那也意味着公司在招人上也是比较靠谱的，这个时候只要你觉得自己是个靠谱人那投出的简历基本上会收到面试机会的。但是对于初创或者相对来说规模较小的公司来说，这就是看你的运气了。运气好的话你会遇到一个牛逼的创始人（在中国很多SB都觉得自己很牛B，甚至觉得自己就TM是乔布斯的接班人），我在电话面试的时候有幸和一个很牛逼的联合创始人聊过，从他问的问题你就可以感觉到技术上是真的牛逼。但如果遇到一些…那些…哈哈，今早远离吧。反正我这辈子是不会在考虑初创了，除去一种可能就是是我的朋友或者我认识的人开始创业，我可能会去帮忙的（如果他需要的话：））。肯定有人会说你怎么能这样想呢？对不起，我现在只能这么想，因为我有经历了一些事情，而且我也不愿意再次经历了。</p>\n\n<p>我喜欢做技术的人，不喜欢做技术的负责人。</p>\n\n<p>还有件事我想跟大家分享一下。</p>\n\n<p>去面试杭州那家公司的时候，已经面过了HR，技术，负责人，最后好像还有一个总经理（记得不太清）要面吧，当时HR跟我说总经理不在让我先回去，说回来了在打电话给我，说可能也不需要了，就直接发Offer了，但是当我到车站的时候（回南京）HR打电话过来了说总经理想见见我，当时没办法，为了工作，所以就又坐车回去（一个小时）。和总经理面试的时候，可能是年长的原因（像极了大公司的董事长）问了我很多…人品相关的问题，我记得刚开始的几分钟还是很紧张的，说的话都是抖的。问了很长时间，应该不低于半个小时，问的问题很多，我记的有：你有女朋友吗？什么时候谈的？为什么分手了？你觉得江苏怎么样？你觉得杭州怎么样？反正就是考验人品的问题。给我的感觉就是像是党在考验我。其实之所以觉得很不一样，是没想到，我只是一个实习生而已，而且之前技术负责人也已经问过了。所以按照道理说应该没了。还有一个原因（我猜的）公司应该是属于政府企业，具体的我也不太好描述，就是公司应该和政府有关系，不过公司是真的有钱，大半个楼层都是它的，但里面的空座位是真的多，就感觉不缺钱。事实证明的确不缺钱。</p>\n\n<p>还有件事，就是面试过接到HR的电话说Offer已发的时候，那感觉是TM真的爽。</p>\n\n\n\n<h2 id=\"最后\"><a name=\"t7\"></a>最后</h2>\n\n<p>面试是工作的一部分，认真对待！</p>            </div>','面经',304,'2019-01-30 23:04:50','2019-03-03 20:17:52'),(12,1,6,'这是谁做的oj啊 太牛逼了！',':thumbsup:![](http://file.gkuoj.com/image/ming/blog/1550249869697.png)','<p><img src=\"../plugins/markdown/plugins/emoji-dialog/emoji/thumbsup.png\" class=\"emoji\" title=\"&#58;thumbsup&#58;\" alt=\"&#58;thumbsup&#58;\" /><img src=\"http://file.gkuoj.com/image/ming/blog/1550249869697.png\" alt=\"\">','oj,牛逼',7,'2019-02-16 00:58:31','2019-04-21 22:22:13'),(22,1,1,'【重要必读】广东科技学院OJ社区规则','1231231231321','<p>1231231231321</p>','社区规则',1,'2019-03-24 22:43:09','2019-04-21 22:22:09'),(24,1,1,'评测机语言环境信息','为了方便大家使用洛谷，现在将评测机的语言环境公布如下：\n\n语言	版本信息\nPascal	Free Pascal Compiler version 3.0.4+dfsg-21 [2019/01/16] for x86_64\nC/C++	gcc version 8.2.0 (Debian 8.2.0-14)\nPython 2	2.7.15, NumPy 1.16.0\nPython 3	3.6.8, NumPy 1.16.0\nPyPy 2	Python 2.7.13 (6.0.0+dfsg-3+b1, Oct 10 2018, 09:33:53), PyPy 6.0.0 with GCC 8.2.0\nPyPy 3	Python 3.5.3 (fdd60ed87e94, Apr 24 2018, 06:10:04), PyPy 6.0.0 with GCC 6.2.0 20160901\nJava 8	OpenJDK Runtime Environment (build 1.8.0_171-8u171-b11-2-b11)\nNode 8	8.15.0\nRuby	ruby 2.5.3p105 (2018-10-18 revision 65156) [x86_64-linux-gnu]\nGo	1.10.7\nRust	1.30.0\nPHP 7	PHP 7.2.9-1 (cli) (built: Aug 19 2018 06:56:13) ( NTS ) Zend Engine v3.2.0, with Zend OPcache v7.2.9-1\nMono C#	Mono C# compiler version 4.6.2.0\nMono VB	Visual Basic.Net Compiler version 0.0.0.5943 (Mono 4.0.1 - tarball)\nKotlin/Native	kotlinc-native 1.3.11, Kotlin/Native: 1.0.3\nKotlin/JVM	kotlinc-jvm 1.3.11\nScala	Scala compiler version 2.11.12\nHaskell	Glasgow Haskell Compiler, Version 8.4.4, stage 2 booted by GHC version 8.4.3\nPerl	perl 5, version 28, subversion 1 (v5.28.1) built for x86_64-linux-gnu-thread-multi\n最后更新时间：2019/01/21\n\n注意：\n\n除 C/C++/Pascal 外的语言，由于常数时间差距，不保证正确算法的执行所用时间和内存能够通过评测而不超出限制。洛谷不为此类语言提供多余的时间和内存限制。\nPyPy 无 NumPy 支持，若需要使用 NumPy，请选择 Python。\nHaskell 环境安装了官网所列举的核心包和常用包。','<p>为了方便大家使用洛谷，现在将评测机的语言环境公布如下：</p>\n<p>语言    版本信息<br>Pascal    Free Pascal Compiler version 3.0.4+dfsg-21 [2019/01/16] for x86_64<br>C/C++    gcc version 8.2.0 (Debian 8.2.0-14)<br>Python 2    2.7.15, NumPy 1.16.0<br>Python 3    3.6.8, NumPy 1.16.0<br>PyPy 2    Python 2.7.13 (6.0.0+dfsg-3+b1, Oct 10 2018, 09&#58;33&#58;53), PyPy 6.0.0 with GCC 8.2.0<br>PyPy 3    Python 3.5.3 (fdd60ed87e94, Apr 24 2018, 06&#58;10&#58;04), PyPy 6.0.0 with GCC 6.2.0 20160901<br>Java 8    OpenJDK Runtime Environment (build 1.8.0_171-8u171-b11-2-b11)<br>Node 8    8.15.0<br>Ruby    ruby 2.5.3p105 (2018-10-18 revision 65156) [x86_64-linux-gnu]<br>Go    1.10.7<br>Rust    1.30.0<br>PHP 7    PHP 7.2.9-1 (cli) (built: Aug 19 2018 06&#58;56&#58;13) ( NTS ) Zend Engine v3.2.0, with Zend OPcache v7.2.9-1<br>Mono C#    Mono C# compiler version 4.6.2.0<br>Mono VB    Visual Basic.Net Compiler version 0.0.0.5943 (Mono 4.0.1 - tarball)<br>Kotlin/Native    kotlinc-native 1.3.11, Kotlin/Native: 1.0.3<br>Kotlin/JVM    kotlinc-jvm 1.3.11<br>Scala    Scala compiler version 2.11.12<br>Haskell    Glasgow Haskell Compiler, Version 8.4.4, stage 2 booted by GHC version 8.4.3<br>Perl    perl 5, version 28, subversion 1 (v5.28.1) built for x86_64-linux-gnu-thread-multi<br>最后更新时间：2019/01/21\n<p>注意：</p>\n<p>除 C/C++/Pascal 外的语言，由于常数时间差距，不保证正确算法的执行所用时间和内存能够通过评测而不超出限制。洛谷不为此类语言提供多余的时间和内存限制。<br>PyPy 无 NumPy 支持，若需要使用 NumPy，请选择 Python。<br>Haskell 环境安装了官网所列举的核心包和常用包。','评测机',16,'2019-03-24 22:46:37','2019-04-22 00:36:13'),(27,35,4,'2019年的ACM Final冠军由我来夺回........','...............','<p>……………</p>','acm',25,'2019-03-24 23:17:50','2019-05-03 17:44:38');
>>>>>>> 11c2e33... 0816
/*!40000 ALTER TABLE `blog` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_category`
--

DROP TABLE IF EXISTS `blog_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `blog_category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(10) DEFAULT NULL,
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_category`
--

LOCK TABLES `blog_category` WRITE;
/*!40000 ALTER TABLE `blog_category` DISABLE KEYS */;
INSERT INTO `blog_category` VALUES (1,'站内公告','2019-01-27 23:31:04','2019-02-13 12:53:09'),(2,'题解总版','2019-01-27 23:31:04','2019-02-13 12:53:09'),(3,'技术交流','2019-01-27 23:31:04','2019-01-27 23:31:04'),(4,'比赛经验','2019-01-27 23:31:04','2019-02-13 12:53:09'),(5,'资源分享','2019-01-27 23:31:04','2019-01-27 23:32:24'),(6,'猿生活','2019-01-27 16:10:34','2019-03-22 17:59:48');
/*!40000 ALTER TABLE `blog_category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_comment`
--

DROP TABLE IF EXISTS `blog_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `blog_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `blog_id` int(11) DEFAULT NULL COMMENT '博客id',
  `content` varchar(1000) DEFAULT NULL COMMENT '评论内容',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=59 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_comment`
--

LOCK TABLES `blog_comment` WRITE;
/*!40000 ALTER TABLE `blog_comment` DISABLE KEYS */;
<<<<<<< HEAD
INSERT INTO `blog_comment` VALUES (5,3,5,'这个是一条评论','2020-08-06 10:05:09','2020-08-13 09:45:59'),(6,3,6,'这个是一条评论2','2020-07-23 10:05:09','2020-08-13 09:46:57'),(7,2,5,'','2020-08-06 10:25:09','2020-08-13 09:46:57'),(8,3,6,NULL,'2020-08-06 10:05:09','2020-08-13 09:45:59'),(10,1,10,'<p><img src=\"../plugins/markdown/plugins/emoji-dialog/emoji/blush.png\" class=\"emoji\" title=\":blush:\" alt=\":blush:\">','2020-08-06 10:05:09','2020-08-13 09:45:59'),(11,1,10,'<p>啦啦抢沙发哈哈哈</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(12,1,10,'<p>`public class Main{</p>\n<pre><code>public static void main(String [] args){\nwhile(true){\n</code></pre><p>}<br>    }\n<p>}<br>`','2020-08-06 10:05:09','2020-08-13 09:45:59'),(13,1,10,'<p>public class Main{</p>\n<pre><code>public static void main(String [] args){\nwhile(true){\n</code></pre><p>}</p>\n<pre><code>}\n</code></pre><p>}</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(14,1,10,'<pre><code class=\"lang-java\">public class Main{\n\n    public static void main(String [] args){\n    while(true){\n}\n\n\n    }\n\n}\n</code></pre>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(15,1,10,'<p><img src=\"../plugins/markdown/plugins/emoji-dialog/emoji/smiley.png\" class=\"emoji\" title=\":smiley:\" alt=\":smiley:\">','2020-08-06 10:05:09','2020-08-13 09:45:59'),(16,1,10,'<p>哦，是的呢</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(17,1,6,'<p>１２３１２</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(18,1,6,'<p>１２３１２３２１</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(19,1,6,'<p>１</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(20,1,6,'<p>２</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(21,1,6,'<p>３</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(22,1,6,'<p>３</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(23,1,6,'<p>２</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(24,1,6,'<p>３</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(25,1,6,'<p>３</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(26,1,10,'<p>１</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(27,1,10,'<p>２</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(28,1,10,'<p>３</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(29,1,10,'<p>３</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(30,1,10,'<p>２２２</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(31,1,10,'<p>＠10#（君の名は~）：你是傻吊吗</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(32,1,10,'<p>＠10#(君の名は~):12312</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(33,1,10,'<p><a href=\"http://localhost:8081/user/mainPage?userId=5\" title=\"123\">@123</a><br>1123','2020-08-06 10:05:09','2020-08-13 09:45:59'),(34,1,10,'<p>@<a href=\"http://localhost:8081/user/mainPage?userId=5\" title=\"12323\">12323</a></p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(35,1,7,'<p>31231</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(36,1,7,'<p>`113</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(37,1,7,'<p>12312</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(38,1,7,'<p>asda</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(39,1,7,'<p>asdasd</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(40,1,7,'<p>sdas</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(41,1,11,'<p>asdas</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(42,1,11,'<p>asdasd</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(43,1,11,'<p>sadasd</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(44,1,7,'<p>123</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(45,1,7,'<p>23213</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(46,1,7,'<p>23132</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(47,1,7,'<p>12321312</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(48,1,7,'<p>13123123</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(49,1,7,'<p>123123</p>','2020-08-06 10:05:09','2020-08-13 09:45:59'),(50,1,5,'<p>lll</p>','2020-08-06 10:05:09','2020-08-06 10:05:09'),(51,1,12,'<p><img src=\"../plugins/markdown/plugins/emoji-dialog/emoji/joy.png\" class=\"emoji\" title=\":joy:\" alt=\":joy:\"> 谢谢','2020-08-06 10:05:09','2020-08-06 10:05:09'),(52,1,12,'<p>随便写来玩玩的<img src=\"../plugins/markdown/plugins/emoji-dialog/emoji/joy.png\" class=\"emoji\" title=\":joy:\" alt=\":joy:\">','2020-08-06 10:05:09','2020-08-06 10:05:09'),(53,1,19,'<p>asdasdasdasdsa</p>','2020-08-06 10:05:09','2020-08-06 10:05:09'),(54,1,19,'<p>123123123</p>','2020-08-06 10:05:09','2020-08-06 10:05:09'),(55,1,19,'<p>1312312</p>','2020-08-06 10:05:09','2020-08-06 10:05:09'),(56,1,19,'<p>dasdas</p>','2020-08-06 10:05:09','2020-08-06 10:05:09'),(57,35,24,'<p>前排抢沙发</p>','2020-08-05 06:36:05','2020-08-06 10:05:09'),(58,1,24,'<pre><code class=\"lang-css\">affdfdsfd\n</code></pre>','2020-08-05 00:36:05','2020-08-06 10:01:45');
=======
INSERT INTO `blog_comment` VALUES (5,3,5,'这个是一条评论','2019-01-27 16:14:52','2019-01-31 01:52:06'),(6,3,6,'这个是一条评论2','2019-01-27 16:26:38','2019-01-31 01:52:06'),(7,2,5,'','2019-01-31 02:21:31','2019-01-31 02:21:43'),(8,3,6,NULL,'2019-01-31 02:21:43','2019-01-31 02:21:43'),(10,1,10,'<p><img src=\"../plugins/markdown/plugins/emoji-dialog/emoji/blush.png\" class=\"emoji\" title=\":blush:\" alt=\":blush:\">','2019-02-01 00:58:40','2019-02-01 00:58:40'),(11,1,10,'<p>啦啦抢沙发哈哈哈</p>','2019-02-01 01:01:07','2019-02-01 01:01:07'),(12,1,10,'<p>`public class Main{</p>\n<pre><code>public static void main(String [] args){\nwhile(true){\n</code></pre><p>}<br>    }\n<p>}<br>`','2019-02-01 01:05:28','2019-02-01 01:05:28'),(13,1,10,'<p>public class Main{</p>\n<pre><code>public static void main(String [] args){\nwhile(true){\n</code></pre><p>}</p>\n<pre><code>}\n</code></pre><p>}</p>','2019-02-01 01:06:41','2019-02-01 01:06:41'),(14,1,10,'<pre><code class=\"lang-java\">public class Main{\n\n    public static void main(String [] args){\n    while(true){\n}\n\n\n    }\n\n}\n</code></pre>','2019-02-01 01:07:07','2019-02-01 01:07:07'),(15,1,10,'<p><img src=\"../plugins/markdown/plugins/emoji-dialog/emoji/smiley.png\" class=\"emoji\" title=\":smiley:\" alt=\":smiley:\">','2019-02-01 01:14:41','2019-02-01 01:14:41'),(16,1,10,'<p>我操你妈妈吗哦</p>','2019-02-01 01:14:57','2019-02-01 01:14:57'),(17,1,6,'<p>１２３１２</p>','2019-02-01 01:18:57','2019-02-01 01:18:57'),(18,1,6,'<p>１２３１２３２１</p>','2019-02-01 01:19:03','2019-02-01 01:19:03'),(19,1,6,'<p>１</p>','2019-02-01 01:19:47','2019-02-01 01:19:47'),(20,1,6,'<p>２</p>','2019-02-01 01:19:49','2019-02-01 01:19:49'),(21,1,6,'<p>３</p>','2019-02-01 01:19:50','2019-02-01 01:19:50'),(22,1,6,'<p>３</p>','2019-02-01 01:19:55','2019-02-01 01:19:55'),(23,1,6,'<p>２</p>','2019-02-01 01:19:56','2019-02-01 01:19:56'),(24,1,6,'<p>３</p>','2019-02-01 01:19:58','2019-02-01 01:19:58'),(25,1,6,'<p>３</p>','2019-02-01 01:19:59','2019-02-01 01:19:59'),(26,1,10,'<p>１</p>','2019-02-01 01:24:38','2019-02-01 01:24:38'),(27,1,10,'<p>２</p>','2019-02-01 01:24:48','2019-02-01 01:24:48'),(28,1,10,'<p>３</p>','2019-02-01 01:24:49','2019-02-01 01:24:49'),(29,1,10,'<p>３</p>','2019-02-01 01:24:51','2019-02-01 01:24:51'),(30,1,10,'<p>２２２</p>','2019-02-01 01:24:56','2019-02-01 01:24:56'),(31,1,10,'<p>＠10#（君の名は~）：你是傻吊吗</p>','2019-02-01 01:36:32','2019-02-01 01:36:32'),(32,1,10,'<p>＠10#(君の名は~):12312</p>','2019-02-01 01:37:04','2019-02-01 01:37:04'),(33,1,10,'<p><a href=\"http://localhost:8081/user/mainPage?userId=5\" title=\"123\">@123</a><br>1123','2019-02-01 01:42:44','2019-02-01 01:42:44'),(34,1,10,'<p>@<a href=\"http://localhost:8081/user/mainPage?userId=5\" title=\"12323\">12323</a></p>','2019-02-01 01:43:15','2019-02-01 01:43:15'),(35,1,7,'<p>31231</p>','2019-02-01 01:51:01','2019-02-01 01:51:01'),(36,1,7,'<p>`113</p>','2019-02-01 01:51:09','2019-02-01 01:51:09'),(37,1,7,'<p>12312</p>','2019-02-01 01:51:17','2019-02-01 01:51:17'),(38,1,7,'<p>asda</p>','2019-02-01 01:57:18','2019-02-01 01:57:18'),(39,1,7,'<p>asdasd</p>','2019-02-01 01:57:28','2019-02-01 01:57:28'),(40,1,7,'<p>sdas</p>','2019-02-01 01:57:37','2019-02-01 01:57:37'),(41,1,11,'<p>asdas</p>','2019-02-01 02:00:56','2019-02-01 02:00:56'),(42,1,11,'<p>asdasd</p>','2019-02-01 02:00:59','2019-02-01 02:00:59'),(43,1,11,'<p>sadasd</p>','2019-02-01 02:01:01','2019-02-01 02:01:01'),(44,1,7,'<p>123</p>','2019-02-01 13:23:56','2019-02-01 13:23:56'),(45,1,7,'<p>23213</p>','2019-02-01 13:23:59','2019-02-01 13:23:59'),(46,1,7,'<p>23132</p>','2019-02-01 13:24:01','2019-02-01 13:24:01'),(47,1,7,'<p>12321312</p>','2019-02-01 13:24:10','2019-02-01 13:24:10'),(48,1,7,'<p>13123123</p>','2019-02-01 13:24:14','2019-02-01 13:24:14'),(49,1,7,'<p>123123</p>','2019-02-01 13:24:15','2019-02-01 13:24:15'),(50,1,5,'<p>lll</p>','2019-02-01 22:47:37','2019-02-01 22:47:37'),(51,1,12,'<p><img src=\"../plugins/markdown/plugins/emoji-dialog/emoji/joy.png\" class=\"emoji\" title=\":joy:\" alt=\":joy:\"> 谢谢','2019-02-16 00:58:56','2019-02-16 00:58:56'),(52,1,12,'<p>随便写来玩玩的<img src=\"../plugins/markdown/plugins/emoji-dialog/emoji/joy.png\" class=\"emoji\" title=\":joy:\" alt=\":joy:\">','2019-02-16 00:59:18','2019-02-16 00:59:18'),(53,1,19,'<p>asdasdasdasdsa</p>','2019-03-09 00:25:04','2019-03-09 00:25:04'),(54,1,19,'<p>123123123</p>','2019-03-09 00:31:23','2019-03-09 00:31:23'),(55,1,19,'<p>1312312</p>','2019-03-09 00:32:28','2019-03-09 00:32:28'),(56,1,19,'<p>dasdas</p>','2019-03-09 00:33:02','2019-03-09 00:33:02'),(57,35,24,'<p>前排抢沙发</p>','2019-03-24 23:13:08','2019-03-24 23:13:08'),(58,1,24,'<pre><code class=\"lang-css\">affdfdsfd\n</code></pre>','2019-04-22 00:36:05','2019-04-22 00:36:05');
>>>>>>> 11c2e33... 0816
/*!40000 ALTER TABLE `blog_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `competition`
--

DROP TABLE IF EXISTS `competition`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `competition` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `name` varchar(20) DEFAULT NULL COMMENT '比赛名称',
  `title` varchar(100) DEFAULT NULL COMMENT '比赛标语',
  `content` text COMMENT '详细描述',
  `html_content` text COMMENT '详细描述',
  `password` varchar(64) DEFAULT NULL COMMENT '是否需要密码',
  `start_time` datetime DEFAULT NULL COMMENT '开始时间',
  `end_time` datetime DEFAULT NULL COMMENT '结束时间',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `competition`
--

LOCK TABLES `competition` WRITE;
/*!40000 ALTER TABLE `competition` DISABLE KEYS */;
<<<<<<< HEAD
INSERT INTO `competition` VALUES (1,1,' 蓝桥杯省赛模拟赛（一）','蓝桥杯','<div>\n        <p>欢迎大家参加长沙学院 10 月入门赛，本场比赛由阿里巴巴特别赞助，比赛时间为 10 月 16 日 14:00-16:00，比赛时长 2 个小时。本场比赛采用 OI 赛制，比赛结束后可查看分数，比赛难度为 noip 普及组。</p><p>比赛结束后，16:00 - 16:30 会在课程 <a href=\"https://www.jisuanke.com/course/1979\" target=\"_blank\">https://www.jisuanke.com/course/1979</a> 进行直播讲题，该课程免费，直接加入即可。</p><h3>比赛奖励</h3><ol><li>得分最高的所有参赛选手每人获得一件计蒜客专属帽衫（如最高分不够 3 人前三名每人都获得帽衫）。</li><li>随机抽取 5 名 <strong>分数大于 0</strong> 的选手赠送阿里巴巴手提电脑包（除去获得帽衫的选手）。</li><li>随机抽取 5 名 <strong>分数大于 0</strong> 的选手赠送计蒜客专属 T 恤（除去获得奖项 1 和奖项 2 的选手）。</li><li>本场比赛计算 rating，比赛结束后将根据排名计算 rating，排名计算规则和编译环境详见 <a href=\"https://nanti.jisuanke.com/faq\" target=\"_blank\">https://nanti.jisuanke.com/faq</a></li></ol><h3>奖品展示</h3><p><img src=\"//res.jisuanke.com/img/upload/e18bc1b38ac334852b67d2c7df32ed2af3594040.png\" alt=\"image.png\" width=\"350\" height=\"524.5501285347044\"><img src=\"//res.jisuanke.com/img/upload/0d0d78b2bc660c7e2400cad5e6bcf0be4f0e9c5b.png\" alt=\"image.png\" width=\"350\" height=\"525.4498714652956\"></p><p><img alt=\"image.png\" src=\"//res.jisuanke.com/img/upload/0840c9fa8a4da8abb1ba7a58535e180d5486ea1c.png\" width=\"299\" height=\"449\"><br></p><p><br></p><h3>注意事项</h3><ol><li>比赛期间可以重复提交代码，只记录最后一次提交的内容。</li><li>提交代码前多用测试功能测试，避免由于编译器版本不同导致程序运行出错。</li><li>比赛结束后会进行代码查重检测，如若发现有重复代码，抄袭者和被抄袭者该题都记为 0 分。</li><li>本场比赛使用标准输入输出，<strong>不需要</strong> 文件输入输出。</li><li>本场比赛可使用 C、C++、Pascal 提交，提交前选择对应的语言。</li></ol><p>欢迎各位想出题的同学联系 QQ：893203990，会有一定的出题费~</p><p>更多比赛信息可以加入群“计蒜客OI训练营（642061140）”了解，届时会在群里发布比赛题解。</p><p><img src=\"https://res.jisuanke.com/img/upload/20170620/0e4e873e95357b8de84eeaaa960460957f9e42b0.png\" alt=\"\"></p>    </div>',NULL,'123321','2020-06-13 16:50:00','2020-10-17 22:48:00','2019-02-06 02:11:00','2020-08-11 10:49:33'),(2,1,'蓝桥杯省赛模拟赛（二）','蓝桥杯','',NULL,NULL,'2020-06-13 16:50:00','2020-10-17 22:48:00','2019-03-25 00:59:21','2020-08-06 09:46:48'),(6,1,'蓝桥杯模式赛（三）','大家快点准备哦','![](http://file.gkuoj.com/image/ming/blog/1556896192551.jpg)','<p><img src=\"http://file.gkuoj.com/image/ming/blog/1556896192551.jpg\" alt=\"\">\n',NULL,'2020-06-13 16:50:00','2020-10-17 22:48:00','2019-05-03 23:09:58','2020-08-06 09:46:48'),(7,1,'全国挑战赛','1231231','![](http://file.gkuoj.com/image/ming/blog/1556900952092.jpg)','<p><img src=\"http://file.gkuoj.com/image/ming/blog/1556900952092.jpg\" alt=\"\">\n',NULL,'2020-06-13 16:50:00','2020-10-17 22:48:00','2019-05-04 00:29:20','2020-08-06 09:50:43'),(8,1,'信息学奥赛','1231','12312312','<p>12312312</p>\n','123111','2020-06-13 16:50:00','2020-10-17 22:48:00','2019-05-04 00:50:40','2020-08-06 09:50:43'),(9,1,'儿童编程大赛','1213','1231','<p>1231</p>\n','123123','2020-06-13 16:50:00','2020-10-17 22:48:00','2019-05-04 01:15:15','2020-08-06 09:50:43'),(10,1,'全国青少年编程大赛','asdasda','asdasd','<p>asdasd</p>\n','','2020-06-13 16:50:00','2020-10-17 22:48:00','2019-05-04 14:12:29','2020-08-06 09:50:43');
=======
INSERT INTO `competition` VALUES (1,1,'2019 蓝桥杯省赛 B 组模拟赛（一）','蓝桥杯','<div>\n        <p>欢迎大家参加广东科技学院 2 月入门赛，本场比赛由阿里巴巴特别赞助，比赛时间为 2 月 16 日 14:00-16:00，比赛时长 2 个小时。本场比赛采用 OI 赛制，比赛结束后可查看分数，比赛难度为 noip 普及组。</p><p>比赛结束后，16:00 - 16:30 会在课程 <a href=\"https://www.jisuanke.com/course/1979\" target=\"_blank\">https://www.jisuanke.com/course/1979</a> 进行直播讲题，该课程免费，直接加入即可。</p><h3>比赛奖励</h3><ol><li>得分最高的所有参赛选手每人获得一件计蒜客专属帽衫（如最高分不够 3 人前三名每人都获得帽衫）。</li><li>随机抽取 5 名 <strong>分数大于 0</strong> 的选手赠送阿里巴巴手提电脑包（除去获得帽衫的选手）。</li><li>随机抽取 5 名 <strong>分数大于 0</strong> 的选手赠送计蒜客专属 T 恤（除去获得奖项 1 和奖项 2 的选手）。</li><li>本场比赛计算 rating，比赛结束后将根据排名计算 rating，排名计算规则和编译环境详见 <a href=\"https://nanti.jisuanke.com/faq\" target=\"_blank\">https://nanti.jisuanke.com/faq</a></li></ol><h3>奖品展示</h3><p><img src=\"//res.jisuanke.com/img/upload/e18bc1b38ac334852b67d2c7df32ed2af3594040.png\" alt=\"image.png\" width=\"350\" height=\"524.5501285347044\"><img src=\"//res.jisuanke.com/img/upload/0d0d78b2bc660c7e2400cad5e6bcf0be4f0e9c5b.png\" alt=\"image.png\" width=\"350\" height=\"525.4498714652956\"></p><p><img alt=\"image.png\" src=\"//res.jisuanke.com/img/upload/0840c9fa8a4da8abb1ba7a58535e180d5486ea1c.png\" width=\"299\" height=\"449\"><br></p><p><br></p><h3>注意事项</h3><ol><li>比赛期间可以重复提交代码，只记录最后一次提交的内容。</li><li>提交代码前多用测试功能测试，避免由于编译器版本不同导致程序运行出错。</li><li>比赛结束后会进行代码查重检测，如若发现有重复代码，抄袭者和被抄袭者该题都记为 0 分。</li><li>本场比赛使用标准输入输出，<strong>不需要</strong> 文件输入输出。</li><li>本场比赛可使用 C、C++、Pascal 提交，提交前选择对应的语言。</li></ol><p>欢迎各位想出题的同学联系 QQ：893203990，会有一定的出题费~</p><p>更多比赛信息可以加入群“计蒜客OI训练营（642061140）”了解，届时会在群里发布比赛题解。</p><p><img src=\"https://res.jisuanke.com/img/upload/20170620/0e4e873e95357b8de84eeaaa960460957f9e42b0.png\" alt=\"\"></p>    </div>',NULL,'123321','2019-02-13 16:50:00','2019-03-17 22:48:00','2019-02-06 02:11:00','2019-03-25 01:01:16'),(2,1,'2019 蓝桥杯省赛 B 组模拟赛（二）','蓝桥杯','',NULL,NULL,'2019-03-23 16:00:00','2019-03-25 20:00:00','2019-03-25 00:59:21','2019-03-25 01:01:16'),(6,1,'蓝桥杯模式赛（三）','大家快点准备哦','![](http://file.gkuoj.com/image/ming/blog/1556896192551.jpg)','<p><img src=\"http://file.gkuoj.com/image/ming/blog/1556896192551.jpg\" alt=\"\">\n',NULL,'2019-05-03 23:00:00','2019-05-04 23:00:00','2019-05-03 23:09:58','2019-05-03 23:09:58'),(7,1,'969130721','1231231','![](http://file.gkuoj.com/image/ming/blog/1556900952092.jpg)','<p><img src=\"http://file.gkuoj.com/image/ming/blog/1556900952092.jpg\" alt=\"\">\n',NULL,'2019-05-04 00:29:00','2019-05-10 00:29:00','2019-05-04 00:29:20','2019-05-04 00:29:20'),(8,1,'创建比赛咯','1231','12312312','<p>12312312</p>\n','123111','2019-05-04 00:50:00','2019-05-09 00:50:00','2019-05-04 00:50:40','2019-05-04 00:50:40'),(9,1,'1231','1213','1231','<p>1231</p>\n','123123','2019-05-04 01:27:00','2019-05-08 01:19:00','2019-05-04 01:15:15','2019-05-04 01:28:24'),(10,1,'asdasd','asdasda','asdasd','<p>asdasd</p>\n','','2019-05-04 14:12:00','2019-05-11 14:12:00','2019-05-04 14:12:29','2019-05-04 14:12:30');
>>>>>>> 11c2e33... 0816
/*!40000 ALTER TABLE `competition` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `competition_problem`
--

DROP TABLE IF EXISTS `competition_problem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `competition_problem` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `comp_id` int(11) DEFAULT NULL COMMENT '比赛id',
  `problem_id` int(11) DEFAULT NULL COMMENT '题库id',
  `score` int(11) DEFAULT '0' COMMENT '分值',
  `ac_count` int(11) DEFAULT '0' COMMENT 'ac次数',
  `submit_count` int(11) DEFAULT '0' COMMENT '提交次数',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `competition_problem`
--

LOCK TABLES `competition_problem` WRITE;
/*!40000 ALTER TABLE `competition_problem` DISABLE KEYS */;
INSERT INTO `competition_problem` VALUES (1,1,1000,10,10,10,'2019-02-16 20:51:29','2019-02-16 20:51:29'),(2,1,1001,10,0,11,'2019-02-16 21:04:55','2019-02-16 21:04:55'),(3,2,1000,10,3,3,'2019-03-25 01:04:05','2019-03-25 01:04:05'),(4,2,1001,10,0,0,'2019-03-25 01:04:31','2019-03-25 01:04:31'),(5,2,1002,10,0,0,'2019-03-25 01:04:31','2019-03-25 01:04:31'),(6,2,1005,10,0,0,'2019-03-25 01:04:31','2019-03-25 01:04:31'),(7,2,1006,10,0,0,'2019-03-25 01:04:31','2019-03-25 01:04:31'),(8,2,1007,10,0,0,'2019-03-25 01:04:31','2019-03-25 01:04:31'),(9,2,1008,10,0,0,'2019-03-25 01:05:09','2019-03-25 01:05:09'),(10,2,1010,10,0,0,'2019-03-25 01:05:09','2019-03-25 01:05:09'),(11,2,1011,10,0,0,'2019-03-25 01:05:09','2019-03-25 01:05:09'),(12,2,1012,10,0,0,'2019-03-25 01:05:09','2019-03-25 01:05:09'),(13,7,1000,12,0,0,'2019-05-04 00:32:07','2019-05-04 00:32:07'),(14,7,1004,12,0,0,'2019-05-04 00:33:37','2019-05-04 00:33:37'),(15,7,1000,12,0,0,'2019-05-04 00:35:07','2019-05-04 00:35:07'),(16,7,1000,1,0,0,'2019-05-04 00:35:37','2019-05-04 00:35:37'),(17,8,1000,122,0,0,'2019-05-04 00:50:50','2019-05-04 00:50:50'),(18,8,1002,111,0,0,'2019-05-04 00:50:54','2019-05-04 00:50:54'),(19,8,1000,12,0,0,'2019-05-04 00:51:39','2019-05-04 00:51:39'),(20,8,1031,12,0,0,'2019-05-04 00:51:50','2019-05-04 00:51:50'),(21,8,1000,22,0,0,'2019-05-04 00:52:48','2019-05-04 00:52:48'),(22,9,1000,10,0,0,'2019-05-04 01:15:46','2019-05-04 01:15:46'),(23,9,1001,12,0,0,'2019-05-04 01:15:48','2019-05-04 01:15:48'),(26,9,1002,12,0,0,'2019-05-04 01:29:13','2019-05-04 01:29:13'),(27,9,1004,12,0,0,'2019-05-04 01:29:15','2019-05-04 01:29:15'),(28,9,1003,1,0,0,'2019-05-04 01:29:17','2019-05-04 01:29:17'),(29,9,1010,12,0,0,'2019-05-04 01:29:22','2019-05-04 01:29:22'),(30,9,1011,12,0,0,'2019-05-04 01:29:29','2019-05-04 01:29:29'),(32,10,1011,1,0,0,'2019-05-04 14:17:04','2019-05-04 14:17:04');
/*!40000 ALTER TABLE `competition_problem` ENABLE KEYS */;
UNLOCK TABLES;

--
<<<<<<< HEAD
-- Table structure for table `course`
--

DROP TABLE IF EXISTS `course`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `course` (
  `id` int(11) NOT NULL,
  `contenthtml` varchar(19999) CHARACTER SET utf8 DEFAULT NULL,
  `next_id` int(11) DEFAULT NULL,
  `pre_id` int(11) DEFAULT NULL,
  `t_name` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `title` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `h1` varchar(255) DEFAULT NULL,
  `p1` varchar(255) DEFAULT NULL,
  `p2` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `course`
--

LOCK TABLES `course` WRITE;
/*!40000 ALTER TABLE `course` DISABLE KEYS */;
INSERT INTO `course` VALUES (1,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">简介</span></h2> <div class=\"tutintro\"> <p>C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。</p> <p>C++ 被认为是一种<strong>中级</strong>语言，它综合了高级语言和低级语言的特点。</p> <p>C++ 是由 Bjarne Stroustrup 于 1979 年在新泽西州美利山贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，最初命名为带类的C，后来在 1983 年更名为 C++。</p> <p>C++ 是 C 的一个超集，事实上，任何合法的 C 程序都是合法的 C++ 程序。</p> <p><strong>注意：</strong>使用静态类型的编程语言是在编译时执行类型检查，而不是在运行时执行类型检查。</p> </div> <h2 class=\"tutheader\">面向对象程序设计</h2> <p>C++ 完全支持面向对象的程序设计，包括面向对象开发的四大特性：</p> <ul class=\"list\"> <li>封装</li> <li>数据隐藏</li> <li>继承</li> <li>多态</li> </ul> <h2 class=\"tutheader\">标准库</h2> <p>标准的 C++ 由三个重要部分组成：</p> <ul class=\"list\"> <li>核心语言，提供了所有构件块，包括变量、数据类型和常量，等等。</li> <li>C++ 标准库，提供了大量的函数，用于操作文件、字符串等。</li> <li>标准模板库（STL），提供了大量的方法，用于操作数据结构等。</li> </ul> <h2 class=\"tutheader\">ANSI 标准</h2> <p>ANSI 标准是为了确保 C++ 的便携性 —— 您所编写的代码在 Mac、UNIX、Windows、Alpha 计算机上都能通过编译。</p> <p>由于 ANSI 标准已稳定使用了很长的时间，所有主要的 C++ 编译器的制造商都支持 ANSI 标准。</p> <h2 class=\"tutheader\">学习 C++</h2> <p>学习 C++，关键是要理解概念，而不应过于深究语言的技术细节。</p> <p>学习程序设计语言的目的是为了成为一个更好的程序员，也就是说，是为了能更有效率地设计和实现新系统，以及维护旧系统。</p> <p>C++ 支持多种编程风格。您可以使用 Fortran、C、Smalltalk 等任意一种语言的编程风格来编写代码。每种风格都能有效地保证运行时间效率和空间效率。</p> <h2 class=\"tutheader\">C++ 的使用</h2> <p>基本上每个应用程序领域的程序员都有使用 C++。</p> <p>C++ 通常用于编写设备驱动程序和其他要求实时性的直接操作硬件的软件。</p> <p>C++ 广泛用于教学和研究。</p> <p>任何一个使用苹果电脑或 Windows PC 机的用户都在间接地使用 C++，因为这些系统的主要用户接口是使用 C++ 编写的。</p></div>\n<div style=\"clear:both\"></div>\n</div>',2,1,'C++教程','C++简介',NULL,NULL,NULL),(2,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">环境设置</span></h2> <h2 class=\"tutheader\">本地环境设置</h2> <p>如果您想要设置 C++ 语言环境，您需要确保电脑上有以下两款可用的软件，文本编辑器和 C++ 编译器。</p> <h2 class=\"tutheader\">文本编辑器</h2> <p>这将用于输入您的程序。文本编辑器包括 Windows Notepad、OS Edit command、Brief、Epsilon、EMACS 和 vim/vi。</p> <p>文本编辑器的名称和版本在不同的操作系统上可能会有所不同。例如，Notepad 通常用于 Windows 操作系统上，vim/vi 可用于 Windows 和 Linux/UNIX 操作系统上。</p> <p>通过编辑器创建的文件通常称为源文件，源文件包含程序源代码。C++ 程序的源文件通常使用扩展名 .cpp、.cp 或 .c。</p> <p>在开始编程之前，请确保您有一个文本编辑器，且有足够的经验来编写一个计算机程序，然后把它保存在一个文件中，编译并执行它。</p> <h2 class=\"tutheader\">C++ 编译器</h2> <p>写在源文件中的源代码是人类可读的源。它需要\"编译\"，转为机器语言，这样 CPU 可以按给定指令执行程序。</p> <p>C++ 编译器用于把源代码编译成最终的可执行程序。</p> <p>大多数的 C++ 编译器并不在乎源文件的扩展名，但是如果您未指定扩展名，则默认使用 .cpp。</p> <p>最常用的免费可用的编译器是 GNU 的 C/C++ 编译器，如果您使用的是 HP 或 Solaris，则可以使用各自操作系统上的编译器。</p> <p>以下部分将指导您如何在不同的操作系统上安装 GNU 的 C/C++ 编译器。这里同时提到 C/C++，主要是因为 GNU 的 gcc 编译器适合于 C 和 C++ 编程语言。</p> <h2 class=\"tutheader\">安装 GNU 的 C/C++ 编译器</h2> <h2>UNIX/Linux 上的安装</h2> <p>如果您使用的是 <b>Linux 或 UNIX</b>，请在命令行使用下面的命令来检查您的系统上是否安装了 GCC：</p> <pre>$ g++ -v\n</pre> <p>如果您的计算机上已经安装了 GNU 编译器，则会显示如下消息：</p> <pre>Using built-in specs.\nTarget: i386-redhat-linux\nConfigured with: ../configure --prefix=/usr .......\nThread model: posix\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)\n</pre> <p>如果未安装 GCC，那么请按照 <a href=\"//gcc.gnu.org/install/\" rel=\"external nofollow\" target=\"_blank\">http://gcc.gnu.org/install/</a> 上的详细说明安装 GCC。</p> <h2>Mac OS X 上的安装</h2> <p>如果您使用的是 Mac OS X，最快捷的获取 GCC 的方法是从苹果的网站上下载 Xcode 开发环境，并按照安装说明进行安装。一旦安装上 Xcode，您就能使用 GNU 编译器。</p> <p>Xcode 目前可从 <a href=\"//developer.apple.com/technologies/tools/\" rel=\"external nofollow\" target=\"_blank\">developer.apple.com/technologies/tools/</a> 上下载。</p> <h2>Windows 上的安装</h2> <p>为了在 Windows 上安装 GCC，您需要安装 MinGW。为了安装 MinGW，请访问 MinGW 的主页 <a href=\"//www.mingw.org/\" rel=\"external nofollow\" target=\"_blank\">www.mingw.org</a>，进入 MinGW 下载页面，下载最新版本的 MinGW 安装程序，命名格式为 MinGW-&lt;version&gt;.exe。</p> <p>当安装 MinWG 时，您至少要安装 gcc-core、gcc-g++、binutils 和 MinGW runtime，但是一般情况下都会安装更多其他的项。</p> <p>添加您安装的 MinGW 的 bin 子目录到您的 <b>PATH</b> 环境变量中，这样您就可以在命令行中通过简单的名称来指定这些工具。</p> <p>当完成安装时，您可以从 Windows 命令行上运行 gcc、g++、ar、ranlib、dlltool 和其他一些 GNU 工具。</p></div>\n<div style=\"clear:both\"></div>\n</div>',3,1,'C++教程','C++环境设置',NULL,NULL,NULL),(3,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">基本语法</span></h2> <div class=\"tutintro\"> <p>C++ 程序可以定义为对象的集合，这些对象通过调用彼此的方法进行交互。现在让我们简要地看一下什么是类、对象，方法、即时变量。</p> <ul class=\"list\"> <li><strong>对象 -</strong> 对象具有状态和行为。例如：一只狗的状态 - 颜色、名称、品种，行为 - 摇动、叫唤、吃。对象是类的实例。</li> <li><strong>类 -</strong> 类可以定义为描述对象行为/状态的模板/蓝图。</li> <li><strong>方法 -</strong> 从基本上说，一个方法表示一种行为。一个类可以包含多个方法。可以在方法中写入逻辑、操作数据以及执行所有的动作。</li> <li><strong>即时变量 -</strong> 每个对象都有其独特的即时变量。对象的状态是由这些即时变量的值创建的。</li> </ul> </div> <h2 class=\"tutheader\">C++ 程序结构</h2> <p>让我们看一段简单的代码，可以输出单词 <em>Hello World</em>。</p> <pre lang=\"cpp\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-comment\">// main() 是程序开始执行的地方</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Hello World\"</span>; <span class=\"hljs-comment\">// 输出 Hello World    return 0; </span>\n} </code></pre> <p>接下来我们讲解一下上面这段程序：</p> <ul class=\"list\"> <li>C++ 语言定义了一些头文件，这些头文件包含了程序中必需的或有用的信息。上面这段程序中，包含了头文件 <strong>&lt;iostream&gt;</strong>。</li> <li>行 <strong>using namespace std;</strong> 告诉编译器使用 std 命名空间。命名空间是 C++ 中一个相对新的概念。</li> <li>下一行 <strong>// main() 是程序开始执行的地方</strong> 是一个单行注释。单行注释以 // 开头，在行末结束。</li> <li>下一行 <strong>int main()</strong> 是主函数，程序从这里开始执行。</li> <li>下一行 <strong>cout &lt;&lt; \"Hello World\";</strong> 会在屏幕上显示消息 \"Hello World\"。</li> <li>下一行 <strong>return 0;</strong> 终止 main( )函数，并向调用进程返回值 0。</li> </ul> <h2 class=\"tutheader\">编译 &amp; 执行 C++ 程序</h2> <p>接下来让我们看看如何把源代码保存在一个文件中，以及如何编译并运行它。下面是简单的步骤：</p> <ul class=\"list\"> <li>打开一个文本编辑器，添加上述代码。</li> <li>保存文件为 hello.cpp。</li> <li>打开命令提示符，进入到保存文件所在的目录。</li> <li>键入 \'g++ hello.cpp \'，输入回车，编译代码。如果代码中没有错误，命令提示符会跳到下一行，并生成 a.out 可执行文件。</li> <li>现在，键入 \' a.out\' 来运行程序。</li> <li>您可以看到屏幕上显示 \' Hello World \'。</li> </ul> <pre>$ g++ hello.cpp\n$ ./a.out\nHello World\n</pre> <p>请确保您的路径中已包含 g++ 编译器，并确保在包含源文件 hello.cpp 的目录中运行它。</p> <p>您也可以使用 makefile 来编译 C/C++ 程序。</p> <h2 class=\"tutheader\">C++ 中的分号 &amp; 块</h2> <p>在 C++ 中，分号是语句结束符。也就是说，每个语句必须以分号结束。它表明一个逻辑实体的结束。</p> <p>例如，下面是三个不同的语句：</p> <pre>x = y;\ny = y+1;\nadd(x, y);\n</pre> <p>块是一组使用大括号括起来的按逻辑连接的语句。例如：</p> <pre>{\n   cout &lt;&lt; \"Hello World\"; // 输出 Hello World    return 0; \n} </pre> <p>C++ 不以行末作为结束符的标识，因此，您可以在一行上放置多个语句。例如：</p> <pre>x = y;\ny = y+1;\nadd(x, y);\n</pre> <p>等同于</p> <pre>x = y; y = y+1; add(x, y);\n</pre> <h2 class=\"tutheader\">C++ 标识符</h2> <p>C++ 标识符是用来标识变量、函数、类、模块，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。</p> <p>C++ 标识符内不允许出现标点字符，比如 @、$ 和 %。C++ 是区分大小写的编程语言。因此，在 C++ 中，<strong>Manpower</strong> 和 <strong>manpower</strong> 是两个不同的标识符。</p> <p>下面列出几个有效的标识符：</p> <pre>mohd       zara    abc   move_name  a_123\nmyname50   _temp   j     a23b9      retVal\n</pre> <h2 class=\"tutheader\">C++ 关键字</h2> <p>下表列出了 C++ 中的保留字。这些保留字不能作为常量名、变量名或其他标识符名称。</p> <table class=\"reference notranslate \"> <tbody><tr><td>asm</td><td>else</td><td>new</td><td>this</td></tr> <tr><td>auto</td><td>enum</td><td>operator</td><td>throw</td></tr> <tr><td>bool</td><td>explicit</td><td>private</td><td>true</td></tr> <tr><td>break</td><td>export</td><td>protected</td><td>try</td></tr> <tr><td>case</td><td>extern</td><td>public</td><td>typedef</td></tr> <tr><td>catch</td><td>false</td><td>register</td><td>typeid</td></tr> <tr><td>char</td><td>float</td><td>reinterpret_cast</td><td>typename</td></tr> <tr><td>class</td><td>for</td><td>return</td><td>union</td></tr> <tr><td>const</td><td>friend</td><td>short</td><td>unsigned</td></tr> <tr><td>const_cast</td><td>goto</td><td>signed</td><td>using</td></tr> <tr><td>continue</td><td>if</td><td>sizeof</td><td>virtual</td></tr> <tr><td>default</td><td>inline</td><td>static</td><td>void</td></tr> <tr><td>delete</td><td>int</td><td>static_cast</td><td>volatile</td></tr> <tr><td>do</td><td>long</td><td>struct</td><td>wchar_t</td></tr> <tr><td>double</td><td>mutable</td><td>switch</td><td>while</td></tr> <tr><td>dynamic_cast</td><td>namespace</td><td>template</td><td>&nbsp;</td></tr> </tbody></table> <br> <h2 class=\"tutheader\">三字符组</h2> <p>三字符组就是用于表示另一个字符的三个字符序列，又称为三字符序列。三字符序列总是以两个问号开头。</p> <p>三字符序列不太常见，但 C++ 标准允许把某些字符指定为三字符序列。以前为了表示键盘上没有的字符，这是必不可少的一种方法。</p> <p>三字符序列可以出现在任何地方，包括字符串、字符序列、注释和预处理指令。</p> <p>下面列出了最常用的三字符序列：</p> <table class=\"reference notranslate \"> <tbody><tr><th>三字符组</th><th>替换</th></tr> <tr><td>??=</td><td>#</td></tr> <tr><td>??/</td><td>\\</td></tr> <tr><td>??\'</td><td>^</td></tr> <tr><td>??(</td><td>[</td></tr> <tr><td>??)</td><td>]</td></tr> <tr><td>??!</td><td>|</td></tr> <tr><td>??&lt;</td><td>{</td></tr> <tr><td>??&gt;</td><td>}</td></tr> <tr><td>??-</td><td>~</td></tr> </tbody></table> <p>所有的编译器都不支持三字符组，为避免造成混乱，不建议使用三字符组。</p> <h2 class=\"tutheader\">C++ 中的空格</h2> <p>只包含空格的行，被称为空白行，可能带有注释，C++ 编译器会完全忽略它。</p> <p>在 C++ 中，空格用于描述空白符、制表符、换行符和注释。空格分隔语句的各个部分，让编译器能识别语句中的某个元素（比如 int）在哪里结束，下一个元素在哪里开始。因此，在下面的语句中：</p> <pre>int age;\n</pre> <p>在这里，int 和 age 之间必须至少有一个空格字符（通常是一个空白符），这样编译器才能够区分它们。另一方面，在下面的语句中：</p> <pre>fruit = apples + oranges;   // 获取水果的总数\n</pre> <p>fruit 和 =，或者 = 和 apples 之间的空格字符不是必需的，但是为了增强可读性，您可以根据需要适当增加一些空格。</p></div>\n<div style=\"clear:both\"></div>\n</div>',4,2,'C++教程','C++基本语法',NULL,NULL,NULL),(4,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">注释</span></h2> \n<p>程序的注释是解释性语句，您可以在 C++ 代码中包含注释，这将提高源代码的可读性。所有的编程语言都允许某种形式的注释。</p>\n<p>C++ 支持单行注释和多行注释。注释中的所有字符会被 C++ 编译器忽略。</p>\n<p>C++ 注释以 /* 开始，以 */ 终止。例如：</p> <pre>/* 这是注释 */\n\n/* C++ 注释也可以\n * 跨行\n */\n</pre> \n<p>注释也能以 // 开始，直到行末为止。例如：</p> <pre lang=\"c\" showdemo=\"1\"><code class=\"c hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> </span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\nmain()\n{\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Hello World\"</span>; <span class=\"hljs-comment\">// 输出 Hello World     return 0;</span><span style=\"line-height: 1.7;\"><span class=\"hljs-comment\">&nbsp;</span>\n</span><span style=\"line-height: 1.7;\">} </span></code></pre> \n<p>当上面的代码被编译时，编译器会忽略 <strong>// prints Hello World</strong>，最后会产生以下结果：</p> <pre>Hello World\n</pre> \n<p>在 /* 和 */ 注释内部，// 字符没有特殊的含义。在 // 注释内，/* 和 */ 字符也没有特殊的含义。因此，您可以在一种注释内嵌套另一种注释。例如：</p> <pre>/* 用于输出 Hello World 的注释\n\ncout &lt;&lt; \"Hello World\"; // 输出 Hello World  */ </pre></div>\n<div style=\"clear:both\"></div>\n</div>',5,3,'C++教程','C++注释',NULL,NULL,NULL),(5,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">数据类型</span></h2> \n<div class=\"tutintro\">\n    <p>使用编程语言进行编程时，需要用到各种变量来存储各种信息。变量保留的是它所存储的值的内存位置。这意味着，当您创建一个变量时，就会在内存中保留一些空间。</p>\n    <p>您可能需要存储各种数据类型（比如字符型、宽字符型、整型、浮点型、双浮点型、布尔型等）的信息，操作系统会根据变量的数据类型，来分配内存和决定在保留内存中存储什么。</p>\n</div>\n <h2 class=\"tutheader\">基本的内置类型</h2> \n<p>C++ 为程序员提供了种类丰富的内置数据类型和用户自定义的数据类型。下表列出了七种基本的 C++ 数据类型：</p>\n<table class=\"reference notranslate \">\n    <tbody>\n        <tr>\n            <th width=\"50%\">类型</th>\n            <th>关键字</th>\n        </tr>\n        <tr>\n            <td>布尔型</td>\n            <td>bool</td>\n        </tr>\n        <tr>\n            <td>字符型</td>\n            <td>char</td>\n        </tr>\n        <tr>\n            <td>整型</td>\n            <td>int</td>\n        </tr>\n        <tr>\n            <td>浮点型</td>\n            <td>float</td>\n        </tr>\n        <tr>\n            <td>双浮点型</td>\n            <td>double</td>\n        </tr>\n        <tr>\n            <td>无类型</td>\n            <td>void</td>\n        </tr>\n        <tr>\n            <td>宽字符型</td>\n            <td>wchar_t</td>\n        </tr>\n    </tbody>\n</table>\n<p>一些基本类型可以使用一个或多个类型修饰符进行修饰：</p>\n<ul class=\"list\">\n    <li>signed</li>\n    <li>unsigned</li>\n    <li>short</li>\n    <li>long</li>\n</ul>\n<p>下表显示了各种变量类型在内存中存储值时需要占用的内存，以及该类型的变量所能存储的最大值和最小值。</p><p><strong>注意：</strong>不同系统会有所差异。<br></p>\n<table class=\"reference\">\n<tbody><tr><th>类型</th><th>位</th><th>范围</th></tr>\n<tr><td>char</td><td>1 个字节</td><td>-128 到 127 或者 0 到 255</td></tr>\n<tr><td>unsigned char</td><td>1 个字节</td><td>0 到 255</td></tr>\n<tr><td>signed char</td><td>1 个字节</td><td>-128 到 127</td></tr>\n<tr><td>int</td><td>4 个字节</td><td>-2147483648 到 2147483647</td></tr>\n<tr><td>unsigned int</td><td>4 个字节</td><td>0 到 4294967295</td></tr>\n<tr><td>signed int</td><td>4 个字节</td><td>-2147483648 到 2147483647</td></tr>\n<tr><td>short int</td><td>2 个字节</td><td>-32768 到 32767</td></tr>\n<tr><td>unsigned short int</td><td>2 个字节</td><td>0 到 65,535</td></tr>\n<tr><td>signed short int</td><td>2 个字节</td><td>-32768 到 32767</td></tr>\n<tr><td>long int</td><td>8 个字节</td><td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td></tr>\n<tr><td>signed long int</td><td>8 个字节</td><td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td></tr>\n<tr><td>unsigned long int</td><td>8 个字节</td><td>0 to 18,446,744,073,709,551,615</td></tr>\n<tr><td>float</td><td>4 个字节</td><td>+/- 3.4e +/- 38 (~7 个数字)</td></tr>\n<tr><td>double</td><td>8 个字节</td><td>+/- 1.7e +/- 308 (~15 个数字)</td></tr>\n<tr><td>long double</td><td>16 个字节</td><td>+/- 1.7e +/- 308 (~15 个数字)</td></tr>\n<tr><td>wchar_t</td><td>2 或 4 个字节</td><td>1 个宽字符</td></tr>\n</tbody></table>\n<p>从上表可得知，变量的大小会根据编译器和所使用的电脑而有所不同。</p>\n<p>下面实例会输出您电脑上各种数据类型的大小。</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Size of char : \"</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">char</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Size of int : \"</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">int</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Size of short int : \"</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">short</span> <span class=\"hljs-keyword\">int</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Size of long int : \"</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Size of float : \"</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">float</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Size of double : \"</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">double</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Size of wchar_t : \"</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">wchar_t</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n\n<p>本实例使用了 <strong>endl</strong>，这将在每一行后插入一个换行符，&lt;&lt; 运算符用于向屏幕传多个值。我们也使用 <strong>sizeof()</strong> 函数来获取各种数据类型的大小。</p>\n<p>当上面的代码被编译和执行时，它会产生以下的结果，结果会根据所使用的计算机而有所不同：</p> <pre>Size of char : 1\nSize of int : 4\nSize of short int : 2\nSize of long int : 4\nSize of float : 4\nSize of double : 8\nSize of wchar_t : 4\n</pre> \n <h2 class=\"tutheader\">typedef 声明</h2> \n<p>您可以使用 <strong>typedef</strong> 为一个已有的类型取一个新的名字。下面是使用 typedef 定义一个新类型的语法：</p> <pre lang=\"cpp\"><code class=\"cpp hljs\"><span class=\"hljs-keyword\">typedef</span> type newname; \n</code></pre> \n<p>例如，下面的语句会告诉编译器，feet 是 int 的另一个名称：</p> <pre lang=\"cpp\"><code class=\"cpp hljs\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">int</span> feet;\n</code></pre> \n<p>现在，下面的声明是完全合法的，它创建了一个整型变量 distance：</p> <pre lang=\"cpp\"><code class=\"cpp hljs\">feet distance;\n</code></pre> \n <h2 class=\"tutheader\">枚举类型</h2> \n<p>枚举类型声明一个可选的类型名称和一组标识符，用来作为该类型的值。其带有零个或多个标识符可以被用来作为该类型的值。每个枚举数是一个枚举类型的常数。</p>\n<p>创建枚举，需要使用关键字 <strong>enum</strong>。枚举类型的一般形式为：</p> <pre lang=\"cpp\"><code class=\"cpp hljs\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-keyword\">enum</span>-name { <span class=\"hljs-built_in\">list</span> of names } var-<span class=\"hljs-built_in\">list</span>; \n</code></pre> \n<p>在这里，enum-name 是枚举类型的名称。名称列表 { list of names } 是用逗号分隔的。</p>\n<p>例如，下面的代码定义了一个颜色枚举，变量 c 的类型为 color。最后，c 被赋值为 \"blue\"。</p> <pre lang=\"cpp\"><code class=\"cpp hljs\"><span class=\"hljs-keyword\">enum</span> color { red, green, blue } c;\nc = blue;\n</code></pre> \n<p>默认情况下，第一个名称的值为 0，第二个名称的值为 1，第三个名称的值为 2，以此类推。但是，您也可以给名称赋予一个特殊的值，只需要添加一个初始值即可。例如，在下面的枚举中，<strong>green</strong> 的值为 5。</p> <pre>enum color { red, green=5, blue };\n</pre> \n<p>在这里，<strong>blue</strong> 的值为 6，因为默认情况下，每个名称都会比它前面一个名称大 1。</p>\n<br>\n<p>\n    <br>\n</p></div>\n<div style=\"clear:both\"></div>\n</div>',6,4,'C++教程','C++数据类型',NULL,NULL,NULL),(6,'<div class=\"content-bg\"><div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">变量类型</span></h2> <p>变量其实只不过是程序可操作的存储区的名称。C++ 中每个变量都有指定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。</p><p>变量的名称可以由字母、数字和下划线字符组成。它必须以字母或下划线开头。大写字母和小写字母是不同的，因为 C++ 是大小写敏感的。</p><p>基于前一章讲解的基本类型，有以下几种基本的变量类型，将在下一章中进行讲解：</p><table class=\"reference notranslate\">    <tbody>        <tr>            <th width=\"30%\">类型</th>            <th>描述</th>        </tr>        <tr>            <td>bool</td>            <td>存储值 true 或 false。</td>        </tr>        <tr>            <td>char</td>            <td>通常是一个八位字节（一个字节）。这是一个整数类型。</td>        </tr>        <tr>            <td>int</td>            <td>对机器而言，整数的最自然的大小。</td>        </tr>        <tr>            <td>float</td>            <td>单精度浮点值。</td>        </tr>        <tr>            <td>double</td>            <td>双精度浮点值。</td>        </tr>        <tr>            <td>void</td>            <td>表示类型的缺失。</td>        </tr>        <tr>            <td>wchar_t</td>            <td>宽字符类型。</td>        </tr>    </tbody></table><p>C++ 也允许定义各种其他类型的变量，比如<b>枚举、指针、数组、引用、数据结构、类</b>等等，这将会在后续的章节中进行讲解。</p><p>下面我们将讲解如何定义、声明和使用各种类型的变量。</p> <h2 class=\"tutheader\">C++ 中的变量定义</h2> <p>变量定义就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。变量定义指定一个数据类型，并包含了该类型的一个或多个变量的列表，如下所示：</p> <pre>type variable_list;</pre> <p>在这里，<b>type</b> 必须是一个有效的 C++ 数据类型，可以是 char、w_char、int、float、double、bool 或任何用户自定义的对象，<b>variable_list</b> 可以由一个或多个标识符名称组成，多个标识符之间用逗号分隔。下面列出几个有效的声明：</p> <pre lang=\"cpp\"><code class=\"cpp hljs\"><span class=\"hljs-keyword\">int</span>    i, j, k;<span class=\"hljs-keyword\">char</span>   c, ch;<span class=\"hljs-keyword\">float</span>  f, salary;<span class=\"hljs-keyword\">double</span> d;</code></pre> <p>行 <b>int i, j, k;</b> 声明并定义了变量 i、j 和 k，这指示编译器创建类型为 int 的名为 i、j、k 的变量。</p><p>变量可以在声明的时候被初始化（指定一个初始值）。初始化器由一个等号，后跟一个常量表达式组成，如下所示：</p> <pre>type variable_name = value;</pre> <p>下面列举几个实例：</p> <pre lang=\"cpp\"><code class=\"cpp hljs\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">int</span> d = <span class=\"hljs-number\">3</span>, f = <span class=\"hljs-number\">5</span>;    <span class=\"hljs-comment\">// d 和 f 的声明 </span><span class=\"hljs-keyword\">int</span> d = <span class=\"hljs-number\">3</span>, f = <span class=\"hljs-number\">5</span>;           <span class=\"hljs-comment\">// 定义并初始化 d 和 f</span>byte z = <span class=\"hljs-number\">22</span>;                <span class=\"hljs-comment\">// 定义并初始化 z</span><span class=\"hljs-keyword\">char</span> x = <span class=\"hljs-string\">\'x\'</span>;               <span class=\"hljs-comment\">// 变量 x 的值为 \'x\'</span></code></pre> <p>不带初始化的定义：带有静态存储持续时间的变量会被隐式初始化为 NULL（所有字节的值都是 0），其他所有变量的初始值是未定义的。</p> <h2 class=\"tutheader\">C++ 中的变量声明</h2> <p>变量声明向编译器保证变量以给定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。</p><p>当您使用多个文件且只在其中一个文件中定义变量时（定义变量的文件在程序连接时是可用的），变量声明就显得非常有用。您可以使用 <b>extern</b> 关键字在任何地方声明一个变量。虽然您可以在 C++ 程序中多次声明一个变量，但变量只能在某个文件、函数或代码块中被定义一次。</p> <h2 class=\"tutheader\">实例</h2> <p>尝试下面的实例，其中，变量在头部就已经被声明，但它们是在主函数内被定义和初始化的：</p> <pre lang=\"cpp\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<span class=\"hljs-comment\">// 变量声明</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">int</span> a, b;<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">int</span> c;<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">float</span> f;  <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span></span>{  <span class=\"hljs-comment\">// 变量定义</span>  <span class=\"hljs-keyword\">int</span> a, b;  <span class=\"hljs-keyword\">int</span> c;  <span class=\"hljs-keyword\">float</span> f;   <span class=\"hljs-comment\">// 实际初始化</span>  a = <span class=\"hljs-number\">10</span>;  b = <span class=\"hljs-number\">20</span>;  c = a + b;   <span class=\"hljs-built_in\">cout</span> &lt;&lt; c &lt;&lt; <span class=\"hljs-built_in\">endl</span> ;    f = <span class=\"hljs-number\">70.0</span>/<span class=\"hljs-number\">3.0</span>;   <span class=\"hljs-built_in\">cout</span> &lt;&lt; f &lt;&lt; <span class=\"hljs-built_in\">endl</span> ;     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; } </code></pre> <p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>3023.3333</pre> <p>同样的，在函数声明时，提供一个函数名，而函数的实际定义则可以在任何地方进行。例如：</p> <pre lang=\"cpp\"><code class=\"cpp hljs\"><span class=\"hljs-comment\">// 函数声明</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span></span>;<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>{    <span class=\"hljs-comment\">// 函数调用</span>    <span class=\"hljs-keyword\">int</span> i = func();}<span class=\"hljs-comment\">// 函数定义</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span></span>{    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;}</code></pre>  <h2 class=\"tutheader\">C++ 中的左值（Lvalues）和右值（Rvalues）</h2> <p>C++ 中有两种类型的表达式：</p><ul class=\"list\">    <li><b>左值（lvalue）：</b>指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。</li>    <li><b>右值（rvalue）：</b>术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。</li></ul><p>变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。下面是一个有效的语句：</p> <pre>int g = 20;</pre> <p>但是下面这个就不是一个有效的语句，会生成编译时错误：</p> <pre>10 = 20;</pre></div><div style=\"clear:both\"></div></div>',7,5,'C++教程','C++变量类型',NULL,NULL,NULL),(7,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">变量作用域</span></h2> \n<div class=\"tutintro\">\n    <p>作用域是程序的一个区域，一般来说有三个地方可以声明变量：</p>\n    <ul class=\"list\">\n        <li>在函数或一个代码块内部声明的变量，称为局部变量。</li>\n        <li>在函数参数的定义中声明的变量，称为形式参数。</li>\n        <li>在所有函数外部声明的变量，称为全局变量。</li>\n    </ul>\n    <p>我们将在后续的章节中学习什么是函数和参数。本章我们先来讲解声明是局部变量和全局变量。</p>\n</div>\n <h2 class=\"tutheader\">局部变量</h2> \n<p>在函数或一个代码块内部声明的变量，称为局部变量。它们只能被函数内部或者代码块内部的语句使用。下面的实例使用了局部变量：</p> <pre>#include &lt;iostream&gt;\nusing namespace std;\n \nint main ()\n{\n  // 局部变量声明\n  int a, b;\n  int c;\n \n  // 实际初始化\n  a = 10;\n  b = 20;\n  c = a + b;\n \n  cout &lt;&lt; c;     return 0; \n} </pre> \n <h2 class=\"tutheader\">全局变量</h2> \n<p>在所有函数外部定义的变量（通常是在程序的头部），称为全局变量。全局变量的值在程序的整个生命周期内都是有效的。</p>\n<p>全局变量可以被任何函数访问。也就是说，全局变量一旦声明，在整个程序中都是可用的。下面的实例使用了全局变量和局部变量：</p> <pre lang=\"cpp\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n \n<span class=\"hljs-comment\">// 全局变量声明</span>\n<span class=\"hljs-keyword\">int</span> g;\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n  <span class=\"hljs-comment\">// 局部变量声明</span>\n  <span class=\"hljs-keyword\">int</span> a, b;\n \n  <span class=\"hljs-comment\">// 实际初始化</span>\n  a = <span class=\"hljs-number\">10</span>;\n  b = <span class=\"hljs-number\">20</span>;\n  g = a + b;\n \n  <span class=\"hljs-built_in\">cout</span> &lt;&lt; g;     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n } </code></pre> \n<p>在程序中，局部变量和全局变量的名称可以相同，但是在函数内，局部变量的值会覆盖全局变量的值。下面是一个实例：</p> <pre lang=\"cpp\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n \n<span class=\"hljs-comment\">// 全局变量声明</span>\n<span class=\"hljs-keyword\">int</span> g = <span class=\"hljs-number\">20</span>;\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n  <span class=\"hljs-comment\">// 局部变量声明</span>\n  <span class=\"hljs-keyword\">int</span> g = <span class=\"hljs-number\">10</span>;\n \n  <span class=\"hljs-built_in\">cout</span> &lt;&lt; g;     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n} </code></pre> \n<p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>10\n</pre> \n <h2 class=\"tutheader\">初始化局部变量和全局变量</h2> \n<p>当局部变量被定义时，系统不会对其初始化，您必须自行对其初始化。定义全局变量时，系统会自动初始化为下列值：</p>\n<table class=\"reference notranslate  \">\n    <tbody>\n        <tr>\n            <th width=\"30%\">数据类型</th>\n            <th>初始化默认值</th>\n        </tr>\n        <tr>\n            <td>int</td>\n            <td>0</td>\n        </tr>\n        <tr>\n            <td>char</td>\n            <td><span>\'\\0\'</span>\n            </td>\n        </tr>\n        <tr>\n            <td>float</td>\n            <td>0</td>\n        </tr>\n        <tr>\n            <td>double</td>\n            <td>0</td>\n        </tr>\n        <tr>\n            <td>pointer</td>\n            <td>NULL</td>\n        </tr>\n    </tbody>\n</table>\n<p>正确地初始化变量是一个良好的编程习惯，否则有时候程序可能会产生意想不到的结果。</p></div>\n<div style=\"clear:both\"></div>\n</div>',8,6,'C++教程','C++变量作用域',NULL,NULL,NULL),(8,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">常量</span></h2> \n<div class=\"tutintro\">\n    <p>常量是固定值，在程序执行期间不会改变。这些固定的值，又叫做<strong>字面量</strong>。</p>\n    <p>常量可以是任何的基本数据类型，可分为整型数字、浮点数字、字符、字符串和布尔值。</p>\n    <p>常量就像是常规的变量，只不过常量的值在定义后不能进行修改。</p>\n</div>\n <h2 class=\"tutheader\">整数常量</h2> \n<p>整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。</p>\n<p>整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意。</p>\n<p>下面列举几个整数常量的实例：</p> <pre>212         // 合法的\n215u        // 合法的\n0xFeeL      // 合法的\n078         // 非法的：8 不是八进制的数字\n032UU       // 非法的：不能重复后缀\n</pre> \n<p>以下是各种类型的整数常量的实例：</p> <pre>85         // 十进制\n0213       // 八进制 \n0x4b       // 十六进制 \n30         // 整数 \n30u        // 无符号整数 \n30l        // 长整数 \n30ul       // 无符号长整数\n</pre> \n <h2 class=\"tutheader\">浮点常量</h2> \n<p>浮点常量由整数部分、小数点、小数部分和指数部分组成。您可以使用小数形式或者指数形式来表示浮点常量。</p>\n<p>当使用小数形式表示时，必须包含小数点、指数，或同时包含两者。当使用指数形式表示时，必须包含整数部分、小数部分，或同时包含两者。带符号的指数是用 e 或 E 引入的。</p>\n<p>下面列举几个浮点常量的实例：</p> <pre>3.14159       // 合法的 \n314159E-5L    // 合法的 \n510E          // 非法的：不完整的指数\n210f          // 非法的：没有小数或指数\n.e55          // 非法的：缺少整数或分数\n</pre> \n <h2 class=\"tutheader\">布尔常量</h2> \n<p>布尔常量共有两个，它们都是标准的 C++ 关键字：</p>\n<ul class=\"list\">\n    <li><strong>true</strong> 值代表真。</li>\n    <li><strong>false</strong> 值代表假。</li>\n</ul>\n<p>我们不应把 true 的值看成 1，把 false 的值看成 0。</p>\n <h2 class=\"tutheader\">字符常量</h2> \n<p>字符常量是括在单引号中。如果常量以 L（仅当大写时）开头，则表示它是一个宽字符常量（例如 L\'x\'），此时它必须存储在 <strong>wchar_t</strong> 类型的变量中。否则，它就是一个窄字符常量（例如 \'x\'），此时它可以存储在 <strong>char</strong> 类型的简单变量中。</p>\n<p>字符常量可以是一个普通的字符（例如 \'x\'）、一个转义序列（例如 \'\\t\'），或一个通用的字符（例如 \'\\u02C0\'）。</p>\n<p>在 C++ 中，有一些特定的字符，当它们前面有反斜杠时，它们就具有特殊的含义，被用来表示如换行符（\\n）或制表符（\\t）等。下表列出了一些这样的转义序列码：</p>\n<table class=\"reference notranslate \">\n    <tbody>\n        <tr>\n            <th>转义序列</th>\n            <th>含义</th>\n        </tr>\n        <tr>\n            <td>\\\\</td>\n            <td>\\ 字符</td>\n        </tr>\n        <tr>\n            <td>\\\'</td>\n            <td>\' 字符</td>\n        </tr>\n        <tr>\n            <td>\\\"</td>\n            <td>\" 字符</td>\n        </tr>\n        <tr>\n            <td>\\?</td>\n            <td>? 字符</td>\n        </tr>\n        <tr>\n            <td>\\a</td>\n            <td>警报铃声</td>\n        </tr>\n        <tr>\n            <td>\\b</td>\n            <td>退格键</td>\n        </tr>\n        <tr>\n            <td>\\f</td>\n            <td>换页符</td>\n        </tr>\n        <tr>\n            <td>\\n</td>\n            <td>换行符</td>\n        </tr>\n        <tr>\n            <td>\\r</td>\n            <td>回车</td>\n        </tr>\n        <tr>\n            <td>\\t</td>\n            <td>水平制表符</td>\n        </tr>\n        <tr>\n            <td>\\v</td>\n            <td>垂直制表符</td>\n        </tr>\n        <tr>\n            <td>\\ooo</td>\n            <td>一到三位的八进制数</td>\n        </tr>\n        <tr>\n            <td>\\xhh . . .</td>\n            <td>一个或多个数字的十六进制数</td>\n        </tr>\n    </tbody>\n</table>\n<p>下面的实例显示了一些转义序列字符：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Hello\\tWorld\\n\\n\"</span>;\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n<p></p>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>Hello   World\n</pre> \n <h2 class=\"tutheader\">字符串常量</h2> \n<p>字符串字面值或常量是括在双引号 \"\" 中的。一个字符串包含类似于字符常量的字符：普通的字符、转义序列和通用的字符。</p>\n<p>您可以使用空格做分隔符，把一个很长的字符串常量进行分行。</p>\n<p>下面的实例显示了一些字符串常量。下面这三种形式所显示的字符串是相同的。</p><pre lang=\"cpp\" style=\"max-width: 100%;\"><code class=\"cpp hljs\"><span class=\"hljs-string\">\"hello, dear\"</span>\n\n<span class=\"hljs-string\">\"hello, \\\n\ndear\"</span>\n\n<span class=\"hljs-string\">\"hello, \"</span> <span class=\"hljs-string\">\"d\"</span> <span class=\"hljs-string\">\"ear\"</span></code></pre> \n <h2 class=\"tutheader\">定义常量</h2> \n<p>在 C++ 中，有两种简单的定义常量的方式：</p>\n<ul class=\"list\">\n    <li>使用 <strong>#define</strong> 预处理器。</li>\n    <li>使用 <strong>const</strong> 关键字。</li>\n</ul>\n <h2>#define 预处理器</h2> \n<p>下面是使用 #define 预处理器定义常量的形式：</p> <pre>#define identifier value\n</pre> \n<p>具体请看下面的实例：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> LENGTH 10   </span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> WIDTH  5</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> NEWLINE <span class=\"hljs-meta-string\">\'\\n\'</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n\n   <span class=\"hljs-keyword\">int</span> area;  \n   \n   area = LENGTH * WIDTH;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; area;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; NEWLINE;\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n<p></p>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>50\n</pre> \n <h2>const 关键字</h2> \n<p>您可以使用 <strong>const</strong> 前缀声明指定类型的常量，如下所示：</p> <pre>const type variable = value;\n</pre> \n<p>具体请看下面的实例：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span>  LENGTH = <span class=\"hljs-number\">10</span>;\n   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span>  WIDTH  = <span class=\"hljs-number\">5</span>;\n   <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> NEWLINE = <span class=\"hljs-string\">\'\\n\'</span>;\n   <span class=\"hljs-keyword\">int</span> area;  \n   \n   area = LENGTH * WIDTH;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; area;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; NEWLINE;\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n} </code></pre>\n<p></p>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>50\n</pre> \n<p>请注意，把常量定义为大写字母形式，是一个很好的编程实践。</p>\n<br><p><br></p></div>\n<div style=\"clear:both\"></div>\n</div>',9,7,'C++教程','C++常量',NULL,NULL,NULL),(9,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">修饰符类型</span></h2> \n<p>C++ 允许在 <strong>char、int 和 double</strong> 数据类型前放置修饰符。修饰符用于改变基本类型的含义，所以它更能满足各种情境的需求。</p>\n<p>下面列出了数据类型修饰符：</p>\n<ul class=\"list\">\n    <li>signed</li>\n    <li>unsigned</li>\n    <li>long</li>\n    <li>short</li>\n</ul>\n<p>修饰符 <strong>signed、unsigned、long 和 short</strong> 可应用于整型，<strong>signed</strong> 和 <strong>unsigned</strong> 可应用于字符型，<strong>long</strong> 可应用于双精度型。</p>\n<p>修饰符 <strong>signed</strong> 和 <strong>unsigned</strong> 也可以作为 <strong>long</strong> 或 <strong>short</strong> 修饰符的前缀。例如：<strong>unsigned long int</strong>。</p>\n<p>C++ 允许使用速记符号来声明<strong>无符号短整数</strong>或<strong>无符号长整数</strong>。您可以不写 int，只写单词 <strong>unsigned short</strong> 或 <strong>unsigned long</strong>，int 是隐含的。例如，下面的两个语句都声明了无符号整型变量。</p> <pre>unsigned x;\nunsigned int y;\n</pre> \n<p>为了理解 C++ 解释有符号整数和无符号整数修饰符之间的差别，我们来运行一下下面这个短程序：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n \n<span class=\"hljs-comment\">/* \n * 这个程序演示了有符号整数和无符号整数之间的差别\n*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-keyword\">short</span> <span class=\"hljs-keyword\">int</span> i;           <span class=\"hljs-comment\">// 有符号短整数</span>\n   <span class=\"hljs-keyword\">short</span> <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> j;  <span class=\"hljs-comment\">// 无符号短整数</span>\n\n   j = <span class=\"hljs-number\">50000</span>;\n\n   i = j;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">\" \"</span> &lt;&lt; j;\n\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n} </code></pre>\n<p></p>\n<p>当上面的程序运行时，会输出下列结果：</p> <pre>-15536 50000\n</pre> \n<p>上述结果中，无符号短整数 50,000 的位模式被解释为有符号短整数 -15,536。</p>\n <h2 class=\"tutheader\">C++ 中的类型限定符</h2> \n<p>类型限定符提供了变量的额外信息。</p>\n<table class=\"reference notranslate \">\n    <tbody>\n        <tr>\n            <th>限定符</th>\n            <th>含义</th>\n        </tr>\n        <tr>\n            <td>const</td>\n            <td><strong>const</strong> 类型的对象在程序执行期间不能被修改改变。</td>\n        </tr>\n        <tr>\n            <td>volatile</td>\n            <td>修饰符 <strong>volatile</strong> 告诉编译器，变量的值可能以程序未明确指定的方式被改变。</td>\n        </tr>\n        <tr>\n            <td>restrict</td>\n            <td>由 <strong>restrict</strong> 修饰的指针是唯一一种访问它所指向的对象的方式。只有 C99 增加了新的类型限定符 restrict。</td>\n        </tr>\n    </tbody>\n</table><p><br></p></div>\n<div style=\"clear:both\"></div>\n</div>',10,8,'C++教程','C++修饰符类型',NULL,NULL,NULL),(10,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">存储类</span></h2> \n<div class=\"tutintro\">\n    <p>存储类定义 C++ 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C++ 程序中可用的存储类：</p>\n    <ul class=\"list\">\n        <li>auto</li>\n        <li>register</li>\n        <li>static</li>\n        <li>extern</li>\n        <li>mutable</li>\n    </ul>\n</div>\n <h2 class=\"tutheader\">auto 存储类</h2> \n<p><strong>auto</strong> 存储类是所有局部变量默认的存储类。</p> <pre>{\n   int mount;\n   auto int month;\n}\n</pre> \n<p>上面的实例定义了两个带有相同存储类的变量，auto 只能用在函数内，即 auto 只能修饰局部变量。</p>\n <h2 class=\"tutheader\">register 存储类</h2> \n<p><strong>register</strong> 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 \'&amp;\' 运算符（因为它没有内存位置）。</p> <pre>{\n   register int  miles;\n}\n</pre> \n<p>寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 \'register\' 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。</p>\n <h2 class=\"tutheader\">static 存储类</h2> \n<p><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</p>\n<p>static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p>\n<p>在 C++ 中，当 static 用在类数据成员上时，会导致仅有一个该成员的副本被类的所有对象共享。</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n \n<span class=\"hljs-comment\">// 函数声明 </span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span></span>;\n \n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> count = <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">/* 全局变量 */</span>\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">while</span>(count--)\n    {\n       func();\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n<span class=\"hljs-comment\">// 函数定义</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">void</span> )</span>\n</span>{\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// 局部静态变量</span>\n    i++;\n    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"变量 i 为 \"</span> &lt;&lt; i ;\n    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\" , 变量 count 为 \"</span> &lt;&lt; count &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n}</code></pre>\n<p></p>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<p></p><pre><span>变量</span><span> i </span><span>为</span><span> </span><span>6</span><span> </span><span>,</span><span> </span><span>变量</span><span> count </span><span>为</span><span> </span><span>9</span><span>\n</span><span>变量</span><span> i </span><span>为</span><span> </span><span>7</span><span> </span><span>,</span><span> </span><span>变量</span><span> count </span><span>为</span><span> </span><span>8</span><span>\n</span><span>变量</span><span> i </span><span>为</span><span> </span><span>8</span><span> </span><span>,</span><span> </span><span>变量</span><span> count </span><span>为</span><span> </span><span>7</span><span>\n</span><span>变量</span><span> i </span><span>为</span><span> </span><span>9</span><span> </span><span>,</span><span> </span><span>变量</span><span> count </span><span>为</span><span> </span><span>6</span><span>\n</span><span>变量</span><span> i </span><span>为</span><span> </span><span>10</span><span> </span><span>,</span><span> </span><span>变量</span><span> count </span><span>为</span><span> </span><span>5</span><span>\n</span><span>变量</span><span> i </span><span>为</span><span> </span><span>11</span><span> </span><span>,</span><span> </span><span>变量</span><span> count </span><span>为</span><span> </span><span>4</span><span>\n</span><span>变量</span><span> i </span><span>为</span><span> </span><span>12</span><span> </span><span>,</span><span> </span><span>变量</span><span> count </span><span>为</span><span> </span><span>3</span><span>\n</span><span>变量</span><span> i </span><span>为</span><span> </span><span>13</span><span> </span><span>,</span><span> </span><span>变量</span><span> count </span><span>为</span><span> </span><span>2</span><span>\n</span><span>变量</span><span> i </span><span>为</span><span> </span><span>14</span><span> </span><span>,</span><span> </span><span>变量</span><span> count </span><span>为</span><span> </span><span>1</span><span>\n</span><span>变量</span><span> i </span><span>为</span><span> </span><span>15</span><span> </span><span>,</span><span> </span><span>变量</span><span> count </span><span>为</span><span> </span><span>0</span></pre>\n<p></p>\n <h2 class=\"tutheader\">extern 存储类</h2> \n<p><strong>extern</strong> 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 \'extern\' 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。</p>\n<p>当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，<em>extern</em> 是用来在另一个文件中声明一个全局变量或函数。</p>\n<p>extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候，如下所示：</p>\n<p>第一个文件：main.cpp</p> <pre lang=\"cpp\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n \n<span class=\"hljs-keyword\">int</span> count ;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">write_extern</span><span class=\"hljs-params\">()</span></span>;\n \nmain()\n{\n   count = <span class=\"hljs-number\">5</span>;\n   write_extern();\n}\n</code></pre> \n<p>第二个文件：support.cpp</p> <pre lang=\"cpp\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n \n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">int</span> count;\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">write_extern</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span>\n</span>{\n   <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Count is \"</span> &lt;&lt; count &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>; \n} </code></pre> \n<p>在这里，第二个文件中的 <em>extern</em> 关键字用于声明已经在第一个文件 main.cpp 中定义的 count。现在 ，编译这两个文件，如下所示：</p> <pre>$g++ main.cpp support.cpp -o write\n</pre> \n<p>这会产生 <strong>write</strong> 可执行程序，尝试执行 <strong>write</strong>，它会产生下列结果：</p>\n<p></p><pre><span>$ </span><span>./</span><span>write\n</span><span>Count</span><span> </span><span>is</span><span> </span><span>5</span></pre>\n<p></p>\n <h2 class=\"tutheader\">mutable 存储类</h2> \n<p><strong>mutable</strong> 说明符仅适用于类的对象，这将在本教程的最后进行讲解。它允许对象的成员替代常量。也就是说，mutable 成员可以通过 const 成员函数修改。</p><p><br></p></div>\n<div style=\"clear:both\"></div>\n</div>',11,9,'C++教程','C++存储类',NULL,NULL,NULL),(11,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">判断</span></h2> \n<div class=\"tutintro\">\n    <p>判断结构要求程序员指定一个或多个要评估或测试的条件，以及条件为真时要执行的语句（必需的）和条件为假时要执行的语句（可选的）。</p>\n    <p>下面是大多数编程语言中典型的判断结构的一般形式：</p>\n    <img src=\"https://atts.w3cschool.cn/attachments/image/20160829/1472441464322138.png\" alt=\"c++判断\">\n    <br>\n</div>\n <h2 class=\"tutheader\"><br></h2>\n<h2 class=\"tutheader\"><br></h2>\n<h2 class=\"tutheader\"><br></h2>\n<h2 class=\"tutheader\"><br></h2>\n<h2 class=\"tutheader\"><br></h2>\n<h2 class=\"tutheader\"><br></h2>\n<h2 class=\"tutheader\"><br></h2>\n<h2 class=\"tutheader\"><br></h2>\n<h2 class=\"tutheader\"><br></h2>\n<h2 class=\"tutheader\"><hr>判断语句</h2> \n<p>C++ 编程语言提供了以下类型的判断语句。点击链接查看每个语句的细节。</p>\n<table class=\"reference notranslate \">\n    <tbody>\n        <tr>\n            <th style=\"width:35%\">语句</th>\n            <th>描述</th>\n        </tr>\n        <tr>\n            <td><a href=\"cpp-if.html\" title=\"C++ 中的 if 语句\">if 语句</a>\n            </td>\n            <td>一个 <strong>if 语句</strong> 由一个布尔表达式后跟一个或多个语句组成。</td>\n        </tr>\n        <tr>\n            <td><a href=\"cpp-if-else.html\" title=\"C++ 中的 if...else 语句\">if...else 语句</a>\n            </td>\n            <td>一个 <strong>if 语句</strong> 后可跟一个可选的 <strong>else 语句</strong>，else 语句在布尔表达式为假时执行。</td>\n        </tr>\n        <tr>\n            <td><a href=\"cpp-nested-if.html\" title=\"C++ 中的嵌套 if 语句\">嵌套 if 语句</a>\n            </td>\n            <td>您可以在一个 <strong>if</strong> 或 <strong>else if</strong> 语句内使用另一个 <strong>if</strong> 或 <strong>else if</strong> 语句。</td>\n        </tr>\n        <tr>\n            <td><a href=\"cpp-switch.html\" title=\"C++ 中的 switch 语句\">switch 语句</a>\n            </td>\n            <td>一个 <strong>switch</strong> 语句允许测试一个变量等于多个值时的情况。</td>\n        </tr>\n        <tr>\n            <td><a href=\"cpp-nested-switch.html\" title=\"C++ 中的嵌套 switch 语句\">嵌套 switch 语句</a>\n            </td>\n            <td>您可以在一个 <strong>switch</strong> 语句内使用另一个 <strong>switch </strong> 语句。</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n <h2 class=\"tutheader\">? : 运算符</h2> \n<p>我们已经在前面的章节中讲解了 <a href=\"cpp-conditional-operator.html\"><strong>条件运算符 ? :</strong></a>，可以用来替代 <strong>if...else</strong> 语句。它的一般形式如下：</p> <pre>Exp1 ? Exp2 : Exp3;\n</pre> \n<p>其中，Exp1、Exp2 和 Exp3 是表达式。请注意，冒号的使用和位置。</p>\n<p>? 表达式的值是由 Exp1 决定的。如果 Exp1 为真，则计算 Exp2 的值，结果即为整个 ? 表达式的值。如果 Exp1 为假，则计算 Exp3 的值，结果即为整个 ? 表达式的值。</p></div>\n<div style=\"clear:both\"></div>\n</div>',12,10,'C++教程','C++判断',NULL,NULL,NULL),(12,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">循环</span></h2> <div class=\"tutintro\"> <p>有的时候，可能需要多次执行同一块代码。一般情况下，语句是顺序执行的：函数中的第一个语句先执行，接着是第二个语句，依此类推。</p> <p>编程语言提供了允许更为复杂的执行路径的多种控制结构。</p> <p>循环语句允许我们多次执行一个语句或语句组，下面是大多数编程语言中循环语句的一般形式：</p> <img src=\"https://atts.w3cschool.cn/attachments/image/20160829/1472440363761312.png\" style=\"text-align: center;\" alt=\"\"><div style=\"text-align: center;\"><br></div> </div> <h2 class=\"tutheader\" style=\"text-align: center;\"><br></h2><h2 class=\"tutheader\" style=\"text-align: center;\"><br></h2><h2 class=\"tutheader\" style=\"text-align: center;\"><br></h2><h2 class=\"tutheader\" style=\"text-align: center;\"><br></h2><h2 class=\"tutheader\" style=\"text-align: center;\"><br></h2><h2 class=\"tutheader\" style=\"text-align: center;\"><br></h2><h2 class=\"tutheader\" style=\"text-align: center;\"><br></h2><h2 class=\"tutheader\" style=\"text-align: center;\"><br></h2><h2 class=\"tutheader\" style=\"text-align: center;\"><br></h2><div style=\"text-align: center;\"><br></div><h2 class=\"tutheader\"><hr>循环类型</h2> <p>C++ 编程语言提供了以下几种循环类型。点击链接查看每个类型的细节。</p> <table class=\"reference notranslate \"> <tbody><tr><th style=\"width:30%\">循环类型</th><th>描述</th></tr> <tr><td><a href=\"cpp-while-loop.html\" title=\"C++ 中的 while 循环\">while 循环</a></td><td>当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。</td></tr> <tr><td><a href=\"cpp-for-loop.html\" title=\"C++ 中的 for 循环\">for 循环</a></td><td>多次执行一个语句序列，简化管理循环变量的代码。</td></tr> <tr><td><a href=\"cpp-do-while-loop.html\" title=\"C++ 中的 do...while 循环\">do...while 循环</a></td><td>除了它是在循环主体结尾测试条件外，其他与 while 语句类似。</td></tr> <tr><td><a href=\"cpp-nested-loops.html\" title=\"C++ 中的嵌套循环\">嵌套循环</a></td><td>您可以在 while、for 或 do..while 循环内使用一个或多个循环。</td></tr> </tbody></table> <br> <h2 class=\"tutheader\">循环控制语句</h2> <p>循环控制语句更改执行的正常序列。当执行离开一个范围时，所有在该范围中创建的自动对象都会被销毁。</p> <p>C++ 提供了下列的控制语句。点击链接查看每个语句的细节。</p> <table class=\"reference notranslate \"> <tbody><tr><th style=\"width:30%\">控制语句</th><th>描述</th></tr> <tr><td><a href=\"cpp-break-statement.html\" title=\"C++ 中的 break 语句\">break 语句</a></td><td>终止 <strong>loop</strong> 或 <strong>switch</strong> 语句，程序流将继续执行紧接着 loop 或 switch 的下一条语句。</td></tr> <tr><td><a href=\"cpp-continue-statement.html\" title=\"C++ 中的 continue 语句\">continue 语句</a></td><td>引起循环跳过主体的剩余部分，立即重新开始测试条件。</td></tr> <tr><td><a href=\"cpp-goto-statement.html\" title=\"C++ 中的 goto 语句\">goto 语句</a></td><td>将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。</td></tr> </tbody></table> <br> <h2 class=\"tutheader\">无限循环</h2> <p>如果条件永远不为假，则循环将变成无限循环。<strong>for</strong> 循环在传统意义上可用于实现无限循环。由于构成循环的三个表达式中任何一个都不是必需的，您可以将某些条件表达式留空来构成一个无限循环。</p> <pre lang=\"cpp\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n\n   <span class=\"hljs-keyword\">for</span>( ; ; )\n   {\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"This loop will run forever.\\n\"</span>);\n   }\n\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre> <p>当条件表达式不存在时，它被假设为真。您也可以设置一个初始值和增量表达式，但是一般情况下，C++ 程序员偏向于使用 for(;;) 结构来表示一个无限循环。</p> <p><strong>注意：</strong>您可以按 Ctrl + C 键终止一个无限循环。</p></div>\n<div style=\"clear:both\"></div>\n</div>',13,11,'C++教程','C++循环',NULL,NULL,NULL),(13,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">函数</span></h2> \n<div class=\"tutintro\">\n    <p>函数是一组一起执行一个任务的语句。每个 C++ 程序都至少有一个函数，即主函数 <b>main()</b> ，所有简单的程序都可以定义其他额外的函数。</p>\n    <p>您可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由您来决定的，但在逻辑上，划分通常是根据每个函数执行一个特定的任务来进行的。</p>\n    <p>函数<b>声明</b>告诉编译器函数的名称、返回类型和参数。函数<b>定义</b>提供了函数的实际主体。</p>\n    <p>C++ 标准库提供了大量的程序可以调用的内置函数。例如，函数 <b>strcat()</b> 用来连接两个字符串，函数 <b>memcpy()</b> 用来复制内存到另一个位置。</p>\n    <p>函数还有很多叫法，比如方法、子例程或程序，等等。</p>\n</div>\n <h2 class=\"tutheader\">定义函数</h2> \n<p>C++ 中的函数定义的一般形式如下：</p> <pre>return_type function_name( parameter list )\n{\n   body of the function\n}\n</pre> \n<p>在 C++ 中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：</p>\n<ul class=\"list\">\n    <li><b>返回类型：</b>一个函数可以返回一个值。<b>return_type</b> 是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type 是关键字 <b>void</b>。</li>\n    <li><b>函数名称：</b>这是函数的实际名称。函数名和参数列表一起构成了函数签名。</li>\n    <li><b>参数：</b>参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数。</li>\n    <li><b>函数主体：</b>函数主体包含一组定义函数执行任务的语句。</li>\n</ul>\n <h2 class=\"tutheader\">实例</h2> \n<p>以下是 <b>max()</b> 函数的源代码。该函数有两个参数 num1 和 num2，会返回这两个数中较大的那个数：</p> <pre lang=\"cpp\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-comment\">// 函数返回两个数中较大的那个数</span>\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> num1, <span class=\"hljs-keyword\">int</span> num2)</span> \n</span>{\n   <span class=\"hljs-comment\">// 局部变量声明</span>\n   <span class=\"hljs-keyword\">int</span> result;\n \n   <span class=\"hljs-keyword\">if</span> (num1 &gt; num2)\n      result = num1;\n   <span class=\"hljs-keyword\">else</span>\n      result = num2;\n \n   <span class=\"hljs-keyword\">return</span> result; \n}\n</code></pre> \n <h2 class=\"tutheader\">函数声明</h2> \n<p>函数<b>声明</b>会告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>\n<p>函数声明包括以下几个部分：</p> <pre>return_type function_name( parameter list );\n</pre> \n<p>针对上面定义的函数 max()，以下是函数声明：</p> <pre>int max(int num1, int num2);\n</pre> \n<p>在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明：</p> <pre>int max(int, int);\n</pre> \n<p>当您在一个源文件中定义函数且在另一个文件中调用函数时，函数声明是必需的。在这种情况下，您应该在调用函数的文件顶部声明函数。</p>\n <h2 class=\"tutheader\">调用函数</h2> \n<p>创建 C++ 函数时，会定义函数做什么，然后通过调用函数来完成已定义的任务。</p>\n<p>当程序调用函数时，程序控制权会转移给被调用的函数。被调用的函数执行已定义的任务，当函数的返回语句被执行时，或到达函数的结束括号时，会把程序控制权交还给主程序。</p>\n<p>调用函数时，传递所需参数，如果函数返回一个值，则可以存储返回值。例如：</p> <pre lang=\"cpp\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n \n<span class=\"hljs-comment\">// 函数声明</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> num1, <span class=\"hljs-keyword\">int</span> num2)</span></span>;\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-comment\">// 局部变量声明</span>\n   <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">100</span>;\n   <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">200</span>;\n   <span class=\"hljs-keyword\">int</span> ret;\n \n   <span class=\"hljs-comment\">// 调用函数来获取最大值</span>\n   ret = max(a, b);\n \n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Max value is : \"</span> &lt;&lt; ret &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; }   <span class=\"hljs-comment\">// 函数返回两个数中较大的那个数</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> num1, <span class=\"hljs-keyword\">int</span> num2)</span>  </span>{    <span class=\"hljs-comment\">// 局部变量声明</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">int</span> result;\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">if</span> (num1 &gt; num2)\n      result = num1;\n   <span class=\"hljs-keyword\">else</span>\n      result = num2;\n \n   <span class=\"hljs-keyword\">return</span> result; \n}\n</code></pre> \n<p>把 max() 函数和 main() 函数放一块，编译源代码。当运行最后的可执行文件时，会产生下列结果：</p> <pre>Max value is : 200\n</pre> \n <h2 class=\"tutheader\">函数参数</h2> \n<p>如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的<b>形式参数</b>。</p>\n<p>形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。</p>\n<p>当调用函数时，有两种向函数传递参数的方式：</p>\n<table class=\"reference notranslate\">\n    <tbody>\n        <tr>\n            <th width=\"30%\">调用类型</th>\n            <th>描述</th>\n        </tr>\n        <tr>\n            <td> <a href=\"cpp-function-call-by-value.html\" title=\"C++ 中传值方式调用函数\">传值调用</a>\n            </td>\n            <td>该方法把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数对实际参数没有影响。</td>\n        </tr>\n        <tr>\n            <td> <a href=\"cpp-function-call-by-pointer.html\" title=\"C++ 中指针方式调用函数\">指针调用</a>\n            </td>\n            <td>该方法把参数的地址复制给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>\n        </tr>\n        <tr>\n            <td> <a href=\"cpp-function-call-by-reference.html\" title=\"C++ 中引用方式调用函数\">引用调用</a>\n            </td>\n            <td>该方法把参数的引用复制给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>\n        </tr>\n    </tbody>\n</table>\n<p>默认情况下，C++ 使用<b>传值调用</b>来传递参数。一般来说，这意味着函数内的代码不能改变用于调用函数的参数。之前提到的实例，调用 max() 函数时，使用了相同的方法。</p>\n <h2 class=\"tutheader\">参数的默认值</h2> \n<p>当您定义一个函数，您可以为参数列表中后边的每一个参数指定默认值。当调用函数时，如果实际参数的值留空，则使用这个默认值。</p>\n<p>这是通过在函数定义中使用赋值运算符来为参数赋值的。调用函数时，如果未传递参数的值，则会使用默认值，如果指定了值，则会忽略默认值，使用传递的值。请看下面的实例：</p> <pre showdemo=\"1\" lang=\"cpp\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b=<span class=\"hljs-number\">20</span>)</span>\n</span>{\n  <span class=\"hljs-keyword\">int</span> result;\n\n  result = a + b;\n  \n  <span class=\"hljs-keyword\">return</span> (result);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-comment\">// 局部变量声明</span>\n   <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">100</span>;\n   <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">200</span>;\n   <span class=\"hljs-keyword\">int</span> result;\n \n   <span class=\"hljs-comment\">// 调用函数来添加值</span>\n   result = sum(a, b);\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Total value is :\"</span> &lt;&lt; result &lt;&lt; <span class=\"hljs-built_in\">endl</span>;     <span class=\"hljs-comment\">// 再次调用函数</span>\n&nbsp;&nbsp;&nbsp;&nbsp;result = sum(a); \n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Total value is :\"</span> &lt;&lt; result &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n} </code></pre> \n<p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>Total value is :300\nTotal value is :120\n</pre> \n<br>\n<p>\n    <br>\n</p></div>\n<div style=\"clear:both\"></div>\n</div>',14,12,'C++教程','C++函数',NULL,NULL,NULL),(14,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">数字</span></h2> \n<div class=\"tutintro\">\n    <p>通常，当我们需要用到数字时，我们会使用原始的数据类型，如 int、short、long、float 和 double 等等。这些用于数字的数据类型，其可能的值和数值范围，我们已经在 C++ 数据类型一章中讨论过。</p>\n</div>\n <h2 class=\"tutheader\">C++ 定义数字</h2> \n<p>我们已经在之前章节的各种实例中定义过数字。下面是一个 C++ 中定义各种类型数字的综合实例：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-comment\">// 数字定义</span>\n   <span class=\"hljs-keyword\">short</span>  s;\n   <span class=\"hljs-keyword\">int</span>    i;\n   <span class=\"hljs-keyword\">long</span>   l;\n   <span class=\"hljs-keyword\">float</span>  f;\n   <span class=\"hljs-keyword\">double</span> d;\n   \n   <span class=\"hljs-comment\">// 数字赋值</span>\n   s = <span class=\"hljs-number\">10</span>;      \n   i = <span class=\"hljs-number\">1000</span>;    \n   l = <span class=\"hljs-number\">1000000</span>; \n   f = <span class=\"hljs-number\">230.47</span>;  \n   d = <span class=\"hljs-number\">30949.374</span>;\n   \n   <span class=\"hljs-comment\">// 数字输出</span>\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"short  s :\"</span> &lt;&lt; s &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"int    i :\"</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"long   l :\"</span> &lt;&lt; l &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"float  f :\"</span> &lt;&lt; f &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"double d :\"</span> &lt;&lt; d &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n \n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n<p></p>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>short  s :10\nint    i :1000\nlong   l :1000000\nfloat  f :230.47\ndouble d :30949.4\n</pre> \n <h2 class=\"tutheader\">C++ 数学运算</h2> \n<p>在 C++ 中，除了可以创建各种函数，还包含了各种有用的函数供您使用。这些函数写在标准 C 和 C++ 库中，叫做<strong>内置</strong>函数。您可以在程序中引用这些函数。</p>\n<p>C++ 内置了丰富的数学函数，可对各种数字进行运算。下表列出了 C++ 中一些有用的内置的数学函数。</p>\n<p>为了利用这些函数，您需要引用数学头文件 <strong>&lt;cmath&gt;</strong>。</p>\n<table class=\"reference notranslate \">\n    <tbody>\n        <tr>\n            <th width=\"5%\">序号</th>\n            <th>函数 &amp; 描述</th>\n        </tr>\n        <tr>\n            <td>1</td>\n            <td><strong>double cos(double);</strong>\n                <br>该函数返回弧度角（double 型）的余弦。</td>\n        </tr>\n        <tr>\n            <td>2</td>\n            <td><strong>double sin(double);</strong>\n                <br>该函数返回弧度角（double 型）的正弦。</td>\n        </tr>\n        <tr>\n            <td>3</td>\n            <td><strong>double tan(double);</strong>\n                <br>该函数返回弧度角（double 型）的正切。</td>\n        </tr>\n        <tr>\n            <td>4</td>\n            <td><strong>double log(double);</strong>\n                <br>该函数返回参数的自然对数。</td>\n        </tr>\n        <tr>\n            <td>5</td>\n            <td><strong>double pow(double, double);</strong>\n                <br>假设第一个参数为 x，第二个参数为 y，则该函数返回 x 的 y 次方。</td>\n        </tr>\n        <tr>\n            <td>6</td>\n            <td><strong>double hypot(double, double);</strong>\n                <br>该函数返回两个参数的平方总和的平方根，也就是说，参数为一个直角三角形的两个直角边，函数会返回斜边的长度。</td>\n        </tr>\n        <tr>\n            <td>7</td>\n            <td><strong>double sqrt(double);</strong>\n                <br>该函数返回参数的平方根。</td>\n        </tr>\n        <tr>\n            <td>8</td>\n            <td><strong>int abs(int);</strong>\n                <br>该函数返回整数的绝对值。</td>\n        </tr>\n        <tr>\n            <td>9</td>\n            <td><strong>double fabs(double);</strong>\n                <br>该函数返回任意一个十进制数的绝对值。</td>\n        </tr>\n        <tr>\n            <td>10</td>\n            <td><strong>double floor(double);</strong>\n                <br>该函数返回一个小于或等于传入参数的最大整数。</td>\n        </tr>\n    </tbody>\n</table>\n<p>下面是一个关于数学运算的简单实例：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-comment\">// 数字定义</span>\n   <span class=\"hljs-keyword\">short</span>  s = <span class=\"hljs-number\">10</span>;\n   <span class=\"hljs-keyword\">int</span>    i = <span class=\"hljs-number\">-1000</span>;\n   <span class=\"hljs-keyword\">long</span>   l = <span class=\"hljs-number\">100000</span>;\n   <span class=\"hljs-keyword\">float</span>  f = <span class=\"hljs-number\">230.47</span>;\n   <span class=\"hljs-keyword\">double</span> d = <span class=\"hljs-number\">200.374</span>;\n\n   <span class=\"hljs-comment\">// 数学运算</span>\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"sin(d) :\"</span> &lt;&lt; <span class=\"hljs-built_in\">sin</span>(d) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"abs(i)  :\"</span> &lt;&lt; <span class=\"hljs-built_in\">abs</span>(i) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"floor(d) :\"</span> &lt;&lt; <span class=\"hljs-built_in\">floor</span>(d) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"sqrt(f) :\"</span> &lt;&lt; <span class=\"hljs-built_in\">sqrt</span>(f) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"pow( d, 2) :\"</span> &lt;&lt; <span class=\"hljs-built_in\">pow</span>(d, <span class=\"hljs-number\">2</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n \n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n<p></p>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>sign(d) :-0.634939\nabs(i)  :1000\nfloor(d) :200\nsqrt(f) :15.1812\npow( d, 2 ) :40149.7\n</pre> \n <h2 class=\"tutheader\">C++ 随机数</h2> \n<p>在许多情况下，需要生成随机数。关于随机数生成器，有两个相关的函数。一个是 <strong>rand()</strong>，该函数只返回一个伪随机数。生成随机数之前必须先调用 <strong>srand()</strong> 函数。</p>\n<p>下面是一个关于生成随机数的简单实例。实例中使用了 <strong>time()</strong> 函数来获取系统时间的秒数，通过调用 rand() 函数来生成随机数：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;ctime&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstdlib&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-keyword\">int</span> i,j;\n \n   <span class=\"hljs-comment\">// 设置种子</span>\n   srand( (<span class=\"hljs-keyword\">unsigned</span>)time( <span class=\"hljs-literal\">NULL</span> ) );\n\n   <span class=\"hljs-comment\">/* 生成 10 个随机数 */</span>\n   <span class=\"hljs-keyword\">for</span>( i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++ )\n   {\n      <span class=\"hljs-comment\">// 生成实际的随机数</span>\n      j= rand();\n      <span class=\"hljs-built_in\">cout</span> &lt;&lt;<span class=\"hljs-string\">\"随机数： \"</span> &lt;&lt; j &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   }\n\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n} </code></pre>\n<p></p>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>随机数： 1748144778\n随机数： 630873888\n随机数： 2134540646\n随机数： 219404170\n随机数： 902129458\n随机数： 920445370\n随机数： 1319072661\n随机数： 257938873\n随机数： 1256201101\n随机数： 580322989\n</pre><p><br></p></div>\n<div style=\"clear:both\"></div>\n</div>',15,13,'C++教程','C++数字',NULL,NULL,NULL),(15,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">数组</span></h2> <div class=\"tutintro\"> <p>C++ 支持<strong>数组</strong>数据结构，它可以存储一个固定大小的相同类型元素的顺序集合。数组是用来存储一系列数据，但它往往被认为是一系列相同类型的变量。</p> <p>数组的声明并不是声明一个个单独的变量，比如 number0、number1、...、number99，而是声明一个数组变量，比如 numbers，然后使用 numbers[0]、numbers[1]、...、numbers[99] 来代表一个个单独的变量。数组中的特定元素可以通过索引访问。</p> <p>所有的数组都是由连续的内存位置组成。最低的地址对应第一个元素，最高的地址对应最后一个元素。</p> </div> <h2 class=\"tutheader\">声明数组</h2> <p>在 C++ 中要声明一个数组，需要指定元素的类型和元素的数量，如下所示：</p> <pre>type arrayName [ arraySize ];\n</pre> <p>这叫做一维数组。<strong>arraySize</strong> 必须是一个大于零的整数常量，<strong>type</strong> 可以是任意有效的 C++ 数据类型。例如，要声明一个类型为 double 的包含 10 个元素的数组 <strong>balance</strong>，声明语句如下：</p> <pre>double balance[10];\n</pre> <p>现在 <em>balance</em> 是一个可用的数组，可以容纳 10 个类型为 double 的数字。</p> <h2 class=\"tutheader\">初始化数组</h2> <p>在 C++ 中，您可以逐个初始化数组，也可以使用一个初始化语句，如下所示：</p> <pre>double balance[5] = {1000.0, 2.0, 3.4, 17.0, 50.0};\n</pre> <p>大括号 { } 之间的值的数目不能大于我们在数组声明时在方括号 [ ] 中指定的元素数目。</p> <p>如果您省略掉了数组的大小，数组的大小则为初始化时元素的个数。因此，如果：</p> <pre>double balance[] = {1000.0, 2.0, 3.4, 17.0, 50.0};\n</pre> <p>您将创建一个数组，它与前一个实例中所创建的数组是完全相同的。下面是一个为数组中某个元素赋值的实例：</p> <pre>balance[4] = 50.0;\n</pre> <p>上述的语句把数组中第五个元素的值赋为 50.0。所有的数组都是以 0 作为它们第一个元素的索引，也被称为基索引，数组的最后一个索引是数组的总大小减去 1。以下是上面所讨论的数组的的图形表示：</p>  <p><img src=\"https://atts.w3cschool.cn/attachments/uploads/2014/08/array_presentation.jpg\" alt=\"数组表示\"></p>  <h2 class=\"tutheader\">访问数组元素</h2> <p>数组元素可以通过数组名称加索引进行访问。元素的索引是放在方括号内，跟在数组名称的后边。例如：</p> <pre>double salary = balance[9];\n</pre> <p>上面的语句将把数组中第 10 个元素的值赋给 salary 变量。下面的实例使用了上述的三个概念，即，声明数组、数组赋值、访问数组：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n \n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iomanip&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-built_in\">std</span>::setw;\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-keyword\">int</span> n[ <span class=\"hljs-number\">10</span> ]; <span class=\"hljs-comment\">// n 是一个包含 10 个整数的数组</span>\n \n   <span class=\"hljs-comment\">// 初始化数组元素          </span>\n   <span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++ )\n   {\n      n[ i ] = i + <span class=\"hljs-number\">100</span>; <span class=\"hljs-comment\">// 设置元素 i 为 i + 100</span>\n   }\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Element\"</span> &lt;&lt; setw( <span class=\"hljs-number\">13</span> ) &lt;&lt; <span class=\"hljs-string\">\"Value\"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n \n   <span class=\"hljs-comment\">// 输出数组中每个元素的值                     </span>\n   <span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">10</span>; j++ )\n   {\n      <span class=\"hljs-built_in\">cout</span> &lt;&lt; setw( <span class=\"hljs-number\">7</span> )&lt;&lt; j &lt;&lt; setw( <span class=\"hljs-number\">13</span> ) &lt;&lt; n[ j ] &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   }\n \n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre><p></p> <p>上面的程序使用了 <strong>setw()</strong> 函数来格式化输出。当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>Element        Value\n      0          100\n      1          101\n      2          102\n      3          103\n      4          104\n      5          105\n      6          106\n      7          107\n      8          108\n      9          109\n</pre> <h2 class=\"tutheader\">C++ 中数组详解</h2> <p>在 C++ 中，数组是非常重要的，我们需要了解更多有关数组的细节。下面列出了 C++ 程序员必须清楚的一些与数组相关的重要概念：</p> <table class=\"reference notranslate \"> <tbody><tr><th style=\"width:30%\">概念</th><th>描述</th></tr> <tr><td><a href=\"cpp-multi-dimensional-arrays.html\" title=\"C++ 中的多维数组\">多维数组</a></td><td>C++ 支持多维数组。多维数组最简单的形式是二维数组。</td> </tr> <tr><td><a href=\"cpp-pointer-to-an-array.html\" title=\"C++ 中指向数组的指针\">指向数组的指针</a></td><td>您可以通过指定不带索引的数组名称来生成一个指向数组中第一个元素的指针。</td> </tr> <tr><td><a href=\"cpp-passing-arrays-to-functions.html\" title=\"C++ 中传递数组给函数作为参数\">传递数组给函数</a></td><td>您可以通过指定不带索引的数组名称来给函数传递一个指向数组的指针。</td> </tr> <tr><td><a href=\"cpp-return-arrays-from-function.html\" title=\"C++ 中从函数返回数组\">从函数返回数组</a></td><td>C++ 允许从函数返回数组。</td> </tr> </tbody></table><p><br></p></div>\n<div style=\"clear:both\"></div>\n</div>',16,14,'C++教程','C++数组',NULL,NULL,NULL),(16,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">字符串</span></h2> <div class=\"tutintro\"> <p>C++ 提供了以下两种类型的字符串表示形式：</p> <ul class=\"list\"> <li>C 风格字符串</li> <li>C++ 引入的 string 类类型</li> </ul> </div> <h2 class=\"tutheader\">C 风格字符串</h2> <p>C&nbsp;风格的字符串起源于 C&nbsp;语言，并在 C++ 中继续得到支持。字符串实际上是使用 <strong>null</strong> 字符 \'\' 终止的一维字符数组。因此，一个以 null 结尾的字符串，包含了组成字符串的字符。</p> <p>下面的声明和初始化创建了一个 \"Hello\" 字符串。由于在数组的末尾存储了空字符，所以字符数组的大小比单词 \"Hello\" 的字符数多一个。<span style=\"background-color: initial; color: rgb(51, 51, 51); font-family: Consolas, &quot;Courier New&quot;, Courier, monospace; white-space: pre-wrap;\">char greeting[6] = {\'H\', \'e\', \'l\', \'l\', \'o\', \'\'};</span></p> <p>依据数组初始化规则，您可以把上面的语句写成以下语句：</p><pre lang=\"cpp\" style=\"max-width: 100%;\"><code class=\"cpp hljs\"><span class=\"hljs-keyword\">char</span> greeting[] = <span class=\"hljs-string\">\"Hello\"</span>;</code></pre> <p>以下是 C/C++ 中定义的字符串的内存表示：</p>  <p><img src=\"https://atts.w3cschool.cn/attachments/uploads/2014/08/string_representation.jpg\" alt=\"C/C++ 中的字符串表示\"></p>  <p>其实，您不需要把 <em>null</em> 字符放在字符串常量的末尾。C++ 编译器会在初始化数组时，自动把 \'\' 放在字符串的末尾。让我们尝试输出上面的字符串</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-keyword\">char</span> greeting[<span class=\"hljs-number\">6</span>] = {<span class=\"hljs-string\">\'H\'</span>, <span class=\"hljs-string\">\'e\'</span>, <span class=\"hljs-string\">\'l\'</span>, <span class=\"hljs-string\">\'l\'</span>, <span class=\"hljs-string\">\'o\'</span>, <span class=\"hljs-string\">\'\\0\'</span>};\n\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Greeting message: \"</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; greeting &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n} </code></pre><p></p> <p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre lang=\"cpp\" style=\"max-width: 100%;\"><code class=\"cpp hljs\">Greeting message: Hello</code></pre> <p>C++ 中有大量的函数用来操作以 null 结尾的字符串：supports a wide range of functions that manipulate null-terminated strings:</p> <table class=\"reference notranslate \"> <tbody><tr><th style=\"width:5%\">序号</th><th>函数 &amp; 目的</th></tr> <tr><td>1</td><td><strong>strcpy(s1, s2);</strong><br>复制字符串 s2 到字符串 s1。</td></tr> <tr><td>2</td><td><strong>strcat(s1, s2);</strong><br>连接字符串 s2 到字符串 s1 的末尾。</td></tr> <tr><td>3</td><td><strong>strlen(s1);</strong><br>返回字符串 s1 的长度。</td></tr> <tr><td>4</td><td><strong>strcmp(s1, s2);</strong><br>如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回小于 0；如果 s1&gt;s2 则返回大于 0。</td></tr> <tr><td>5</td><td><strong>strchr(s1, ch);</strong><br>返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td></tr> <tr><td>6</td><td><strong>strstr(s1, s2);</strong><br>返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td></tr> </tbody></table> <p>下面的实例使用了上述的一些函数：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstring&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-keyword\">char</span> str1[<span class=\"hljs-number\">10</span>] = <span class=\"hljs-string\">\"Hello\"</span>;\n   <span class=\"hljs-keyword\">char</span> str2[<span class=\"hljs-number\">10</span>] = <span class=\"hljs-string\">\"World\"</span>;\n   <span class=\"hljs-keyword\">char</span> str3[<span class=\"hljs-number\">10</span>];\n   <span class=\"hljs-keyword\">int</span>  len ;\n\n   <span class=\"hljs-comment\">// 复制 str1 到 str3</span>\n   <span class=\"hljs-built_in\">strcpy</span>( str3, str1);\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"strcpy( str3, str1) : \"</span> &lt;&lt; str3 &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n   <span class=\"hljs-comment\">// 连接 str1 和 str2</span>\n   <span class=\"hljs-built_in\">strcat</span>( str1, str2);\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"strcat( str1, str2): \"</span> &lt;&lt; str1 &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n   <span class=\"hljs-comment\">// 连接后，str1 的总长度</span>\n   len = <span class=\"hljs-built_in\">strlen</span>(str1);\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"strlen(str1) : \"</span> &lt;&lt; len &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre><p></p> <p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre lang=\"cpp\" style=\"max-width: 100%;\"><code class=\"cpp hljs\"><span class=\"hljs-built_in\">strcpy</span>( str3, str1) : <span class=\"hljs-function\">Hello\n<span class=\"hljs-title\">strcat</span><span class=\"hljs-params\">( str1, str2)</span>: HelloWorld\n<span class=\"hljs-title\">strlen</span><span class=\"hljs-params\">(str1)</span> : 10</span></code></pre> <h2 class=\"tutheader\">C++ 中的 String 类</h2> <p>C++ 标准库提供了 <strong>string</strong> 类类型，支持上述所有的操作，另外还增加了其他更多的功能。我们将学习 C++ 标准库中的这个类，现在让我们先来看看下面这个实例：</p> <p>现在您可能还无法透彻地理解这个实例，因为到目前为止我们还没有讨论类和对象。所以现在您可以只是粗略地看下这个实例，等理解了面向对象的概念之后再回头来理解这个实例。</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-built_in\">string</span> str1 = <span class=\"hljs-string\">\"Hello\"</span>;\n   <span class=\"hljs-built_in\">string</span> str2 = <span class=\"hljs-string\">\"World\"</span>;\n   <span class=\"hljs-built_in\">string</span> str3;\n   <span class=\"hljs-keyword\">int</span>  len ;\n\n   <span class=\"hljs-comment\">// 复制 str1 到 str3</span>\n   str3 = str1;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"str3 : \"</span> &lt;&lt; str3 &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n   <span class=\"hljs-comment\">// 连接 str1 和 str2</span>\n   str3 = str1 + str2;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"str1 + str2 : \"</span> &lt;&lt; str3 &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n   <span class=\"hljs-comment\">// 连接后，str3 的总长度</span>\n   len = str3.size();\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"str3.size() :  \"</span> &lt;&lt; len &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n} </code></pre><p></p> <p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre lang=\"cpp\" style=\"max-width: 100%;\"><code class=\"cpp hljs\">str3 : Hello\nstr1 + str2 : HelloWorld\nstr3.size() :  <span class=\"hljs-number\">10</span></code></pre><p><br></p></div>\n<div style=\"clear:both\"></div>\n</div>',17,15,'C++教程','C++字符串',NULL,NULL,NULL),(17,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">指针</span></h2> \n<p>学习 C++ 的指针既简单又有趣。通过指针，可以简化一些 C++ 编程任务的执行，还有一些任务，如动态内存分配，没有指针是无法执行的。所以，想要成为一名优秀的 C++ 程序员，学习指针是很有必要的。</p>\n<p>正如您所知道的，每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号（&amp;）运算符访问的地址，它表示了在内存中的一个地址。请看下面的实例，它将输出定义的变量地址：</p>\n<p></p><pre>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main ()\n{\n   int  var1;\n   char var2[10];\n\n   cout &lt;&lt; \"var1 变量的地址： \";\n   cout &lt;&lt; &amp;var1 &lt;&lt; endl;\n\n   cout &lt;&lt; \"var2 变量的地址： \";\n   cout &lt;&lt; &amp;var2 &lt;&lt; endl;\n\n   return 0;\n}</pre>\n<p></p>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>var1 变量的地址： 0xbfebd5c0\nvar2 变量的地址： 0xbfebd5b6\n</pre> \n<p>通过上面的实例，我们了解了什么是内存地址以及如何访问它。接下来让我们看看什么是指针。</p>\n <h2 class=\"tutheader\">什么是指针？</h2> \n<p><strong>指针</strong>是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。指针变量声明的一般形式为：</p> <pre>type *var-name;\n</pre> \n<p>在这里，<strong>type</strong> 是指针的基类型，它必须是一个有效的 C++ 数据类型，<strong>var-name</strong> 是指针变量的名称。用来声明指针的星号 * 与乘法中使用的星号是相同的。但是，在这个语句中，星号是用来指定一个变量是指针。以下是有效的指针声明：</p> <pre>int    *ip;    /* 一个整型的指针 */\ndouble *dp;    /* 一个 double 型的指针 */\nfloat  *fp;    /* 一个浮点型的指针 */\nchar   *ch     /* 一个字符型的指针 */\n</pre> \n<p>所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数。不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。</p>\n <h2 class=\"tutheader\">C++ 中使用指针</h2> \n<p>使用指针时会频繁进行以下几个操作：定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值。这些是通过使用一元运算符 <strong>*</strong> 来返回位于操作数所指定地址的变量的值。下面的实例涉及到了这些操作：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-keyword\">int</span>  var = <span class=\"hljs-number\">20</span>;   <span class=\"hljs-comment\">// 实际变量的声明</span>\n   <span class=\"hljs-keyword\">int</span>  *ip;        <span class=\"hljs-comment\">// 指针变量的声明</span>\n\n   ip = &amp;var;       <span class=\"hljs-comment\">// 在指针变量中存储 var 的地址</span>\n\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Value of var variable: \"</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; var &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n   <span class=\"hljs-comment\">// 输出在指针变量中存储的地址</span>\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Address stored in ip variable: \"</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; ip &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n   <span class=\"hljs-comment\">// 访问指针中地址的值</span>\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Value of *ip variable: \"</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; *ip &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n<p></p>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>Value of var variable: 20\nAddress stored in ip variable: 0xbfc601ac\nValue of *ip variable: 20\n</pre> \n <h2 class=\"tutheader\">C++ 指针详解</h2> \n<p>在 C++ 中，有很多指针相关的概念，这些概念都很简单，但是都很重要。下面列出了 C++ 程序员必须清楚的一些与指针相关的重要概念：</p>\n<table class=\"reference notranslate \">\n    <tbody>\n        <tr>\n            <th style=\"width:35%\">概念</th>\n            <th>描述</th>\n        </tr>\n        <tr>\n            <td><a href=\"cpp-null-pointers.html\" title=\"C++ Null 指针\">C++ Null 指针</a>\n            </td>\n            <td>C++ 支持空指针。NULL 指针是一个定义在标准库中的值为零的常量。</td>\n        </tr>\n        <tr>\n            <td><a href=\"cpp-pointer-arithmetic.html\" title=\"C++ 指针的算术运算\">C++ 指针的算术运算</a>\n            </td>\n            <td>可以对指针进行四种算术运算：++、--、+、-</td>\n        </tr>\n        <tr>\n            <td><a href=\"cpp-pointers-vs-arrays.html\" title=\"C++ 指针 vs 数组\">C++ 指针 vs 数组</a>\n            </td>\n            <td>指针和数组之间有着密切的关系。</td>\n        </tr>\n        <tr>\n            <td><a href=\"cpp-array-of-pointers.html\" title=\"C++ 指针数组\">C++ 指针数组</a>\n            </td>\n            <td>可以定义用来存储指针的数组。</td>\n        </tr>\n        <tr>\n            <td><a href=\"cpp-pointer-to-pointer.html\" title=\"C++ 指向指针的指针\">C++ 指向指针的指针</a>\n            </td>\n            <td>C++ 允许指向指针的指针。</td>\n        </tr>\n        <tr>\n            <td><a href=\"cpp-passing-pointers-to-functions.html\" title=\"C++ 传递指针给函数\">C++ 传递指针给函数</a>\n            </td>\n            <td>通过引用或地址传递参数，使传递的参数在调用函数中被改变。</td>\n        </tr>\n        <tr>\n            <td><a href=\"cpp-return-pointer-from-functions.html\" title=\"C++ 从函数返回指针\">C++ 从函数返回指针</a>\n            </td>\n            <td>C++ 允许函数返回指针到局部变量、静态变量和动态内存分配。</td>\n        </tr>\n    </tbody>\n</table><p><br></p></div>\n<div style=\"clear:both\"></div>\n</div>',18,16,'C++教程','C++指针',NULL,NULL,NULL),(18,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">引用</span></h2> <div class=\"tutintro\"> <p>引用变量是一个别名，也就是说，它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。</p> </div> <h2 class=\"tutheader\">C++ 引用 vs 指针</h2> <p>引用很容易与指针混淆，它们之间有三个主要的不同：</p> <ul class=\"list\"> <li>不存在空引用。引用必须连接到一块合法的内存。</li> <li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li> <li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li> </ul> <h2 class=\"tutheader\">C++ 中创建引用</h2> <p>试想变量名称是变量附属在内存位置中的标签，您可以把引用当成是变量附属在内存位置中的第二个标签。因此，您可以通过原始变量名称或引用来访问变量的内容。例如：</p> <pre>int    i = 17;\n</pre> <p>我们可以为 i 声明引用变量，如下所示：</p> <pre>int&amp;    r = i;\n</pre> <p>在这些声明中，&amp; 读作<strong>引用</strong>。因此，第一个声明可以读作 \"r 是一个初始化为 i 的整型引用\"，第二个声明可以读作 \"s 是一个初始化为 d 的 double 型引用\"。下面的实例使用了 int 和 double 引用：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n \n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-comment\">// 声明简单的变量</span>\n   <span class=\"hljs-keyword\">int</span>    i;\n   <span class=\"hljs-keyword\">double</span> d;\n \n   <span class=\"hljs-comment\">// 声明引用变量</span>\n   <span class=\"hljs-keyword\">int</span>&amp;    r = i;\n   <span class=\"hljs-keyword\">double</span>&amp; s = d;\n   \n   i = <span class=\"hljs-number\">5</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Value of i : \"</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Value of i reference : \"</span> &lt;&lt; r  &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n \n   d = <span class=\"hljs-number\">11.7</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Value of d : \"</span> &lt;&lt; d &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Value of d reference : \"</span> &lt;&lt; s  &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   \n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre><p></p> <p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>Value of i : 5\nValue of i reference : 5\nValue of d : 11.7\nValue of d reference : 11.7\n</pre> <p>引用通常用于函数参数列表和函数返回值。下面列出了 C++ 程序员必须清楚的两个与 C++ 引用相关的重要概念：</p> <table class=\"reference notranslate  \"> <tbody><tr><th width=\"40%\">概念</th><th>描述</th></tr> <tr><td><a href=\"passing-parameters-by-references.html\" title=\"C++ 中通过引用传参\">把引用作为参数</a></td><td>C++ 支持把引用作为参数传给函数，这比传一般的参数更安全。</td> </tr> <tr><td><a href=\"returning-values-by-reference.html\" title=\"C++ 中通过引用返回值\">把引用作为返回值</a></td><td>可以从 C++ 函数中返回引用，就像返回其他数据类型一样。</td> </tr> </tbody></table><p><br></p></div>\n<div style=\"clear:both\"></div>\n</div>',19,17,'C++教程','C++引用',NULL,NULL,NULL),(19,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">日期 &amp; 时间</span></h2> \n<p>C++ 标准库没有提供所谓的日期类型。C++ 继承了 C 语言用于日期和时间操作的结构和函数。为了使用日期和时间相关的函数和结构，需要在 C++ 程序中引用 &lt;ctime&gt; 头文件。</p>\n<p>有四个与时间相关的类型：<strong>clock_t、time_t、size_t</strong> 和 <strong>tm</strong>。类型 clock_t、size_t 和 time_t 能够把系统时间和日期表示为某种整数。</p>\n<p>结构类型 <strong>tm</strong> 把日期和时间以 C 结构的形式保存，tm 结构的定义如下：</p> <pre>struct tm {\n  int tm_sec;   // 秒，正常范围从 0 到 59，但允许至 61\n  int tm_min;   // 分，范围从 0 到 59\n  int tm_hour;  // 小时，范围从 0 到 23\n  int tm_mday;  // 一月中的第几天，范围从 1 到 31\n  int tm_mon;   // 月，范围从 0 到 11\n  int tm_year;  // 自 1900 年起的年数\n  int tm_wday;  // 一周中的第几天，范围从 0 到 6，从星期日算起\n  int tm_yday;  // 一年中的第几天，范围从 0 到 365，从 1 月 1 日算起\n  int tm_isdst; // 夏令时\n}\n</pre> \n<p>下面是 C/C++ 中关于日期和时间的重要函数。所有这些函数都是 C/C++ 标准库的组成部分，您可以在 C++ 标准库中查看一下各个函数的细节。</p>\n<table class=\"reference notranslate   \">\n    <tbody>\n        <tr>\n            <th width=\"5%\">序号</th>\n            <th>函数 &amp; 描述</th>\n        </tr>\n        <tr>\n            <td>1</td>\n            <td><a href=\"/c/c-function-time.html\"><strong>time_t time(time_t *time);</strong></a>\n                <br>该函数返回系统的当前日历时间，自 1970 年 1 月 1 日以来经过的秒数。如果系统没有时间，则返回 .1。</td>\n        </tr>\n        <tr>\n            <td>2</td>\n            <td><a href=\"/c/c-function-ctime.html\"><strong>char *ctime(const time_t *time);</strong></a>\n                <br>该返回一个表示当地时间的字符串指针，字符串形式 <em>day month year hours:minutes:seconds year\\n</em>。</td>\n        </tr>\n        <tr>\n            <td>3</td>\n            <td><a href=\"/c/c-function-localtime.html\"><strong>struct tm *localtime(const time_t *time);</strong></a>\n                <br>该函数返回一个指向表示本地时间的 <strong>tm</strong> 结构的指针。</td>\n        </tr>\n        <tr>\n            <td>4</td>\n            <td><a href=\"/c/c-function-clock.html\"><strong>clock_t clock(void);</strong></a>\n                <br>该函数返回程序执行起（一般为程序的开头），处理器时钟所使用的时间。如果时间不可用，则返回 .1。</td>\n        </tr>\n        <tr>\n            <td>5</td>\n            <td><a href=\"/c/c-function-asctime.html\"><strong>char * asctime ( const struct tm * time );</strong></a>\n                <br>该函数返回一个指向字符串的指针，字符串包含了 time 所指向结构中存储的信息，返回形式为：day month date hours:minutes:seconds year\\n。</td>\n        </tr>\n        <tr>\n            <td>6</td>\n            <td><a href=\"/c/c-function-gmtime.html\"><strong>struct tm *gmtime(const time_t *time);</strong></a>\n                <br>该函数返回一个指向 time 的指针，time 为 tm 结构，用协调世界时（UTC）也被称为格林尼治标准时间（GMT）表示。</td>\n        </tr>\n        <tr>\n            <td>7</td>\n            <td><a href=\"/c/c-function-mktime.html\"><strong>time_t mktime(struct tm *time);</strong></a>\n                <br>该函数返回日历时间，相当于 time 所指向结构中存储的时间。</td>\n        </tr>\n        <tr>\n            <td>8</td>\n            <td><a href=\"/c/c-function-difftime.html\"><strong>double difftime ( time_t time2, time_t time1 );</strong></a>\n                <br>该函数返回 time1 和 time2 之间相差的秒数。</td>\n        </tr>\n        <tr>\n            <td>9</td>\n            <td><a href=\"/c/c-function-strftime.html\"><strong>size_t strftime();</strong></a>\n                <br>该函数可用于格式化日期和时间为指定的格式。</td>\n        </tr>\n    </tbody>\n</table>\n <h2 class=\"tutheader\">当前日期和时间</h2> \n<p>下面的实例获取当前系统的日期和时间，包括本地时间和协调世界时（UTC）。</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;ctime&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">( )</span>\n</span>{\n   <span class=\"hljs-comment\">// 基于当前系统的当前日期/时间</span>\n   <span class=\"hljs-keyword\">time_t</span> now = time(<span class=\"hljs-number\">0</span>);\n   \n   <span class=\"hljs-comment\">// 把 now 转换为字符串形式</span>\n   <span class=\"hljs-keyword\">char</span>* dt = ctime(&amp;now);\n\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"本地日期和时间：\"</span> &lt;&lt; dt &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n   <span class=\"hljs-comment\">// 把 now 转换为 tm 结构</span>\n   tm *gmtm = gmtime(&amp;now);\n   dt = asctime(gmtm);\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"UTC 日期和时间：\"</span>&lt;&lt; dt &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n}</code></pre>\n\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>本地日期和时间：Sat Jan  8 20:07:41 2011\n\nUTC 日期和时间：Sun Jan  9 03:07:41 2011\n</pre> \n <h2 class=\"tutheader\">使用结构 tm 格式化时间</h2> \n<p><strong>tm</strong> 结构在 C/C++ 中处理日期和时间相关的操作时，显得尤为重要。tm 结构以 C 结构的形式保存日期和时间。大多数与时间相关的函数都使用了 tm 结构。下面的实例使用了 tm 结构和各种与日期和时间相关的函数。</p>\n<p>在练习使用结构之前，需要对 C 结构有基本的了解，并懂得如何使用箭头 -&gt; 运算符来访问结构成员。</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;ctime&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">( )</span>\n</span>{\n   <span class=\"hljs-comment\">// 基于当前系统的当前日期/时间</span>\n   <span class=\"hljs-keyword\">time_t</span> now = time(<span class=\"hljs-number\">0</span>);\n\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"1970年1月1日到目前经过的秒数:\"</span> &lt;&lt; now &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n   tm *ltm = localtime(&amp;now);\n\n   <span class=\"hljs-comment\">// 输出 tm 结构的各个组成部分</span>\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"年: \"</span>&lt;&lt; <span class=\"hljs-number\">1900</span> + ltm-&gt;tm_year &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"月: \"</span>&lt;&lt; <span class=\"hljs-number\">1</span> + ltm-&gt;tm_mon&lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"日: \"</span>&lt;&lt;  ltm-&gt;tm_mday &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"时间: \"</span>&lt;&lt; <span class=\"hljs-number\">1</span> + ltm-&gt;tm_hour &lt;&lt; <span class=\"hljs-string\">\":\"</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-number\">1</span> + ltm-&gt;tm_min &lt;&lt; <span class=\"hljs-string\">\":\"</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-number\">1</span> + ltm-&gt;tm_sec &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n} </code></pre>\n\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>1970年1月1日到目前经过的秒数:1524456057\n年: 2018\n月: 4\n日: 23\n时间: 5:1:58\n</pre><p><br></p></div>\n<div style=\"clear:both\"></div>\n</div>',20,18,'C++教程','C++日期&时间',NULL,NULL,NULL),(20,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">基本的输入输出</span></h2> <div class=\"tutintro\"> <p>C++ 标准库提供了一组丰富的输入/输出功能，我们将在后续的章节进行介绍。本章将讨论 C++ 编程中最基本和最常见的 I/O 操作。</p> <p>C++ 的 I/O 发生在流中，流是字节序列。如果字节流是从设备（如键盘、磁盘驱动器、网络连接等）流向内存，这叫做<b>输入操作</b>。如果字节流是从内存流向设备（如显示屏、打印机、磁盘驱动器、网络连接等），这叫做<b>输出操作</b>。</p> </div> <h2 class=\"tutheader\">I/O 库头文件</h2> <p>下列的头文件在 C++ 编程中很重要。</p> <table class=\"reference notranslate\"> <tbody><tr><th width=\"20%\">头文件</th><th>函数和描述</th></tr> <tr><td>&lt;iostream&gt;</td><td>该文件定义了 <b>cin、cout、cerr</b> 和 <b>clog</b> 对象，分别对应于标准输入流、标准输出流、非缓冲标准错误流和缓冲标准错误流。</td> </tr> <tr><td>&lt;iomanip&gt;</td><td>该文件通过所谓的参数化的流操纵器（比如 <b>setw</b> 和 <b>setprecision</b>），来声明对执行标准化 I/O 有用的服务。</td> </tr> <tr><td>&lt;fstream&gt;</td><td>该文件为用户控制的文件处理声明服务。我们将在文件和流的相关章节讨论它的细节。</td> </tr> </tbody></table> <h2 class=\"tutheader\">标准输出流（cout）</h2> <p>预定义的对象 <b>cout</b> 是 <b>ostream</b> 类的一个实例。cout 对象\"连接\"到标准输出设备，通常是显示屏。<b>cout</b> 是与流插入运算符 &lt;&lt; 结合使用的，如下所示：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n \n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">( )</span>\n</span>{\n   <span class=\"hljs-keyword\">char</span> str[] = <span class=\"hljs-string\">\"Hello C++\"</span>;\n \n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Value of str is : \"</span> &lt;&lt; str &lt;&lt; <span class=\"hljs-built_in\">endl</span>; \n} </code></pre> <p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>Value of str is : Hello C++\n</pre> <p>C++ 编译器根据要输出变量的数据类型，选择合适的流插入运算符来显示值。&lt;&lt; 运算符被重载来输出内置类型（整型、浮点型、double 型、字符串和指针）的数据项。</p> <p>流插入运算符 &lt;&lt; 在一个语句中可以多次使用，如上面实例中所示，<b>endl</b> 用于在行末添加一个换行符。</p> <h2 class=\"tutheader\">标准输入流（cin）</h2> <p>预定义的对象 <b>cin</b> 是 <b>istream</b> 类的一个实例。cin 对象附属到标准输入设备，通常是键盘。<b>cin</b> 是与流提取运算符 &gt;&gt; 结合使用的，如下所示：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n \n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">( )</span>\n</span>{\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">char</span> name[<span class=\"hljs-number\">50</span>];\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"请输入您的名称： \"</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">cin</span> &gt;&gt; name;\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"您的名称是： \"</span> &lt;&lt; name &lt;&lt; <span class=\"hljs-built_in\">endl</span>;   \n} </code></pre> <p>当上面的代码被编译和执行时，它会提示用户输入名称。当用户输入一个值，并按回车键，就会看到下列结果：</p> <pre>请输入您的名称： cplusplus\n您的名称是： cplusplus\n</pre> <p>C++ 编译器根据要输入值的数据类型，选择合适的流提取运算符来提取值，并把它存储在给定的变量中。</p> <p>流提取运算符 &gt;&gt; 在一个语句中可以多次使用，如果要求输入多个数据，可以使用如下语句：</p> <pre lang=\"cpp\"><code class=\"cpp hljs\"><span class=\"hljs-built_in\">cin</span> &gt;&gt; name &gt;&gt; age;\n</code></pre> <p>这相当于下面两个语句：</p> <pre lang=\"cpp\"><code class=\"cpp hljs\"><span class=\"hljs-built_in\">cin</span> &gt;&gt; name;\n<span class=\"hljs-built_in\">cin</span> &gt;&gt; age;\n</code></pre> <h2 class=\"tutheader\">标准错误流（cerr）</h2> <p>预定义的对象 <b>cerr</b> 是 <b>ostream</b> 类的一个实例。cerr 对象附属到标准错误设备，通常也是显示屏，但是 <b>cerr</b> 对象是非缓冲的，且每个流插入到 cerr 都会立即输出。</p> <p><b>cerr</b> 也是与流插入运算符 &lt;&lt; 结合使用的，如下所示：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n \n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">( )</span>\n</span>{\n   <span class=\"hljs-keyword\">char</span> str[] = <span class=\"hljs-string\">\"Unable to read....\"</span>;\n \n   <span class=\"hljs-built_in\">cerr</span> &lt;&lt; <span class=\"hljs-string\">\"Error message : \"</span> &lt;&lt; str &lt;&lt; <span class=\"hljs-built_in\">endl</span>; \n} </code></pre> <p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>Error message : Unable to read....\n</pre> <h2 class=\"tutheader\">标准日志流（clog）</h2> <p>预定义的对象 <b>clog</b> 是 <b>ostream</b> 类的一个实例。clog 对象附属到标准错误设备，通常也是显示屏，但是 <b>clog</b> 对象是缓冲的。这意味着每个流插入到 clog 都会先存储在缓冲区中，直到缓冲填满或者缓冲区刷新时才会输出。</p> <p><b>clog</b> 也是与流插入运算符 &lt;&lt; 结合使用的，如下所示：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n \n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">( )</span>\n</span>{\n   <span class=\"hljs-keyword\">char</span> str[] = <span class=\"hljs-string\">\"Unable to read....\"</span>;\n \n   <span class=\"hljs-built_in\">clog</span> &lt;&lt; <span class=\"hljs-string\">\"Error message : \"</span> &lt;&lt; str &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n} </code></pre> <p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>Error message : Unable to read....\n</pre> <p>通过这些小实例，我们无法区分 cout、cerr 和 clog 的差异，但在编写和执行大型程序时，它们之间的差异就变得非常明显。所以良好的编程实践告诉我们，使用 cerr 流来显示错误消息，而其他的日志消息则使用 clog 流来输出。</p> <br><p><br></p></div>\n<div style=\"clear:both\"></div>\n</div>',21,19,'C++教程','C++基本的输入输出',NULL,NULL,NULL),(21,'<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>C++ <span class=\"color_h1\">数据结构</span></h2> \n<div class=\"tutintro\">\n    <p>C/C++ 数组允许定义可存储相同类型数据项的变量，但是<strong>结构</strong>是 C++ 中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。</p>\n    <p>结构用于表示一条记录，假设您想要跟踪图书馆中书本的动态，您可能需要跟踪每本书的下列属性：</p>\n    <ul class=\"list\">\n        <li>Title</li>\n        <li>Author</li>\n        <li>Subject</li>\n        <li>Book ID</li>\n    </ul>\n</div>\n <h2 class=\"tutheader\">定义结构</h2> \n<p>为了定义结构，您必须使用 <strong>struct</strong> 语句。struct 语句定义了一个包含多个成员的新的数据类型，struct 语句的格式如下：</p><pre lang=\"cpp\" style=\"max-width: 100%;\"><code class=\"cpp hljs\"><span class=\"hljs-keyword\">struct</span> [structure tag]\n{\n   member definition;\n   member definition;\n   ...\n   member definition;\n} [one or more structure variables];  </code></pre> \n<p><strong>structure tag</strong> 是可选的，每个 member definition 是标准的变量定义，比如 int i; 或者 float f; 或者其他有效的变量定义。在结构定义的末尾，最后一个分号之前，您可以指定一个或多个结构变量，这是可选的。下面是声明 Book 结构的方式：</p><pre lang=\"cpp\" style=\"max-width: 100%;\"><code class=\"cpp hljs\"><span class=\"hljs-keyword\">struct</span> Books\n{\n   <span class=\"hljs-keyword\">char</span>  title[<span class=\"hljs-number\">50</span>];\n   <span class=\"hljs-keyword\">char</span>  author[<span class=\"hljs-number\">50</span>];\n   <span class=\"hljs-keyword\">char</span>  subject[<span class=\"hljs-number\">100</span>];\n   <span class=\"hljs-keyword\">int</span>   book_id;\n</code></pre><p><span style=\"background-color: initial; color: rgb(51, 51, 51); font-family: Consolas, &quot;Courier New&quot;, Courier, monospace; white-space: pre-wrap;\">}book; </span><span style=\"background-color: rgb(239, 239, 239); color: rgb(51, 51, 51); font-family: Consolas, &quot;Courier New&quot;, Courier, monospace; white-space: pre-wrap;\"> </span></p> \n <h2 class=\"tutheader\">访问结构成员</h2> \n<p>为了访问结构的成员，我们使用<strong>成员访问运算符（.）</strong>。成员访问运算符是结构变量名称和我们要访问的结构成员之间的一个句号。您可以使用 <strong>struct</strong> 关键字来定义结构类型的变量。下面的实例演示了结构的用法：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstring&gt;</span></span>\n \n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n \n<span class=\"hljs-keyword\">struct</span> Books\n{\n   <span class=\"hljs-keyword\">char</span>  title[<span class=\"hljs-number\">50</span>];\n   <span class=\"hljs-keyword\">char</span>  author[<span class=\"hljs-number\">50</span>];\n   <span class=\"hljs-keyword\">char</span>  subject[<span class=\"hljs-number\">100</span>];\n   <span class=\"hljs-keyword\">int</span>   book_id;\n};\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">( )</span>\n</span>{\n   <span class=\"hljs-keyword\">struct</span> Books Book1;        <span class=\"hljs-comment\">// 声明 Book1，类型为 Book</span>\n   <span class=\"hljs-keyword\">struct</span> Books Book2;        <span class=\"hljs-comment\">// 声明 Book2，类型为 Book</span>\n \n   <span class=\"hljs-comment\">// Book1 详述</span>\n   <span class=\"hljs-built_in\">strcpy</span>( Book1.title, <span class=\"hljs-string\">\"Learn C++ Programming\"</span>);\n   <span class=\"hljs-built_in\">strcpy</span>( Book1.author, <span class=\"hljs-string\">\"Chand Miyan\"</span>); \n   <span class=\"hljs-built_in\">strcpy</span>( Book1.subject, <span class=\"hljs-string\">\"C++ Programming\"</span>);\n   Book1.book_id = <span class=\"hljs-number\">6495407</span>;\n\n   <span class=\"hljs-comment\">// Book2 详述</span>\n   <span class=\"hljs-built_in\">strcpy</span>( Book2.title, <span class=\"hljs-string\">\"Telecom Billing\"</span>);\n   <span class=\"hljs-built_in\">strcpy</span>( Book2.author, <span class=\"hljs-string\">\"Yakit Singha\"</span>);\n   <span class=\"hljs-built_in\">strcpy</span>( Book2.subject, <span class=\"hljs-string\">\"Telecom\"</span>);\n   Book2.book_id = <span class=\"hljs-number\">6495700</span>;\n \n   <span class=\"hljs-comment\">// 输出 Book1 信息</span>\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Book 1 title : \"</span> &lt;&lt; Book1.title &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Book 1 author : \"</span> &lt;&lt; Book1.author &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Book 1 subject : \"</span> &lt;&lt; Book1.subject &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Book 1 id : \"</span> &lt;&lt; Book1.book_id &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n\n   <span class=\"hljs-comment\">// 输出 Book2 信息</span>\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Book 2 title : \"</span> &lt;&lt; Book2.title &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Book 2 author : \"</span> &lt;&lt; Book2.author &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Book 2 subject : \"</span> &lt;&lt; Book2.subject &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Book 2 id : \"</span> &lt;&lt; Book2.book_id &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n<p></p>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>Book 1 title : Learn C++ Programming\nBook 1 author : Chand Miyan\nBook 1 subject : C++ Programming\nBook 1 id : 6495407\nBook 2 title : Telecom Billing\nBook 2 author : Yakit Singha\nBook 2 subject : Telecom\nBook 2 id : 6495700\n</pre> \n <h2 class=\"tutheader\">结构作为函数参数</h2> \n<p>您可以把结构作为函数参数，传参方式与其他类型的变量或指针类似。您可以使用上面实例中的方式来访问结构变量：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstring&gt;</span></span>\n \n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printBook</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">struct</span> Books book )</span></span>;\n\n<span class=\"hljs-keyword\">struct</span> Books\n{\n   <span class=\"hljs-keyword\">char</span>  title[<span class=\"hljs-number\">50</span>];\n   <span class=\"hljs-keyword\">char</span>  author[<span class=\"hljs-number\">50</span>];\n   <span class=\"hljs-keyword\">char</span>  subject[<span class=\"hljs-number\">100</span>];\n   <span class=\"hljs-keyword\">int</span>   book_id;\n};\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">( )</span>\n</span>{\n   <span class=\"hljs-keyword\">struct</span> Books Book1;        <span class=\"hljs-comment\">// 声明 Book1，类型为 Book</span>\n   <span class=\"hljs-keyword\">struct</span> Books Book2;        <span class=\"hljs-comment\">// 声明 Book2，类型为 Book</span>\n \n   <span class=\"hljs-comment\">// Book1 详述</span>\n   <span class=\"hljs-built_in\">strcpy</span>( Book1.title, <span class=\"hljs-string\">\"Learn C++ Programming\"</span>);\n   <span class=\"hljs-built_in\">strcpy</span>( Book1.author, <span class=\"hljs-string\">\"Chand Miyan\"</span>); \n   <span class=\"hljs-built_in\">strcpy</span>( Book1.subject, <span class=\"hljs-string\">\"C++ Programming\"</span>);\n   Book1.book_id = <span class=\"hljs-number\">6495407</span>;\n\n   <span class=\"hljs-comment\">// Book2 详述</span>\n   <span class=\"hljs-built_in\">strcpy</span>( Book2.title, <span class=\"hljs-string\">\"Telecom Billing\"</span>);\n   <span class=\"hljs-built_in\">strcpy</span>( Book2.author, <span class=\"hljs-string\">\"Yakit Singha\"</span>);\n   <span class=\"hljs-built_in\">strcpy</span>( Book2.subject, <span class=\"hljs-string\">\"Telecom\"</span>);\n   Book2.book_id = <span class=\"hljs-number\">6495700</span>;\n \n   <span class=\"hljs-comment\">// 输出 Book1 信息</span>\n   printBook( Book1 );\n\n   <span class=\"hljs-comment\">// 输出 Book2 信息</span>\n   printBook( Book2 );\n\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printBook</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">struct</span> Books book )</span>\n</span>{\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Book title : \"</span> &lt;&lt; book.title &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Book author : \"</span> &lt;&lt; book.author &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Book subject : \"</span> &lt;&lt; book.subject &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Book id : \"</span> &lt;&lt; book.book_id &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n}</code></pre>\n<p></p>\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>Book title : Learn C++ Programming\nBook author : Chand Miyan\nBook subject : C++ Programming\nBook id : 6495407\nBook title : Telecom Billing\nBook author : Yakit Singha\nBook subject : Telecom\nBook id : 6495700\n</pre> \n <h2 class=\"tutheader\">指向结构的指针</h2> \n<p>您可以定义指向结构的指针，方式与定义指向其他类型变量的指针相似，如下所示：</p> <pre lang=\"cpp\"><code class=\"cpp hljs\"><span class=\"hljs-keyword\">struct</span> Books *struct_pointer;\n</code></pre> \n<p>现在，您可以在上述定义的指针变量中存储结构变量的地址。为了查找结构变量的地址，请把 &amp; 运算符放在结构名称的前面，如下所示：</p> <pre lang=\"cpp\"><code class=\"cpp hljs\">struct_pointer = &amp;Book1;\n</code></pre> \n<p>为了使用指向该结构的指针访问结构的成员，您必须使用 -&gt; 运算符，如下所示：</p> <pre lang=\"cpp\"><code class=\"cpp hljs\">struct_pointer-&gt;title;\n</code></pre> \n<p>让我们使用结构指针来重写上面的实例，这将有助于您理解结构指针的概念：</p>\n<p><span style=\"font-family: Consolas, \'Courier New\', Courier, monospace; line-height: 1.7; white-space: pre-wrap; background-color: rgb(239, 239, 239);\"></span>\n</p><pre lang=\"cpp\"><code class=\"cpp hljs\"><span>struct_pointer</span><span>-&gt;</span><span>title</span><span>;</span></code></pre>\n<p></p>\n<p>让我们使用结构指针来重写上面的实例，这将有助于您理解结构指针的概念：</p><pre lang=\"cpp\" style=\"max-width: 100%;\" showdemo=\"1\"><code class=\"cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstring&gt;</span></span>\n \n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printBook</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">struct</span> Books *book )</span></span>;\n\n<span class=\"hljs-keyword\">struct</span> Books\n{\n   <span class=\"hljs-keyword\">char</span>  title[<span class=\"hljs-number\">50</span>];\n   <span class=\"hljs-keyword\">char</span>  author[<span class=\"hljs-number\">50</span>];\n   <span class=\"hljs-keyword\">char</span>  subject[<span class=\"hljs-number\">100</span>];\n   <span class=\"hljs-keyword\">int</span>   book_id;\n};\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">( )</span>\n</span>{\n   <span class=\"hljs-keyword\">struct</span> Books Book1;        <span class=\"hljs-comment\">// 声明 Book1，类型为 Book</span>\n   <span class=\"hljs-keyword\">struct</span> Books Book2;        <span class=\"hljs-comment\">// 声明 Book2，类型为 Book */</span>\n \n   <span class=\"hljs-comment\">// Book1 详述</span>\n   <span class=\"hljs-built_in\">strcpy</span>( Book1.title, <span class=\"hljs-string\">\"Learn C++ Programming\"</span>);\n   <span class=\"hljs-built_in\">strcpy</span>( Book1.author, <span class=\"hljs-string\">\"Chand Miyan\"</span>); \n   <span class=\"hljs-built_in\">strcpy</span>( Book1.subject, <span class=\"hljs-string\">\"C++ Programming\"</span>);\n   Book1.book_id = <span class=\"hljs-number\">6495407</span>;\n\n   <span class=\"hljs-comment\">// Book2 详述</span>\n   <span class=\"hljs-built_in\">strcpy</span>( Book2.title, <span class=\"hljs-string\">\"Telecom Billing\"</span>);\n   <span class=\"hljs-built_in\">strcpy</span>( Book2.author, <span class=\"hljs-string\">\"Yakit Singha\"</span>);\n   <span class=\"hljs-built_in\">strcpy</span>( Book2.subject, <span class=\"hljs-string\">\"Telecom\"</span>);\n   Book2.book_id = <span class=\"hljs-number\">6495700</span>;\n \n   <span class=\"hljs-comment\">// 通过传 Book1 的地址来输出 Book1 信息</span>\n   printBook( &amp;Book1 );\n\n   <span class=\"hljs-comment\">// 通过传 Book2 的地址来输出 Book2 信息</span>\n   printBook( &amp;Book2 );\n\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n<span class=\"hljs-comment\">// 该函数以结构指针作为参数</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printBook</span><span class=\"hljs-params\">( <span class=\"hljs-keyword\">struct</span> Books *book )</span>\n</span>{\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Book title : \"</span> &lt;&lt; book-&gt;title &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Book author : \"</span> &lt;&lt; book-&gt;author &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Book subject : \"</span> &lt;&lt; book-&gt;subject &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Book id : \"</span> &lt;&lt; book-&gt;book_id &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n} </code></pre> \n<p>当上面的代码被编译和执行时，它会产生下列结果：</p> <pre>Book title : Learn C++ Programming\nBook author : Chand Miyan\nBook subject : C++ Programming\nBook id : 6495407\nBook title : Telecom Billing\nBook author : Yakit Singha\nBook subject : Telecom\nBook id : 6495700\n</pre> \n <h2 class=\"tutheader\">typedef 关键字</h2> \n<p>下面是一种更简单的定义结构的方式，您可以为创建的类型取一个\"别名\"。例如：</p><pre lang=\"cpp\" style=\"max-width: 100%;\"><code class=\"cpp hljs\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">struct</span>\n{\n   <span class=\"hljs-keyword\">char</span>  title[<span class=\"hljs-number\">50</span>];\n   <span class=\"hljs-keyword\">char</span>  author[<span class=\"hljs-number\">50</span>];\n   <span class=\"hljs-keyword\">char</span>  subject[<span class=\"hljs-number\">100</span>];\n   <span class=\"hljs-keyword\">int</span>   book_id;\n}Books;</code></pre> \n<p>现在，您可以直接使用 <em>Books</em> 来定义 <em>Books</em> 类型的变量，而不需要使用 struct 关键字。下面是实例：</p> <pre>Books Book1, Book2;\n</pre> \n<p>您可以使用 <strong>typedef</strong> 关键字来定义非结构类型，如下所示：</p> <pre>typedef long int *pint32;\n \npint32 x, y, z;\n</pre> \n<p>x, y 和 z 都是指向长整型 long int 的指针。</p><p><br></p></div>\n<div style=\"clear:both\"></div>\n</div>',22,20,'C++教程','C++数据结构',NULL,NULL,NULL);
/*!40000 ALTER TABLE `course` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hibernate_sequence`
--

DROP TABLE IF EXISTS `hibernate_sequence`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `hibernate_sequence` (
  `next_val` bigint(20) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `hibernate_sequence`
--

LOCK TABLES `hibernate_sequence` WRITE;
/*!40000 ALTER TABLE `hibernate_sequence` DISABLE KEYS */;
INSERT INTO `hibernate_sequence` VALUES (1);
/*!40000 ALTER TABLE `hibernate_sequence` ENABLE KEYS */;
UNLOCK TABLES;

--
=======
>>>>>>> 11c2e33... 0816
-- Table structure for table `persistent_logins`
--

DROP TABLE IF EXISTS `persistent_logins`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `persistent_logins` (
  `username` varchar(64) NOT NULL,
  `series` varchar(64) NOT NULL,
  `token` varchar(64) NOT NULL,
  `last_used` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`series`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `persistent_logins`
--

LOCK TABLES `persistent_logins` WRITE;
/*!40000 ALTER TABLE `persistent_logins` DISABLE KEYS */;
/*!40000 ALTER TABLE `persistent_logins` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `problem`
--

DROP TABLE IF EXISTS `problem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `problem` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(40) DEFAULT NULL COMMENT '题目标题',
  `content` varchar(3000) DEFAULT NULL COMMENT '详细描述',
  `html_content` text COMMENT 'html题目描述',
  `input_desc` varchar(1000) DEFAULT NULL COMMENT '输入描述',
  `output_desc` varchar(1000) DEFAULT NULL COMMENT '输出描述',
  `testcase_input` varchar(1000) DEFAULT NULL COMMENT '样例输入',
  `testcase_output` varchar(1000) DEFAULT NULL COMMENT '样例输出',
  `level` int(11) DEFAULT '1' COMMENT '难度　１简单２中等３困难４专家',
  `submit_count` int(11) DEFAULT '0' COMMENT '用户提交数',
  `ac_count` int(11) DEFAULT '0' COMMENT '用户通过数',
  `tle_count` int(11) DEFAULT '0' COMMENT '超时数',
  `pe_count` int(11) DEFAULT '0' COMMENT '格式错误数',
  `me_count` int(11) DEFAULT '0' COMMENT '内存超限数',
  `re_count` int(11) DEFAULT '0' COMMENT '运行错误数',
  `ce_count` int(11) DEFAULT '0' COMMENT '编译错误数',
  `wa_count` int(11) DEFAULT '0' COMMENT '答案错误数',
  `time` bigint(20) DEFAULT '10000',
  `memory` bigint(20) DEFAULT '262144',
  `flag` int(11) DEFAULT '0' COMMENT '0 公开　１管理员才能看',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
<<<<<<< HEAD
) ENGINE=InnoDB AUTO_INCREMENT=1043 DEFAULT CHARSET=utf8;
=======
) ENGINE=InnoDB AUTO_INCREMENT=1044 DEFAULT CHARSET=utf8;
>>>>>>> 11c2e33... 0816
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `problem`
--

LOCK TABLES `problem` WRITE;
/*!40000 ALTER TABLE `problem` DISABLE KEYS */;
<<<<<<< HEAD
INSERT INTO `problem` VALUES (1000,'A+B Problem','输入两个整数a,b，输出它们的和(|a|,|b|<=10^9)。\n\n注意\n\npascal使用integer会爆掉哦！\n有负数哦！\nc/c++的main函数必须是int类型，而且最后要return 0。这不仅对洛谷其他题目有效，而且也是noip/noi比赛的要求！\n好吧，同志们，我们就从这一题开始，向着大牛的路进发。\n\n任何一个伟大的思想，都有一个微不足道的开始。','<p>输入两个整数a,b，输出它们的和(|a|,|b|&lt;=10^9)。</p>\n<p>注意</p>\n<p>pascal使用integer会爆掉哦！<br>有负数哦！<br>c/c++的main函数必须是int类型，而且最后要return 0。这不仅对洛谷其他题目有效，而且也是noip/noi比赛的要求！<br>好吧，同志们，我们就从这一题开始，向着大牛的路进发。\n<p>任何一个伟大的思想，都有一个微不足道的开始。</p>\n','两个整数以空格分开','一个数','20 30','50',1,116,84,0,2,0,19,8,3,1000,125000,0,'2020-07-21 17:56:35','2020-08-12 21:19:14'),(1001,'独木桥','战争已经进入到紧要时间。你是运输小队长，正在率领运输部队向前线运送物资。运输任务像做题一样的无聊。你希望找些刺激，于是命令你的士兵们到前方的一座独木桥上欣赏风景，而你留在桥下欣赏士兵们。士兵们十分愤怒，因为这座独木桥十分狭窄，只能容纳1个人通过。假如有2个人相向而行在桥上相遇，那么他们2个人将无妨绕过对方，只能有1个人回头下桥，让另一个人先通过。但是，可以有多个人同时呆在同一个位置。”。','<p>战争已经进入到紧要时间。你是运输小队长，正在率领运输部队向前线运送物资。运输任务像做题一样的无聊。你希望找些刺激，于是命令你的士兵们到前方的一座独木桥上欣赏风景，而你留在桥下欣赏士兵们。士兵们十分愤怒，因为这座独木桥十分狭窄，只能容纳1个人通过。假如有2个人相向而行在桥上相遇，那么他们2个人将无妨绕过对方，只能有1个人回头下桥，让另一个人先通过。但是，可以有多个人同时呆在同一个位置。</p><p>突然，你收到从指挥部发来的信息，敌军的轰炸机正朝着你所在的独木桥飞来！为了安全，你的部队必须撤下独木桥。独木桥的长度为L，士兵们只能呆在坐标为整数的地方。所有士兵的速度都为1，但一个士兵某一时刻来到了坐标为0或L+1的位置，他就离开了独木桥。</p><p>每个士兵都有一个初始面对的方向，他们会以匀速朝着这个方向行走，中途不会自己改变方向。但是，如果两个士兵面对面相遇，他们无法彼此通过对方，于是就分别转身，继续行走。转身不需要任何的时间。</p><p>由于先前的愤怒，你已不能控制你的士兵。甚至，你连每个士兵初始面对的方向都不知道。因此，你想要知道你的部队最少需要多少时间就可能全部撤离独木桥。另外，总部也在安排阻拦敌人的进攻，因此你还需要知道你的部队最多需要多少时间才能全部撤离独木桥。</p>','<p>第一行：一个整数L，表示独木桥的长度。桥上的坐标为1…L</p><p>第二行：一个整数N，表示初始时留在桥上的士兵数目</p><p>第三行：有N个整数，分别表示每个士兵的初始坐标。</p>','<p>只有一行，输出2个整数，分别表示部队撤离独木桥的最小时间和最大时间。2个整数由一个空格符分开。</p>\n','4\n2\n1 3','2 4',2,50,22,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-07-25 00:46:23'),(1002,'铺地毯','为了准备一个独特的颁奖典礼，组织者在会场的一片矩形区域（可看做是平面直角坐标系的第一象限）铺上一些矩形地毯。一共有 n 张地毯，编号从 1 到 n。现在将这些地毯按照编号从小到大的顺序平行于坐标轴先后铺设，后铺的地毯覆盖在前面已经铺好的地毯之上。','<p>为了准备一个独特的颁奖典礼，组织者在会场的一片矩形区域（可看做是平面直角坐标系的第一象限）铺上一些矩形地毯。一共有 n 张地毯，编号从 1 到 n。现在将这些地毯按照编号从小到大的顺序平行于坐标轴先后铺设，后铺的地毯覆盖在前面已经铺好的地毯之上。</p><p>地毯铺设完成后，组织者想知道覆盖地面某个点的最上面的那张地毯的编号。注意：在矩形地毯边界和四个顶点上的点也算被地毯覆盖。</p>','<p>输入共 n + 2 行。</p><p>第一行，一个整数 n，表示总共有 n 张地毯。</p><p>接下来的 n 行中，第 i+1 行表示编号 i 的地毯的信息，包含四个整数 a ,b ,g ,k，每两个整数之间用一个空格隔开，分别表示铺设地毯的左下角的坐标 (a, b) 以及地毯在 x 轴和 y 轴方向的长度。</p><p>第 n + 2 行包含两个整数 x 和 y，表示所求的地面的点的坐标 (x, y)。</p>','<p>输出共 11 行，一个整数，表示所求的地毯的编号；若此处没有被地毯覆盖则输出 -1。<p>\n','3\n1 0 2 3\n0 2 3 3\n2 1 3 3\n2 2','3',2,181,65,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-08-12 21:19:14'),(1003,'过河卒','棋盘上 A 点有一个过河卒，需要走到目标 B 点。卒行走的规则：可以向下、或者向右。同时在棋盘上 C 点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。','<p>棋盘上 A 点有一个过河卒，需要走到目标 B 点。卒行走的规则：可以向下、或者向右。同时在棋盘上 C 点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。</p><p>棋盘用坐标表示，A 点 (0, 0)、B 点 (n, m)，同样马的位置坐标是需要给出的。</p><p>现在要求你计算出卒从 A 点能够到达 B 点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。</p>','<p>一行四个正整数，分别表示 B 点坐标和马的坐标。</p>','<p>一个整数，表示所有的路径条数。</p>\n','6 6 3 3','6',2,146,46,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1004,'方格取数','设有 N×N 的方格图 (N≤9)，我们将其中的某些方格中填入正整数，而其他的方格中则放入数字 0。如下图所示（见样例）:','<p>设有 N×N 的方格图 (N≤9)，我们将其中的某些方格中填入正整数，而其他的方格中则放入数字 0。如下图所示（见样例）:</p>\n<pre style=\"height: 236px; overflow: hidden;\">\n<style>\n	.hljs-number{\n		color: #bd4147;\n    }\n</style>\n<code>A\n <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">13</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">6</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">7</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">14</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">21</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">15</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">14</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n                         B\n</code>\n</pre>\n<p>某人从图的左上角的 A 点出发，可以向下行走，也可以向右走，直到到达右下角的 B 点。在走过的路上，他可以取走方格中的数（取走后的方格中将变为数字 0）。<br>\n此人从 A 点到 B 点共走两次，试找出 2 条这样的路径，使得取得的数之和为最大。</p>','<p>输入的第一行为一个整数 N（表示 N×N 的方格图），接下来的每行有三个整数，前两个表示位置，第三个数为该位置上所放的数。一行单独的 0 表示输入结束。</p>','<p>只需输出一个整数，表示 2 条路径上取得的最大的和。</p>','8\n2 3 13\n2 6 6\n3 5 7\n4 4 14\n5 2 21\n5 6 4\n6 3 15\n7 2 14\n0 0 0','67',3,49,24,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-07-25 00:46:23'),(1005,'矩阵取数游戏','帅帅经常跟同学玩一个矩阵取数游戏：对于一个给定的 n×m 的矩阵，矩阵中的每个元素 a[i][j]	均为非负整数。游戏规则如下：','<p>帅帅经常跟同学玩一个矩阵取数游戏：对于一个给定的 n×m 的矩阵，矩阵中的每个元素 a[i][j]	均为非负整数。游戏规则如下：</p>\n<ol style=\"line-height: 18px;\">\n	<style>li{list-style:decimal;}</style>\n	<li>每次取数时须从每行各取走一个元素，共 n 个。经过 m 次后取完矩阵内所有元素；</li>\n	<li>每次取走的各个元素只能是该元素所在行的行首或行尾；</li>\n	<li>每次取数都有一个得分值，为每行取数的得分之和，每行取数的得分 = 被取走的元素值 ×2^i  ，其中 i 表示第 i 次取数（从 1 开始编号）；</li>\n	<li>游戏结束总得分为 m 次取数得分之和。</li>\n</ol>\n<p>帅帅想请你帮忙写一个程序，对于任意矩阵，可以求出取数后的最大得分。</p>','<p>输入文件包括 n+1 行：</p>\n<p>第一行为两个用空格隔开的整数 n 和 m。</p>\n<p>第 2∽n+1 行为 n×m 矩阵，其中每行有 m 个用单个空格隔开的非负整数。</p>','<p>输出文件仅包含1行，为一个整数，即输入矩阵取数后的最大得分。</p>','2 3\n1 2 3\n3 4 2','82',3,44,13,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1006,'传纸条','小渊和小轩是好朋友也是同班同学，他们在一起总有谈不完的话题。一次素质拓展活动中，班上同学安排做成一个 mm 行 nn 列的矩阵，而小渊和小轩被安排在矩阵对角线的两端，因此，他们就无法直接交谈了。幸运的是，他们可以通过传纸条来进行交流。纸条要经由许多同学传到对方手里，小渊坐在矩阵的左上角，坐标 (1,1)，小轩坐在矩阵的右下角，坐标 (m,n)。从小渊传到小轩的纸条只可以向下或者向右传递，从小轩传给小渊的纸条只可以向上或者向左传递。','<p>小渊和小轩是好朋友也是同班同学，他们在一起总有谈不完的话题。一次素质拓展活动中，班上同学安排做成一个 mm 行 nn 列的矩阵，而小渊和小轩被安排在矩阵对角线的两端，因此，他们就无法直接交谈了。幸运的是，他们可以通过传纸条来进行交流。纸条要经由许多同学传到对方手里，小渊坐在矩阵的左上角，坐标 (1,1)，小轩坐在矩阵的右下角，坐标 (m,n)。从小渊传到小轩的纸条只可以向下或者向右传递，从小轩传给小渊的纸条只可以向上或者向左传递。</p>\n<p>在活动进行中，小渊希望给小轩传递一张纸条，同时希望小轩给他回复。班里每个同学都可以帮他们传递，但只会帮他们一次，也就是说如果此人在小渊递给小轩纸条的时候帮忙，那么在小轩递给小渊的时候就不会再帮忙。反之亦然。</p>\n<p>还有一件事情需要注意，全班每个同学愿意帮忙的好感度有高有低（注意：小渊和小轩的好心程度没有定义，输入时用 0 表示），可以用一个 [0,100] 内的自然数来表示，数越大表示越好心。小渊和小轩希望尽可能找好心程度高的同学来帮忙传纸条，即找到来回两条传递路径，使得这两条路径上同学的好心程度之和最大。现在，请你帮助小渊和小轩找到这样的两条路径。</p>','<p>第一行有两个用空格隔开的整数 m 和 n，表示班里有 m 行 n 列。</p>\n<p>接下来的 m 行是一个 m×n 的矩阵，矩阵中第 i 行 j 列的整数表示坐在第 i 行 j 列的学生的好心程度。每行的 n 个整数之间用空格隔开。</p>','<p>输出文件共一行一个整数，表示来回两条路上参与传递纸条的学生的好心程度之和的最大值。</p>','3 3\n0 3 9\n2 8 5\n5 7 0','34',3,55,25,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1007,'三连击','将1,2,⋯,9共9个数分成3组，分别组成3个三位数，且使这3个三位数构成1:2:3的比例，试求出所有满足条件的3个三位数。','<p>将1,2,⋯,9共9个数分成3组，分别组成3个三位数，且使这3个三位数构成1:2:3的比例，试求出所有满足条件的3个三位数。</p>','<p>木有输入</p>','<p>若干行，每行3个数字。按照每行第1个数字升序排列。</p>','无','192 384 576\n* * *\n. . .\n* * *\n(输出被和谐了)',2,218,97,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-08-13 08:53:40'),(1008,'阶乘之和','用高精度计算出S=1!+2!+3!+…+n!(n≤50)','<p>用高精度计算出S=1!+2!+3!+…+n!(n≤50)</p>\n<p>其中“!”表示阶乘，例如：5!=5×4×3×2×1。</p>','<p>一个正整数N。</p>','<p>一个正整数S，表示计算结果。</p>','3','9',2,95,25,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1009,'进制位','著名科学家卢斯为了检查学生对进位制的理解，他给出了如下的一张加法表，表中的字母代表数字。 例如：','<p>著名科学家卢斯为了检查学生对进位制的理解，他给出了如下的一张加法表，表中的字母代表数字。 例如：</p>\n<pre><code class=\"language-cpp hljs\">+    L    K    V    E\nL    L    K    V    E\nK    K    V    E    KL\nV    V    E    KL    KK\nE    E    KL    KK     KV\n</code></pre>\n<p>其含义为：</p>\n<p>L+L=L，L+K=K，L+V=V，L+E=E</p>\n<p>K+L=K，K+K=V，K+V=E，K+E=KL</p>\n<p>…… E+E=KV</p>\n<p>根据这些规则可推导出：L=0，K=1，V=2，E=3</p>\n<p>同时可以确定该表表示的是4进制加法</p>','<p>n (n≤9)表示行数。</p>\n<p>以下n行，每行包括n个字符串，每个字串间用空格隔开。（字串仅有一个为‘+’号，其它都由大写字母组成）</p>','<p>各个字母表示什么数，格式如：L=0，K=1，……按给出的字母顺序。</p>\n<p>加法运算是几进制的。</p>\n<p>若不可能组成加法表，则应输出“ERROR!”</p>','5\n+ L K V E\nL L K V E\nK K V E KL\nV V E KL KK\neE E KL KK KV','L=0 K=1 V=2 E=3\n4',3,9,3,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1010,'拼数','设有 n 个正整数a[1]...a[n] ，将它们联接成一排，相邻数字首尾相接，组成一个最大的整数。','<p>设有 n 个正整数a[1]...a[n] ，将它们联接成一排，相邻数字首尾相接，组成一个最大的整数。</p>','<p>第一行有一个整数，表示数字个数 n。</p>\n<p>第二行有 n 个整数，表示给出的 n 个整数 a[i]。</p>','<p>一个正整数，表示最大的整数</p>','3\n13 312 343','34331213',2,70,33,0,0,0,3,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1011,'邮票面值设计',NULL,NULL,NULL,NULL,NULL,NULL,3,76,30,0,0,0,0,0,0,1000,NULL,0,'2020-07-21 14:16:50','2020-08-13 08:53:40'),(1012,'车站',NULL,NULL,NULL,NULL,NULL,NULL,2,66,57,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1013,'幂次方',NULL,NULL,NULL,NULL,NULL,NULL,2,65,45,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1014,'旅行家的预算',NULL,NULL,NULL,NULL,NULL,NULL,3,76,58,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1015,'回文数',NULL,NULL,NULL,NULL,NULL,NULL,2,55,34,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1016,'一元三次方程求解',NULL,NULL,NULL,NULL,NULL,NULL,1,66,43,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1017,'统计单词个数',NULL,NULL,NULL,NULL,NULL,NULL,3,90,67,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-05 10:12:55'),(1018,'数的划分',NULL,NULL,NULL,NULL,NULL,NULL,2,86,49,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1019,'求先序排列',NULL,NULL,NULL,NULL,NULL,NULL,2,67,45,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1020,'最大公约数和最小公倍数问题',NULL,NULL,NULL,NULL,NULL,NULL,2,78,49,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1021,'矩形覆盖',NULL,NULL,NULL,NULL,NULL,NULL,3,89,78,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1022,'级数求和',NULL,NULL,NULL,NULL,NULL,NULL,1,56,34,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-05 10:12:55'),(1023,'神经网络',NULL,NULL,NULL,NULL,NULL,NULL,3,56,37,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1024,'侦探推理',NULL,NULL,NULL,NULL,NULL,NULL,3,67,54,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1025,'加分二叉树',NULL,NULL,NULL,NULL,NULL,NULL,3,78,65,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1026,'传染病控制',NULL,NULL,NULL,NULL,NULL,NULL,3,65,48,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1027,'乒乓球',NULL,NULL,NULL,NULL,NULL,NULL,2,89,60,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1028,'数字游戏',NULL,NULL,NULL,NULL,NULL,NULL,3,779,500,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1029,'栈',NULL,NULL,NULL,NULL,NULL,NULL,2,123,99,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1030,'麦森数',NULL,NULL,NULL,NULL,NULL,NULL,3,109,79,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1031,'校门外的树',NULL,NULL,NULL,NULL,NULL,NULL,1,78,57,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-05 10:12:55'),(1032,'装箱问题',NULL,NULL,NULL,NULL,NULL,NULL,2,67,43,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1034,'谁拿了最多奖学金',NULL,NULL,NULL,NULL,NULL,NULL,2,89,70,0,0,0,0,0,0,NULL,NULL,0,'2020-07-21 14:16:50','2020-08-06 09:21:35'),(1038,'低洼地','3123','<p>3123</p>\n','123','213','213','2131',1,55,33,0,0,0,0,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-08-13 08:54:37'),(1039,'222222','2222222222![](http://file.gkuoj.com/image/ming/blog/1557311340073.jpg)\n````java\n @Override\n    @Transactional(rollbackFor = Exception.class)\n    public RestResponseVO insert(ProblemRequest problemRequest) {\n        if (problemRequest == null) {\n            return RestResponseVO.createByErrorEnum(RestResponseEnum.INVALID_REQUEST);\n        }\n        Problem problem = new Problem();\n        BeanUtil.copyPropertiesIgnoreNull(problemRequest,problem);\n        int effect = problemMapper.insertSelective(problem);\n        if (effect > 0) {\n            String tags = problemRequest.getTags();\n            boolean result = insertTags(problem.getId(), tags);\n            return result ? RestResponseVO.createBySuccessMessage(StringConst.ADD_SUCCESS,problem)\n                    : RestResponseVO.createByErrorMessage(StringConst.ADD_FAIL);\n        }\n        return RestResponseVO.createByErrorMessage(StringConst.ADD_FAIL);\n    }\n````','<p>2222222222<img src=\"http://file.gkuoj.com/image/ming/blog/1557311340073.jpg\" alt=\"\">\n<pre><code class=\"lang-java\"> @Override\n    @Transactional(rollbackFor = Exception.class)\n    public RestResponseVO insert(ProblemRequest problemRequest) {\n        if (problemRequest == null) {\n            return RestResponseVO.createByErrorEnum(RestResponseEnum.INVALID_REQUEST);\n        }\n        Problem problem = new Problem();\n        BeanUtil.copyPropertiesIgnoreNull(problemRequest,problem);\n        int effect = problemMapper.insertSelective(problem);\n        if (effect &gt; 0) {\n            String tags = problemRequest.getTags();\n            boolean result = insertTags(problem.getId(), tags);\n            return result ? RestResponseVO.createBySuccessMessage(StringConst.ADD_SUCCESS,problem)\n                    : RestResponseVO.createByErrorMessage(StringConst.ADD_FAIL);\n        }\n        return RestResponseVO.createByErrorMessage(StringConst.ADD_FAIL);\n    }\n</code></pre>\n','222222222','22222222222','2222222','2222222222222',4,0,0,0,0,0,0,0,0,1000,125000,1,'2020-07-21 14:16:50','2020-08-13 08:54:37'),(1040,'333333333','3333333333![](http://file.gkuoj.com/image/ming/blog/1557311907081.jpg)\n333333','<p>3333333333<img src=\"http://file.gkuoj.com/image/ming/blog/1557311907081.jpg\" alt=\"\"><br>333333\n','3333333','33333333333','33333','33333333',3,0,0,0,0,0,0,0,0,1000,125000,1,'2020-07-21 14:16:50','2020-08-13 08:54:37'),(1041,'22222222','22222','<p>22222</p>\n','22222222','2222','222222','2222222',4,0,0,0,0,0,0,0,0,1000,125000,1,'2020-07-21 14:16:50','2020-08-13 08:54:37'),(1042,'观光公交','测试','<p>测试</p>\n','１２３','１２３','１２３','１２３',3,89,59,0,0,0,0,0,0,1000,125000,0,'2020-07-21 14:16:50','2020-08-13 08:54:37');
=======
INSERT INTO `problem` VALUES (1000,'A+B Problem','输入两个整数a,b，输出它们的和(|a|,|b|<=10^9)。\n\n注意\n\npascal使用integer会爆掉哦！\n有负数哦！\nc/c++的main函数必须是int类型，而且最后要return 0。这不仅对洛谷其他题目有效，而且也是noip/noi比赛的要求！\n好吧，同志们，我们就从这一题开始，向着大牛的路进发。\n\n任何一个伟大的思想，都有一个微不足道的开始。','<p>输入两个整数a,b，输出它们的和(|a|,|b|&lt;=10^9)。</p>\n<p>注意</p>\n<p>pascal使用integer会爆掉哦！<br>有负数哦！<br>c/c++的main函数必须是int类型，而且最后要return 0。这不仅对洛谷其他题目有效，而且也是noip/noi比赛的要求！<br>好吧，同志们，我们就从这一题开始，向着大牛的路进发。\n<p>任何一个伟大的思想，都有一个微不足道的开始。</p>\n','两个整数以空格分开','一个数','20 30','50',1,116,84,0,2,0,19,8,3,100,12312,0,'2018-12-17 17:19:35','2019-05-09 16:51:23'),(1001,'A+B Problem2','１２３１２３','<p>１２３１２３</p>\n','２１３','２３１２','2\n10\n343','２１３２１',1,18,2,0,0,0,12,1,3,1000,262144,0,'2018-12-26 14:00:45','2019-05-09 01:20:20'),(1002,'铺地毯',NULL,NULL,'',NULL,NULL,NULL,1,3,0,0,0,0,3,0,0,NULL,NULL,0,'2018-12-26 14:16:50','2019-03-25 00:46:23'),(1003,'过河卒',NULL,NULL,NULL,NULL,NULL,NULL,4,0,0,0,0,0,0,0,0,NULL,NULL,0,'2018-12-26 14:17:00','2019-01-27 12:20:15'),(1004,'方格取数',NULL,NULL,NULL,NULL,NULL,NULL,3,0,0,0,0,0,0,0,0,NULL,NULL,0,'2018-12-26 14:57:07','2019-01-27 12:20:15'),(1005,'矩阵取数游戏',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2018-12-26 14:57:17','2019-01-27 12:20:15'),(1006,'传纸条',NULL,NULL,NULL,NULL,NULL,NULL,2,0,0,0,0,0,0,0,0,NULL,NULL,0,'2018-12-26 14:57:30','2019-01-27 12:20:15'),(1007,'三连击',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2018-12-26 14:57:38','2019-01-27 12:20:15'),(1008,'阶乘之和',NULL,NULL,NULL,NULL,NULL,NULL,4,0,0,0,0,0,0,0,0,NULL,NULL,0,'2018-12-26 14:57:50','2019-01-27 12:20:15'),(1010,'进制位',NULL,NULL,NULL,NULL,NULL,NULL,4,0,0,0,0,0,0,0,0,NULL,NULL,0,'2018-12-26 22:19:29','2019-01-27 12:20:15'),(1011,'拼数',NULL,NULL,NULL,NULL,NULL,NULL,3,0,0,0,0,0,0,0,0,NULL,NULL,0,'2018-12-26 22:19:29','2019-01-27 12:20:15'),(1012,'车站',NULL,NULL,NULL,NULL,NULL,NULL,3,0,0,0,0,0,0,0,0,NULL,NULL,0,'2018-12-26 22:19:29','2019-01-27 12:20:15'),(1013,'幂次方',NULL,NULL,NULL,NULL,NULL,NULL,4,0,0,0,0,0,0,0,0,NULL,NULL,0,'2018-12-26 22:19:29','2019-01-27 12:20:15'),(1014,'旅行家的预算',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2018-12-26 22:19:29','2019-01-27 12:20:15'),(1015,'回文数',NULL,NULL,NULL,NULL,NULL,NULL,3,0,0,0,0,0,0,0,0,NULL,NULL,0,'2018-12-26 22:19:29','2019-01-27 12:20:15'),(1016,'一元三次方程求解',NULL,NULL,NULL,NULL,NULL,NULL,2,0,0,0,0,0,0,0,0,NULL,NULL,0,'2018-12-26 22:19:29','2019-01-27 12:20:15'),(1017,'统计单词个数',NULL,NULL,NULL,NULL,NULL,NULL,3,0,0,0,0,0,0,0,0,NULL,NULL,0,'2018-12-26 22:19:29','2019-01-27 12:20:15'),(1018,'数的划分',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2019-01-26 00:29:49','2019-01-27 12:20:15'),(1019,'求先序排列',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2019-01-26 00:29:49','2019-01-27 12:20:15'),(1020,'最大公约数和最小公倍数问题',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2019-01-26 00:29:49','2019-01-27 12:20:15'),(1021,'矩形覆盖',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2019-01-26 00:29:49','2019-01-27 12:20:15'),(1022,'级数求和',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2019-01-26 00:29:49','2019-01-27 12:20:15'),(1023,'神经网络',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2019-01-26 00:29:49','2019-01-27 12:20:15'),(1024,'侦探推理',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2019-01-26 00:29:49','2019-01-27 12:20:15'),(1025,'加分二叉树',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2019-01-26 00:29:49','2019-01-27 12:20:15'),(1026,'传染病控制',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2019-01-26 00:29:49','2019-01-27 12:20:15'),(1027,'乒乓球',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2019-01-26 00:29:49','2019-01-27 12:20:15'),(1028,'数字游戏',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2019-01-26 00:29:49','2019-01-27 12:20:15'),(1029,'栈',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2019-01-26 00:29:49','2019-01-27 12:20:15'),(1030,'麦森数',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2019-01-26 00:29:49','2019-01-27 12:20:15'),(1031,'校门外的树',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2019-01-26 00:29:49','2019-01-27 12:20:15'),(1032,'装箱问题',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2019-01-26 00:29:49','2019-01-27 12:20:15'),(1034,'谁拿了最多奖学金',NULL,NULL,NULL,NULL,NULL,NULL,1,0,0,0,0,0,0,0,0,NULL,NULL,0,'2019-01-26 00:29:49','2019-01-27 12:20:15'),(1038,'21312','3123','<p>3123</p>\n','123','213','213','2131',1,0,0,0,0,0,0,0,0,10000,262144,0,'2019-05-08 18:24:56','2019-05-08 18:24:56'),(1039,'222222','2222222222![](http://file.gkuoj.com/image/ming/blog/1557311340073.jpg)\n````java\n @Override\n    @Transactional(rollbackFor = Exception.class)\n    public RestResponseVO insert(ProblemRequest problemRequest) {\n        if (problemRequest == null) {\n            return RestResponseVO.createByErrorEnum(RestResponseEnum.INVALID_REQUEST);\n        }\n        Problem problem = new Problem();\n        BeanUtil.copyPropertiesIgnoreNull(problemRequest,problem);\n        int effect = problemMapper.insertSelective(problem);\n        if (effect > 0) {\n            String tags = problemRequest.getTags();\n            boolean result = insertTags(problem.getId(), tags);\n            return result ? RestResponseVO.createBySuccessMessage(StringConst.ADD_SUCCESS,problem)\n                    : RestResponseVO.createByErrorMessage(StringConst.ADD_FAIL);\n        }\n        return RestResponseVO.createByErrorMessage(StringConst.ADD_FAIL);\n    }\n````','<p>2222222222<img src=\"http://file.gkuoj.com/image/ming/blog/1557311340073.jpg\" alt=\"\">\n<pre><code class=\"lang-java\"> @Override\n    @Transactional(rollbackFor = Exception.class)\n    public RestResponseVO insert(ProblemRequest problemRequest) {\n        if (problemRequest == null) {\n            return RestResponseVO.createByErrorEnum(RestResponseEnum.INVALID_REQUEST);\n        }\n        Problem problem = new Problem();\n        BeanUtil.copyPropertiesIgnoreNull(problemRequest,problem);\n        int effect = problemMapper.insertSelective(problem);\n        if (effect &gt; 0) {\n            String tags = problemRequest.getTags();\n            boolean result = insertTags(problem.getId(), tags);\n            return result ? RestResponseVO.createBySuccessMessage(StringConst.ADD_SUCCESS,problem)\n                    : RestResponseVO.createByErrorMessage(StringConst.ADD_FAIL);\n        }\n        return RestResponseVO.createByErrorMessage(StringConst.ADD_FAIL);\n    }\n</code></pre>\n','222222222','22222222222','2222222','2222222222222',4,0,0,0,0,0,0,0,0,222,222,1,'2019-05-08 18:29:31','2019-05-08 18:29:38'),(1040,'333333333','3333333333![](http://file.gkuoj.com/image/ming/blog/1557311907081.jpg)\n333333','<p>3333333333<img src=\"http://file.gkuoj.com/image/ming/blog/1557311907081.jpg\" alt=\"\"><br>333333\n','3333333','33333333333','33333','33333333',3,0,0,0,0,0,0,0,0,1000,262144,1,'2019-05-08 18:38:49','2019-05-08 18:39:07'),(1041,'22222222','22222','<p>22222</p>\n','22222222','2222','222222','2222222',4,0,0,0,0,0,0,0,0,1000,262144,1,'2019-05-08 18:39:45','2019-05-08 18:39:50'),(1042,'测试','测试','<p>测试</p>\n','１２３','１２３','１２３','１２３',1,0,0,0,0,0,0,0,0,10000,262144,0,'2019-05-09 16:46:16','2019-05-09 16:48:20');
>>>>>>> 11c2e33... 0816
/*!40000 ALTER TABLE `problem` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `problem_result`
--

DROP TABLE IF EXISTS `problem_result`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `problem_result` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `problem_id` int(11) DEFAULT NULL COMMENT '题目id',
  `comp_id` int(11) DEFAULT NULL COMMENT '比赛id null表示不是比赛测试结果',
  `comp_score` int(11) DEFAULT '0' COMMENT '比赛得分',
  `run_num` varchar(64) NOT NULL COMMENT '运行编号',
  `status` int(11) DEFAULT '8' COMMENT ' 0 编译中　1 ac 2 ce 3 pe 4 re 5 tle 6 me 7 wa　8队列中 9判题中',
  `type` varchar(10) DEFAULT NULL COMMENT '代码类型 java8 c c++ python2 python3',
  `time` bigint(20) DEFAULT NULL,
  `memory` bigint(20) DEFAULT NULL,
  `error_msg` varchar(1000) DEFAULT NULL COMMENT '错误信息',
  `source_code` varchar(5000) DEFAULT NULL,
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `problem_result_run_num_uindex` (`run_num`)
) ENGINE=InnoDB AUTO_INCREMENT=288 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `problem_result`
--

LOCK TABLES `problem_result` WRITE;
/*!40000 ALTER TABLE `problem_result` DISABLE KEYS */;
INSERT INTO `problem_result` VALUES (182,1,1000,1,10,'4ad7d013-4156-46df-b706-640b28068281',1,'Java8',211,27092,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:01:17','2019-03-16 23:01:18'),(183,1,1000,1,10,'eaa8987d-f2c0-4557-adf4-9bcbba57a0f3',1,'Java8',194,26824,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:01:28','2019-03-16 23:01:29'),(184,1,1001,1,0,'b14f6c7f-eda7-4700-a4a5-4af06b840ae5',4,'Java8',-1,-1,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:02:05','2019-03-16 23:02:06'),(185,1,1001,1,0,'38c5362c-d990-457e-87db-760cab93ce69',4,'Java8',-1,-1,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:02:24','2019-03-16 23:02:25'),(186,1,1001,1,0,'5da80fbb-3c9f-47fa-860e-ca7dcb6e707a',4,'Java8',-1,-1,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n      \n        System.out.println(123);\n    }\n}','2019-03-16 23:04:21','2019-03-16 23:04:21'),(187,1,1001,NULL,0,'8b5b325c-a6a3-4071-9801-f2e0c43cb6d0',4,'Java8',-1,-1,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:05:27','2019-03-16 23:05:28'),(188,1,1001,NULL,0,'faf2719b-3393-4a69-99bc-c7b3876f5ea4',2,'Java8',NULL,NULL,'/home/ming/gkuoj/file/testcase/1001/1552748829660/Main.java:6: 错误: 找不到符号\n        System.out.println(a+b);\n                           ^\n  符号:   变量 a\n  位置: 类 Main\n/home/ming/gkuoj/file/testcase/1001/1552748829660/Main.java:6: 错误: 找不到符号\n        System.out.println(a+b);\n                             ^\n  符号:   变量 b\n  位置: 类 Main\n2 个错误','import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n       \n        System.out.println(a+b);\n    }\n}','2019-03-16 23:07:10','2019-03-16 23:07:10'),(189,1,1001,NULL,0,'c0d37810-cc7c-4973-9722-ac503a7cc6fa',4,'Java8',-1,-1,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n       \n        System.out.println(123);\n    }\n}','2019-03-16 23:07:31','2019-03-16 23:07:31'),(190,1,1001,NULL,0,'5a28b246-ef53-45cc-bec0-09a808262d60',7,'Java8',80,24336,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n       \n        System.out.println(123);\n    }\n}','2019-03-16 23:08:12','2019-03-16 23:08:12'),(191,1,1001,1,0,'d0050ab2-6e0b-41ff-a6d5-a4216b3e5141',7,'Java8',75,24416,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        System.out.println(123);\n    }\n}','2019-03-16 23:17:06','2019-03-16 23:17:06'),(192,1,1001,1,0,'909f1e76-873f-44bb-984a-697e51d7da67',4,'Java8',119,26868,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:18:35','2019-03-16 23:18:36'),(193,1,1001,1,5,'efa268b3-ad42-49e1-a6dc-6f1edad1b9dc',7,'Java8',77,24276,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n       \n        System.out.println(123);\n    }\n}','2019-03-16 23:18:47','2019-03-16 23:18:48'),(194,1,1001,1,0,'27af1ccc-f64e-49ec-a3ea-d53610bb55bf',4,'Java8',132,26864,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:19:24','2019-03-16 23:19:25'),(195,1,1001,1,0,'8be9657d-6350-49e8-9419-57a00dde14e3',4,'Java8',137,26700,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:19:25','2019-03-16 23:19:26'),(196,1,1001,1,0,'885f8b18-2168-47ac-b18f-b15eabfb3a1d',4,'Java8',138,26956,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:19:26','2019-03-16 23:19:26'),(197,1,1001,1,0,'06aa5dfd-f632-49fa-a6b0-4e119475d0eb',4,'Java8',153,26548,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:19:26','2019-03-16 23:19:27'),(198,1,1001,1,0,'e08437e3-95f5-41c3-b49a-102380ae9cb6',4,'Java8',119,26700,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:19:27','2019-03-16 23:19:28'),(199,1,1000,1,10,'5f08f7cb-4c96-43f1-90b9-52c3eaf865fc',1,'Java8',200,27020,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:49:33','2019-03-16 23:49:34'),(200,1,1000,1,10,'f0393388-92c5-478e-83ed-30e96c9ab2ec',1,'Java8',261,27012,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:49:37','2019-03-16 23:49:38'),(201,1,1000,1,10,'ef1dc14b-12e9-48b8-9be9-c0225ee12c59',1,'Java8',222,26804,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:49:38','2019-03-16 23:49:39'),(202,1,1000,1,10,'25046647-ecf7-478c-be31-b36bbe453923',1,'Java8',191,26952,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:51:14','2019-03-16 23:51:47'),(203,1,1000,1,10,'d226dce1-1f5e-437f-8cee-c7f7874d753f',1,'Java8',200,26992,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:51:55','2019-03-16 23:53:52'),(204,1,1000,1,10,'dd282795-bb86-4037-a819-0f1e19c38498',1,'Java8',235,27052,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:54:25','2019-03-16 23:55:52'),(205,1,1000,1,10,'a0301f57-7b6d-4237-8e28-a3769321fd4c',1,'Java8',249,27112,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-16 23:56:10','2019-03-16 23:56:10'),(206,1,1000,NULL,0,'7608508c-5178-4dd1-a6c0-3bf046f70ae5',1,'Java8',294,27176,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-25 00:33:53','2019-03-25 00:33:57'),(207,35,1000,NULL,0,'be33eeda-bcbc-4c10-b1ae-e13e11f37f26',1,'Java8',233,27136,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-25 00:39:36','2019-03-25 00:39:36'),(208,2,1000,NULL,0,'6d1c9de4-9f13-46d6-ad6b-545199597946',1,'C++',0,0,NULL,'#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main() {\n    int a,b;\n    cin >> a >> b;\n    cout << a+b;\n    return 0;\n}','2019-03-25 00:42:46','2019-03-25 00:42:49'),(209,2,1000,NULL,0,'f5a0b225-cc4b-4ff0-8cc7-6e22591efdb4',1,'C++',0,0,NULL,'#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main() {\n    int a,b;\n    cin >> a >> b;\n    cout << a+b;\n    return 0;\n}','2019-03-25 00:43:23','2019-03-25 00:43:23'),(210,2,1001,NULL,0,'c51e13b1-763b-4eea-8e23-7baa09332f15',1,'Java8',67,24216,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n      \n        System.out.println(123);\n    }\n}','2019-03-25 00:44:55','2019-03-25 00:44:56'),(211,1,1001,NULL,0,'9255826d-b9ad-4482-b32e-83382b8e814d',4,'Java8',108,26688,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(123);\n    }\n}','2019-03-25 00:45:43','2019-03-25 00:45:43'),(212,1,1001,NULL,0,'8f4e32e9-ac47-4c5a-a64e-7fceef997f1e',1,'Java8',67,23912,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n\n        System.out.println(123);\n    }\n}','2019-03-25 00:45:49','2019-03-25 00:45:49'),(213,1,1002,NULL,0,'cd461716-9c87-4285-b172-eb4ffbd5d9c4',4,'Java8',-1,-1,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-25 00:46:22','2019-03-25 00:46:23'),(214,1,1000,2,10,'d84f4b4c-22b2-4b32-9f22-9ce26c79aa4e',1,'Java8',197,26792,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-25 01:05:35','2019-03-25 01:05:36'),(215,1,1000,2,10,'8691c82f-3792-4ed2-8c92-00dee8f13484',1,'Java8',256,27052,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-25 01:05:41','2019-03-25 01:05:42'),(216,1,1000,2,10,'f3b6abbc-30ec-498e-9b82-49087e3d307b',1,'Java8',311,27212,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-25 01:05:42','2019-03-25 01:05:43'),(217,1,1000,NULL,0,'58241ccb-711e-4b0c-840e-e28f2dc1e492',1,'Python2',3,7128,NULL,'s = raw_input().split()\nprint int(s[0]) + int(s[1])','2019-03-29 00:24:29','2019-03-29 00:24:29'),(218,1,1000,NULL,0,'351b9ffd-69f9-4fcb-9892-2b49cb2de932',4,'Python3',39,0,NULL,'s = input().split()\nprint(int(s[0]) + int(s[1]))','2019-03-29 00:25:11','2019-03-29 00:25:11'),(219,1,1000,NULL,0,'f45b929c-39da-46f8-ac9d-937c5fbeeed0',1,'Java8',294,27072,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-03-29 00:25:33','2019-03-29 00:25:34'),(220,1,1000,NULL,0,'d3b2b8bd-a4bf-40b7-8fd0-ac3d05e84ac6',1,'C',0,0,NULL,'#include <stdio.h>\n\nint main() {\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\", a+b);\n    return 0;\n}','2019-03-29 00:25:38','2019-03-29 00:25:37'),(221,1,1000,NULL,0,'b16565a0-34fc-48de-a96f-093177bef0ad',1,'C++',0,0,NULL,'#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main() {\n    int a,b;\n    cin >> a >> b;\n    cout << a+b;\n    return 0;\n}','2019-03-29 00:25:41','2019-03-29 00:25:43'),(222,1,1000,NULL,0,'95bf1238-5375-41c5-9cf3-fea47d74c79c',4,'Python3',49,9400,NULL,'s = input().split()\nprint(int(s[0]) + int(s[1]))','2019-03-29 00:25:47','2019-03-29 00:25:47'),(223,1,1000,NULL,0,'86ca195b-b7af-4ea8-8585-162f2c8e134a',1,'Python2',13,6048,NULL,'s = raw_input().split()\nprint int(s[0]) + int(s[1])','2019-03-29 00:25:52','2019-03-29 00:25:52'),(224,1,1000,NULL,0,'3bb0c122-a51f-46e2-8b27-55ee60023d61',1,'Python2',12,7176,NULL,'s = raw_input().split()\nprint int(s[0]) + int(s[1])','2019-03-29 00:25:54','2019-03-29 00:25:54'),(225,1,1000,NULL,0,'2b0c2698-3e7c-44cf-8783-7c47549d4d63',1,'Python2',18,7100,NULL,'s = raw_input().split()\nprint int(s[0]) + int(s[1])','2019-03-29 00:25:55','2019-03-29 00:25:55'),(226,1,1000,NULL,0,'6ce80657-eb98-4583-92f2-7f560011d712',4,'Python3',64,9400,NULL,'s = input().split()\nprint(int(s[0]) + int(s[1]))','2019-03-29 00:26:04','2019-03-29 00:26:03'),(227,1,1000,NULL,0,'8502cce5-7766-4498-99e1-29e1554d213d',4,'Python3',53,9348,NULL,'s = input().split()\nprint(int(s[0]) + int(s[1]))','2019-03-29 00:27:40','2019-03-29 00:27:40'),(228,1,1000,NULL,0,'39da9f5d-665d-4cbd-8f10-478637950d4c',4,'Python3',44,9404,NULL,'s = input().split()\nprint(int(s[0]) + int(s[1]))','2019-03-29 00:28:05','2019-03-29 00:28:05'),(229,1,1000,NULL,0,'02f9b4c3-c1c7-4ea4-9266-b47c714b5ab7',4,'Python3',39,9404,NULL,'s = input().split()\nprint(int(s[0]) + int(s[1]))','2019-03-29 00:29:02','2019-03-29 00:29:02'),(230,1,1000,NULL,0,'1443c49e-e4a3-4f69-87e7-9a6d28c3d541',4,'Python3',50,9348,NULL,'s = input().split()\nprint(int(s[0]) + int(s[1]))','2019-03-29 00:29:18','2019-03-29 00:29:18'),(231,1,1000,NULL,0,'a72bb9c7-8f7c-475f-b179-3819d8ec1b66',4,'Python3',60,9404,NULL,'s = input().split()\nprint(int(s[0]) + int(s[1]))','2019-03-29 00:29:43','2019-03-29 00:29:43'),(232,1,1000,NULL,0,'689876ef-47e3-4387-b120-14aa2fcaa3e6',4,'Python3',607,9392,NULL,'s = input().split()\nprint(int(s[0]) + int(s[1]))','2019-03-29 00:29:56','2019-03-29 00:30:26'),(233,1,1000,NULL,0,'9c6d7cee-5f9c-4f7f-b3f8-562fa6843f17',4,'Python3',141,9604,NULL,'s = input().split()\nprint(int(s[0]) + int(s[1]))','2019-03-29 00:39:24','2019-03-29 00:39:48'),(234,1,1000,NULL,0,'84dddf5d-2460-459b-ad9a-c7772ead923f',4,'Python3',10,0,NULL,'s = input().split()\nprint(int(s[0]) + int(s[1]))','2019-03-29 00:40:15','2019-03-29 00:40:44'),(235,1,1000,NULL,0,'7870310e-bf1d-48c7-923e-aecad1a0ec30',4,'Python3',27501,9172,NULL,'s = input().split()\nprint(int(s[0]) + int(s[1]))','2019-03-29 00:41:44','2019-03-29 00:43:08'),(236,1,1000,NULL,0,'ba83c491-9273-4fa9-afed-a7b665b67181',4,'Python3',97,9412,NULL,'s = input().split()\nprint(int(s[0]) + int(s[1]))','2019-03-29 00:47:53','2019-03-29 00:47:53'),(237,1,1000,NULL,0,'09366f4e-f61d-4f96-adbb-741c7ff40892',4,'Python3',646,9416,NULL,'s = input().split()\nprint(int(s[0]) + int(s[1]))','2019-03-29 00:48:01','2019-03-29 00:50:06'),(238,1,1000,NULL,0,'8ba39aa0-b557-4e28-a38f-6fce148ee35c',1,'Python3',25,8680,NULL,'s = input().split()\nprint(int(s[0]) + int(s[1]))','2019-03-29 00:50:36','2019-03-29 00:50:36'),(239,1,1000,NULL,0,'329232ba-b15a-47db-baf3-1bb758b7a476',1,'Python3',32,8688,NULL,'s = input().split()\nprint(int(s[0]) + int(s[1]))','2019-03-29 00:50:38','2019-03-29 00:50:38'),(240,1,1000,NULL,0,'a3c64127-cdec-4d4a-91b4-e9e20d4dfb7e',1,'Python3',29,8680,NULL,'s = input().split()\nprint(int(s[0]) + int(s[1]))','2019-03-29 00:50:39','2019-03-29 00:50:39'),(241,1,1000,NULL,0,'7ed6ad77-8541-46ba-aa20-e9ad26a5568c',4,'Python3',25,8612,NULL,'s = input().split()\nprint(int(s[0]) + i','2019-03-29 00:51:16','2019-03-29 00:51:15'),(242,1,1000,NULL,0,'b98bcf94-b049-4bdb-b276-1e896a109788',4,'Python3',26,8616,NULL,'s = input().split()\nprint(i','2019-03-29 00:51:19','2019-03-29 00:51:19'),(243,1,1000,NULL,0,'fc2c4e8d-6f60-4da2-a346-48c457e9c665',2,'Java8',NULL,NULL,'/home/ming/gkuoj/file/testcase/1000/1553791887666/Main.java:5: 错误: 解析时已到达文件结尾\n        Scanner cin=new S\n                         ^\n1 个错误','import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new S','2019-03-29 00:51:28','2019-03-29 00:51:28'),(244,1,1000,NULL,0,'5613d236-3ce9-4a00-af08-cddbc62298e6',1,'Java8',364,26828,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-04-21 21:51:26','2019-04-21 21:51:29'),(245,1,1000,NULL,0,'7109587c-4e88-4c53-acb8-f052b61939f7',1,'Java8',217,26996,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-04-21 21:53:56','2019-04-21 21:53:56'),(246,1,1000,NULL,0,'5c11bf9e-5b26-483e-a10e-bbac11e6bd45',1,'C++',0,0,NULL,'#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main() {\n    int a,b;\n    cin >> a >> b;\n    cout << a+b;\n    return 0;\n}','2019-04-21 21:55:26','2019-04-21 21:55:28'),(247,1,1000,NULL,0,'35e88eb3-c6d2-422b-aa1a-6713eb33bc16',1,'C++',0,0,NULL,'#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main() {\n    int a,b;\n    cin >> a >> b;\n    cout << a+b;\n    return 0;\n}','2019-04-21 21:55:46','2019-04-21 21:55:46'),(248,1,1000,NULL,0,'eae615ee-9522-406b-b12a-2a2811e54942',1,'C++',0,0,NULL,'#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main() {\n    int a,b;\n    cin >> a >> b;\n    cout << a+b;\n    return 0;\n}','2019-04-21 21:55:47','2019-04-21 21:55:47'),(249,1,1000,NULL,0,'38276cc7-0356-4518-a1bf-03b5837cd605',1,'C++',0,0,NULL,'#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main() {\n    int a,b;\n    cin >> a >> b;\n    cout << a+b;\n    return 0;\n}','2019-04-21 21:55:49','2019-04-21 21:55:49'),(250,1,1000,NULL,0,'a136d29c-f1bf-417f-854c-417a35885d52',1,'C++',1,0,NULL,'#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main() {\n    int a,b;\n    cin >> a >> b;\n    cout << a+b;\n    return 0;\n}','2019-04-21 21:55:50','2019-04-21 21:55:50'),(251,1,1000,NULL,0,'1ce91953-5b69-4175-8547-d6f276c1775c',1,'C++',0,0,NULL,'#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main() {\n    int a,b;\n    cin >> a >> b;\n    cout << a+b;\n    return 0;\n}','2019-04-21 21:55:51','2019-04-21 21:55:51'),(252,1,1000,NULL,0,'5548b164-5b94-46ed-9b78-2f94a5162970',1,'C++',1,0,NULL,'#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main() {\n    int a,b;\n    cin >> a >> b;\n    cout << a+b;\n    return 0;\n}','2019-04-21 21:55:52','2019-04-21 21:55:52'),(253,1,1000,NULL,0,'8d9aa0e6-97e7-40bf-a5dc-481ff381c6f2',1,'C++',0,0,NULL,'#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main() {\n    int a,b;\n    cin >> a >> b;\n    cout << a+b;\n    return 0;\n}','2019-04-21 21:55:53','2019-04-21 21:55:53'),(254,1,1000,NULL,0,'ac6e7f2d-850b-4a2e-bb1a-20221770f04b',1,'C++',0,0,NULL,'#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main() {\n    int a,b;\n    cin >> a >> b;\n    cout << a+b;\n    return 0;\n}','2019-04-21 21:55:55','2019-04-21 21:55:55'),(255,1,1000,NULL,0,'451306c0-0856-47b0-9674-62cf0ac3aa13',1,'C++',0,0,NULL,'#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main() {\n    int a,b;\n    cin >> a >> b;\n    cout << a+b;\n    return 0;\n}','2019-04-21 21:55:58','2019-04-21 21:55:58'),(256,1,1000,NULL,0,'05a8ff34-3ae3-4cbf-a75d-c0d2f7b46236',1,'C++',0,0,NULL,'#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main() {\n    int a,b;\n    cin >> a >> b;\n    cout << a+b;\n    return 0;\n}','2019-04-21 21:55:59','2019-04-21 21:55:59'),(257,1,1000,NULL,0,'b7f5c20c-fe0c-428b-b70e-295914eaf0cc',1,'C',0,0,NULL,'#include <stdio.h>\n\nint main() {\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\", a+b);\n    return 0;\n}','2019-04-21 21:56:19','2019-04-21 21:56:19'),(258,1,1000,NULL,0,'bfc69088-1198-44d1-a870-c27475e3ad2f',1,'C',0,0,NULL,'#include <stdio.h>\n\nint main() {\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\", a+b);\n    return 0;\n}','2019-04-21 21:56:21','2019-04-21 21:56:21'),(259,1,1000,NULL,0,'e0a274f1-4384-4f5a-b8ac-82201dc1aaa5',1,'C',0,0,NULL,'#include <stdio.h>\n\nint main() {\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\", a+b);\n    return 0;\n}','2019-04-21 21:56:21','2019-04-21 21:56:21'),(260,1,1000,NULL,0,'00848200-d014-4d03-b49d-d47a74d339c3',1,'C',0,0,NULL,'#include <stdio.h>\n\nint main() {\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\", a+b);\n    return 0;\n}','2019-04-21 21:56:22','2019-04-21 21:56:22'),(261,1,1000,NULL,0,'cdfdcaa1-93f2-4af1-9815-16efa9e0c0b3',1,'C',0,0,NULL,'#include <stdio.h>\n\nint main() {\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\", a+b);\n    return 0;\n}','2019-04-21 21:56:22','2019-04-21 21:56:22'),(262,1,1000,NULL,0,'89db9d0c-3870-4893-bc53-39b491251d29',1,'C',0,0,NULL,'#include <stdio.h>\n\nint main() {\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\", a+b);\n    return 0;\n}','2019-04-21 21:56:22','2019-04-21 21:56:22'),(263,1,1000,NULL,0,'a2aef68a-c5c3-4bea-84fd-ec0b3662ad7d',1,'C',0,0,NULL,'#include <stdio.h>\n\nint main() {\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\", a+b);\n    return 0;\n}','2019-04-21 21:56:23','2019-04-21 21:56:22'),(264,1,1000,NULL,0,'94b2807a-d795-4be2-a587-4d6b95b857cb',1,'C',0,0,NULL,'#include <stdio.h>\n\nint main() {\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\", a+b);\n    return 0;\n}','2019-04-21 21:56:23','2019-04-21 21:56:23'),(265,1,1000,NULL,0,'88654ff1-ddd0-4030-b3d8-d5d94ea9039f',1,'C',0,0,NULL,'#include <stdio.h>\n\nint main() {\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\", a+b);\n    return 0;\n}','2019-04-21 21:56:23','2019-04-21 21:56:23'),(266,1,1000,NULL,0,'d37b1a8b-dbe2-464d-b136-ad626222adb9',1,'Python2',496,7148,NULL,'s = raw_input().split()\nprint int(s[0]) + int(s[1])','2019-04-21 21:57:03','2019-04-21 21:57:03'),(267,1,1000,NULL,0,'ee7802ea-be68-4086-ad97-f1db2feb97a2',1,'Python2',13,6956,NULL,'s = raw_input().split()\nprint int(s[0]) + int(s[1])','2019-04-21 21:57:21','2019-04-21 21:57:20'),(268,1,1000,NULL,0,'89b2b36c-db89-4b46-a15d-12279a62ab3d',1,'Python2',24,7164,NULL,'s = raw_input().split()\nprint int(s[0]) + int(s[1])','2019-04-21 21:57:25','2019-04-21 21:57:25'),(269,1,1000,NULL,0,'b04b929a-f931-4710-9531-923c7163a0f8',1,'Python2',24,6976,NULL,'s = raw_input().split()\nprint int(s[0]) + int(s[1])','2019-04-21 21:57:25','2019-04-21 21:57:25'),(270,1,1000,NULL,0,'00c5f9ac-7bf4-43d0-accf-2ff29db72a52',1,'Python2',17,7260,NULL,'s = raw_input().split()\nprint int(s[0]) + int(s[1])','2019-04-21 21:57:25','2019-04-21 21:57:25'),(271,1,1000,NULL,0,'89dc7c96-38be-4ffc-a501-4f2ced54453b',1,'Python2',18,7240,NULL,'s = raw_input().split()\nprint int(s[0]) + int(s[1])','2019-04-21 21:57:25','2019-04-21 21:57:25'),(272,1,1000,NULL,0,'07e405b8-415c-41a7-9a91-ca9164a8d8e7',1,'Python2',22,6184,NULL,'s = raw_input().split()\nprint int(s[0]) + int(s[1])','2019-04-21 21:57:26','2019-04-21 21:57:25'),(273,1,1000,NULL,0,'c1047d8f-faba-41d9-8b4f-b8385c45700b',1,'Python2',20,7160,NULL,'s = raw_input().split()\nprint int(s[0]) + int(s[1])','2019-04-21 21:57:26','2019-04-21 21:57:26'),(274,1,1000,NULL,0,'fd33a21d-f53a-40eb-9f39-5ba3497c3cfc',1,'Java8',223,26968,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-04-21 21:58:19','2019-04-21 21:58:19'),(275,1,1000,NULL,0,'9a5d7779-4cce-4c4f-aec4-3827569a40c0',1,'Java8',254,27008,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-04-21 21:58:45','2019-04-21 21:58:46'),(276,1,1000,NULL,0,'6051bb2d-4d62-4e0e-a788-ad60b87b46ba',1,'Java8',217,27080,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-04-21 22:02:47','2019-04-21 22:02:48'),(277,1,1000,NULL,0,'4f0074dc-2fec-4b4b-be6b-ca0536659423',1,'Java8',211,26956,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b +\" \");\n    }\n}','2019-04-21 22:03:03','2019-04-21 22:03:03'),(278,1,1000,NULL,0,'05256d34-21d6-49f8-b85f-44b1881e06e8',2,'Java8',NULL,NULL,'/home/ming/gkuoj/file/testcase/1000/1555855393134/Main.java:7: 错误: 一元运算符 \'+++\' 的操作数类型String错误\n        System.out.println(+\" \"+a+b +\" \");\n                           ^\n1 个错误','import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(+\" \"+a+b +\" \");\n    }\n}','2019-04-21 22:03:13','2019-04-21 22:03:13'),(279,1,1000,NULL,0,'31e9eceb-8a1d-431c-a8a1-7ab77df0b35e',7,'Java8',226,26816,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(\" \"+a+b);\n    }\n}','2019-04-21 22:03:39','2019-04-21 22:03:40'),(280,1,1000,NULL,0,'5a1879c9-39b3-41ef-8a9d-7f4a69a9d344',3,'Java8',218,26788,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println();\n        System.out.println(a+b);\n    }\n}','2019-04-21 22:03:54','2019-04-21 22:03:55'),(281,1,1000,NULL,0,'92abc93d-09de-4eac-9d13-31c6f900cb6a',1,'Java8',212,26776,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n      \n        System.out.println(a+b);\n          System.out.println();\n    }\n}','2019-04-21 22:04:14','2019-04-21 22:04:15'),(282,1,1000,NULL,0,'26b3f034-0d2f-4960-b2fe-d2b457ba48f3',2,'Java8',NULL,NULL,'/home/ming/gkuoj/file/testcase/1000/1555855537890/Main.java:7: 错误: 非法的表达式开始\n        throws new Exception();\n        ^\n1 个错误','import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        throws new Exception();\n        System.out.println(a+b);\n          System.out.println();\n    }\n}','2019-04-21 22:05:37','2019-04-21 22:05:38'),(283,1,1000,NULL,0,'53ed3d3e-f7fb-46f7-aab8-d3ef8bdc590c',2,'Java8',NULL,NULL,'/home/ming/gkuoj/file/testcase/1000/1555855546094/Main.java:8: 错误: 无法访问的语句\n        System.out.println(a+b);\n        ^\n1 个错误','import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        throw new Exception();\n        System.out.println(a+b);\n          System.out.println();\n    }\n}','2019-04-21 22:05:46','2019-04-21 22:05:46'),(284,1,1000,NULL,0,'8a5b5df9-0559-4fc9-a186-a296b7754027',4,'Java8',170,24744,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        throw new Exception();\n    }\n}','2019-04-21 22:06:15','2019-04-21 22:06:16'),(285,1,1000,NULL,0,'26547f93-0a7c-4091-9504-8f1f4b406393',1,'C',0,0,NULL,'#include <stdio.h>\n\nint main() {\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\", a+b);\n    return 0;\n}','2019-04-22 00:37:16','2019-04-22 00:37:17'),(286,1,1000,NULL,0,'c9bb8ffe-b20d-4db7-ac8b-e85248e09eea',1,'Java8',299,27104,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println(a+b);\n    }\n}','2019-04-22 00:37:24','2019-04-22 00:37:26'),(287,1,1000,NULL,0,'46b89797-5ad5-4ae0-84a1-b549551dc288',3,'Java8',232,26852,NULL,'import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner cin=new Scanner(System.in);\n        int a = cin.nextInt(), b = cin.nextInt();\n        System.out.println();\n        System.out.println(a+b);\n    }\n}','2019-04-22 00:37:50','2019-04-22 00:37:51');
/*!40000 ALTER TABLE `problem_result` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `problem_tag`
--

DROP TABLE IF EXISTS `problem_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `problem_tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `problem_id` int(11) DEFAULT NULL,
  `tag_id` int(11) DEFAULT NULL,
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
<<<<<<< HEAD
) ENGINE=InnoDB AUTO_INCREMENT=148 DEFAULT CHARSET=utf8;
=======
) ENGINE=InnoDB AUTO_INCREMENT=129 DEFAULT CHARSET=utf8;
>>>>>>> 11c2e33... 0816
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `problem_tag`
--

LOCK TABLES `problem_tag` WRITE;
/*!40000 ALTER TABLE `problem_tag` DISABLE KEYS */;
<<<<<<< HEAD
INSERT INTO `problem_tag` VALUES (4,1002,26,'2019-02-14 00:02:10','2020-08-05 09:42:26'),(5,1003,5,'2019-02-14 00:02:10','2020-08-05 09:43:47'),(6,1004,5,'2019-02-14 00:02:10','2020-08-05 09:47:05'),(7,1005,5,'2019-02-14 00:02:10','2020-08-05 09:51:44'),(8,1006,5,'2019-02-14 00:02:10','2020-08-05 09:54:36'),(9,1007,26,'2019-02-14 00:02:10','2020-08-05 09:56:44'),(10,1008,33,'2019-03-25 00:04:13','2020-08-05 10:00:09'),(11,1009,4,'2019-03-25 00:04:13','2020-08-05 10:01:18'),(12,1010,8,'2019-03-25 00:04:13','2020-08-05 10:02:28'),(13,1011,4,'2019-03-25 00:04:13','2020-08-05 10:17:22'),(14,1012,33,'2019-03-25 00:04:13','2020-08-05 10:18:08'),(15,1013,33,'2019-03-25 00:04:13','2020-08-05 10:19:24'),(16,1014,32,'2019-03-25 00:04:13','2020-08-05 10:21:16'),(17,1015,26,'2019-03-25 00:04:13','2020-08-05 10:22:53'),(18,1016,27,'2019-03-25 00:04:13','2020-08-05 10:25:11'),(19,1017,13,'2019-03-25 00:04:13','2019-03-25 00:05:14'),(20,1018,9,'2019-03-25 00:04:13','2019-03-25 00:04:13'),(21,1019,10,'2019-03-25 00:04:13','2019-03-25 00:04:13'),(22,1020,27,'2019-03-25 00:04:13','2020-08-05 10:29:22'),(23,1021,11,'2019-03-25 00:04:13','2020-08-05 10:29:22'),(24,1022,33,'2019-03-25 00:04:13','2020-08-05 10:31:11'),(25,1023,9,'2019-03-25 00:04:13','2020-08-05 10:31:11'),(26,1024,27,'2019-03-25 00:07:26','2020-08-05 10:31:11'),(27,1025,22,'2019-03-25 00:07:26','2019-03-25 00:07:26'),(28,1026,23,'2019-03-25 00:07:26','2019-03-25 00:07:26'),(29,1027,8,'2019-03-25 00:07:26','2020-08-05 10:32:43'),(30,1028,8,'2019-03-25 00:07:26','2020-08-05 10:33:21'),(31,1029,5,'2019-03-25 00:07:26','2020-08-05 10:33:59'),(32,1030,33,'2019-03-25 00:07:26','2020-08-05 10:35:07'),(33,1031,26,'2019-03-25 00:07:26','2020-08-05 10:35:59'),(34,1038,2,'2019-05-08 18:24:56','2019-05-08 18:24:56'),(35,1038,5,'2019-05-08 18:24:56','2019-05-08 18:24:56'),(36,1039,5,'2019-05-08 18:29:31','2019-05-08 18:29:31'),(37,1039,6,'2019-05-08 18:29:31','2019-05-08 18:29:31'),(38,1039,7,'2019-05-08 18:29:31','2019-05-08 18:29:31'),(39,1040,7,'2019-05-08 18:38:49','2019-05-08 18:38:49'),(40,1040,13,'2019-05-08 18:38:49','2019-05-08 18:38:49'),(41,1041,8,'2019-05-08 18:39:45','2019-05-08 18:39:45'),(42,1041,10,'2019-05-08 18:39:45','2019-05-08 18:39:45'),(111,1001,26,'2019-05-09 01:56:00','2020-08-05 09:40:06'),(112,1001,32,'2019-05-09 01:56:00','2020-08-05 09:40:06'),(117,1042,2,'2019-05-09 16:48:44','2019-05-09 16:48:44'),(118,1042,5,'2019-05-09 16:48:44','2019-05-09 16:48:44'),(119,1042,7,'2019-05-09 16:48:44','2019-05-09 16:48:44'),(126,1000,26,'2019-05-09 16:56:20','2020-08-05 09:38:56'),(128,1043,7,'2019-05-09 16:58:50','2019-05-09 16:58:50'),(129,1002,27,'2020-08-05 09:26:50','2020-08-05 09:28:50'),(130,1004,28,'2020-08-05 09:26:50','2020-08-05 09:28:50'),(131,1004,29,'2020-08-05 09:26:50','2020-08-05 09:28:50'),(132,1005,30,'2020-08-05 09:26:50','2020-08-05 09:28:50'),(133,1005,31,'2020-08-05 09:26:50','2020-08-05 09:28:50'),(134,1006,29,'2020-08-05 09:26:50','2020-08-05 09:28:50'),(135,1007,27,'2020-08-05 09:26:50','2020-08-05 09:28:50'),(136,1008,30,'2020-08-05 09:26:50','2020-08-05 09:28:50'),(137,1009,31,'2020-08-05 09:26:50','2020-08-05 09:28:50'),(138,1010,35,'2020-08-05 09:26:50','2020-08-05 09:28:50'),(139,1012,34,'2020-08-05 09:26:50','2020-08-05 09:28:50'),(140,1013,36,'2020-08-05 09:26:50','2020-08-05 09:28:50'),(141,1014,28,'2020-08-05 09:26:50','2020-08-05 09:28:50'),(142,1015,8,'2020-08-05 09:26:50','2020-08-05 09:28:50'),(143,1016,36,'2020-08-05 10:25:11','2020-08-05 10:25:11'),(144,1016,33,'2020-08-05 10:25:46','2020-08-05 10:25:46'),(145,1032,28,'2020-08-05 10:38:13','2020-08-05 10:38:13'),(146,1034,8,'2020-08-05 10:40:09','2020-08-05 10:40:09'),(147,1034,35,'2020-08-05 10:40:09','2020-08-05 10:40:09');
=======
INSERT INTO `problem_tag` VALUES (4,1002,18,'2019-02-14 00:02:10','2019-02-14 00:02:10'),(5,1003,19,'2019-02-14 00:02:10','2019-02-14 00:02:10'),(6,1004,14,'2019-02-14 00:02:10','2019-02-14 00:02:10'),(7,1005,10,'2019-02-14 00:02:10','2019-02-14 00:02:10'),(8,1006,2,'2019-02-14 00:02:10','2019-02-14 00:02:10'),(9,1007,5,'2019-02-14 00:02:10','2019-02-14 00:02:10'),(10,1008,1,'2019-03-25 00:04:13','2019-03-25 00:04:13'),(11,1009,20,'2019-03-25 00:04:13','2019-03-25 00:05:02'),(12,1010,2,'2019-03-25 00:04:13','2019-03-25 00:04:13'),(13,1011,6,'2019-03-25 00:04:13','2019-03-25 00:04:13'),(14,1012,5,'2019-03-25 00:04:13','2019-03-25 00:04:13'),(15,1013,7,'2019-03-25 00:04:13','2019-03-25 00:04:13'),(16,1014,8,'2019-03-25 00:04:13','2019-03-25 00:04:13'),(17,1015,11,'2019-03-25 00:04:13','2019-03-25 00:04:13'),(18,1016,15,'2019-03-25 00:04:13','2019-03-25 00:04:13'),(19,1017,13,'2019-03-25 00:04:13','2019-03-25 00:05:14'),(20,1018,9,'2019-03-25 00:04:13','2019-03-25 00:04:13'),(21,1019,10,'2019-03-25 00:04:13','2019-03-25 00:04:13'),(22,1020,4,'2019-03-25 00:04:13','2019-03-25 00:04:13'),(23,1021,8,'2019-03-25 00:04:13','2019-03-25 00:04:13'),(24,1022,6,'2019-03-25 00:04:13','2019-03-25 00:04:13'),(25,1023,14,'2019-03-25 00:04:13','2019-03-25 00:04:13'),(26,1024,21,'2019-03-25 00:07:26','2019-03-25 00:07:26'),(27,1025,22,'2019-03-25 00:07:26','2019-03-25 00:07:26'),(28,1026,23,'2019-03-25 00:07:26','2019-03-25 00:07:26'),(29,1027,24,'2019-03-25 00:07:26','2019-03-25 00:07:26'),(30,1028,15,'2019-03-25 00:07:26','2019-03-25 00:07:26'),(31,1029,17,'2019-03-25 00:07:26','2019-03-25 00:07:26'),(32,1030,10,'2019-03-25 00:07:26','2019-03-25 00:07:26'),(33,1031,18,'2019-03-25 00:07:26','2019-03-25 00:07:26'),(34,1038,2,'2019-05-08 18:24:56','2019-05-08 18:24:56'),(35,1038,5,'2019-05-08 18:24:56','2019-05-08 18:24:56'),(36,1039,5,'2019-05-08 18:29:31','2019-05-08 18:29:31'),(37,1039,6,'2019-05-08 18:29:31','2019-05-08 18:29:31'),(38,1039,7,'2019-05-08 18:29:31','2019-05-08 18:29:31'),(39,1040,7,'2019-05-08 18:38:49','2019-05-08 18:38:49'),(40,1040,13,'2019-05-08 18:38:49','2019-05-08 18:38:49'),(41,1041,8,'2019-05-08 18:39:45','2019-05-08 18:39:45'),(42,1041,10,'2019-05-08 18:39:45','2019-05-08 18:39:45'),(111,1001,17,'2019-05-09 01:56:00','2019-05-09 01:56:00'),(112,1001,18,'2019-05-09 01:56:00','2019-05-09 01:56:00'),(113,1001,19,'2019-05-09 01:56:00','2019-05-09 01:56:00'),(117,1042,2,'2019-05-09 16:48:44','2019-05-09 16:48:44'),(118,1042,5,'2019-05-09 16:48:44','2019-05-09 16:48:44'),(119,1042,7,'2019-05-09 16:48:44','2019-05-09 16:48:44'),(126,1000,15,'2019-05-09 16:56:20','2019-05-09 16:56:20'),(128,1043,7,'2019-05-09 16:58:50','2019-05-09 16:58:50');
>>>>>>> 11c2e33... 0816
/*!40000 ALTER TABLE `problem_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `register`
--

DROP TABLE IF EXISTS `register`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `register` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `comp_id` int(11) DEFAULT NULL COMMENT '比赛id',
  `solution_count` int(11) DEFAULT '0' COMMENT '解决题目数',
  `submit_count` int(11) DEFAULT '0' COMMENT '提交数',
  `ac_count` int(11) DEFAULT '0' COMMENT 'ac数目',
  `score` int(11) DEFAULT '0' COMMENT '总分',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `register`
--

LOCK TABLES `register` WRITE;
/*!40000 ALTER TABLE `register` DISABLE KEYS */;
INSERT INTO `register` VALUES (23,1,1,1,21,2,15,'2019-02-16 22:42:44','2019-03-16 23:56:10'),(24,1,2,1,3,3,10,'2019-03-25 01:03:34','2019-03-25 01:05:43'),(25,1,9,0,0,0,0,'2019-05-04 01:20:18','2019-05-04 01:20:18');
/*!40000 ALTER TABLE `register` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `role`
--

DROP TABLE IF EXISTS `role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `role` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(20) DEFAULT NULL COMMENT '角色名称',
  `remark` varchar(100) DEFAULT NULL COMMENT '备注',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `role`
--

LOCK TABLES `role` WRITE;
/*!40000 ALTER TABLE `role` DISABLE KEYS */;
INSERT INTO `role` VALUES (1,'ROLE_ADMIN','管理员','2019-02-18 20:29:16','2019-03-22 16:44:18'),(2,'ROLE_USER','普通用户','2019-02-18 20:29:16','2019-03-22 16:44:18');
/*!40000 ALTER TABLE `role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sign`
--

DROP TABLE IF EXISTS `sign`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `sign` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `mood` varchar(500) DEFAULT NULL COMMENT '此刻心情',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sign`
--

LOCK TABLES `sign` WRITE;
/*!40000 ALTER TABLE `sign` DISABLE KEYS */;
/*!40000 ALTER TABLE `sign` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `system_config`
--

DROP TABLE IF EXISTS `system_config`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `system_config` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `sys_key` varchar(64) DEFAULT NULL,
  `sys_value1` varchar(100) DEFAULT NULL,
  `sys_value2` varchar(100) DEFAULT NULL,
  `content` varchar(50) DEFAULT NULL COMMENT '备注',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `system_config_sys_key_uindex` (`sys_key`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `system_config`
--

LOCK TABLES `system_config` WRITE;
/*!40000 ALTER TABLE `system_config` DISABLE KEYS */;
INSERT INTO `system_config` VALUES (1,'file_dir','/home/ming/Music',NULL,'题目目录','2018-12-18 09:56:32','2018-12-18 10:03:30');
/*!40000 ALTER TABLE `system_config` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tag`
--

DROP TABLE IF EXISTS `tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `parent_id` int(11) DEFAULT '0' COMMENT '父标签',
  `name` varchar(50) DEFAULT NULL COMMENT '标签名称',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
<<<<<<< HEAD
) ENGINE=InnoDB AUTO_INCREMENT=39 DEFAULT CHARSET=utf8;
=======
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;
>>>>>>> 11c2e33... 0816
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tag`
--

LOCK TABLES `tag` WRITE;
/*!40000 ALTER TABLE `tag` DISABLE KEYS */;
<<<<<<< HEAD
INSERT INTO `tag` VALUES (1,0,'程序设计入门','2018-12-17 17:17:09','2019-02-13 21:19:00'),(2,0,'基础算法','2018-12-17 17:17:17','2019-02-13 21:19:00'),(4,0,'搜索算法','2018-12-23 19:02:28','2019-02-13 21:19:00'),(5,0,'动态规划','2018-12-23 19:02:28','2019-02-13 21:19:00'),(6,0,'基础数据结构','2018-12-23 19:02:28','2019-02-13 21:19:00'),(7,0,'高级数据结构','2018-12-23 19:02:28','2019-02-13 21:19:00'),(8,0,'字符串','2018-12-23 19:16:00','2019-02-13 21:19:00'),(9,0,'图论','2018-12-23 19:16:00','2019-02-13 21:19:00'),(10,0,'组合数学','2018-12-23 19:16:00','2019-02-13 21:19:00'),(11,0,'计算几何','2019-02-13 21:19:00','2019-02-13 21:19:00'),(13,0,'模板题','2019-02-13 21:19:00','2019-02-13 21:19:00'),(14,0,'其他算法','2019-02-13 21:19:00','2019-02-13 21:19:00'),(15,1,'输入和输出','2019-02-13 22:58:40','2019-02-13 22:59:57'),(16,1,'变量及其输入','2019-02-13 22:59:57','2019-02-13 22:59:57'),(17,1,'循环','2019-02-13 22:59:57','2019-02-13 23:00:13'),(18,1,'条件分支','2019-02-13 22:59:57','2019-02-13 23:00:13'),(19,1,'数学函数','2019-02-13 22:59:57','2019-02-13 23:00:13'),(20,1,'结构体','2019-02-13 22:59:57','2019-02-13 23:00:13'),(21,4,'深度优先搜索','2019-02-13 23:04:26','2019-02-13 23:04:52'),(22,4,'广度优先搜索','2019-02-13 23:04:26','2019-02-13 23:04:52'),(23,4,'搜索减枝','2019-02-13 23:04:26','2019-02-13 23:04:52'),(24,4,'A* 搜索','2019-02-13 23:04:26','2019-02-13 23:04:52'),(25,4,'启发式搜索','2019-02-13 23:04:26','2019-02-13 23:04:52'),(26,1,'模拟','2020-08-05 09:26:50','2020-08-05 09:28:50'),(27,1,'枚举','2020-08-05 09:26:50','2020-08-05 09:28:50'),(28,2,'递归','2020-08-05 09:26:50','2020-08-05 09:28:50'),(29,5,'费用流','2020-08-05 09:26:50','2020-08-05 09:28:50'),(30,13,'高精','2020-08-05 09:26:50','2020-08-05 09:28:50'),(31,10,'进制','2020-08-05 09:26:50','2020-08-05 09:28:50'),(32,13,'贪心','2020-08-05 09:26:50','2020-08-05 09:28:50'),(33,10,'数论，数学','2020-08-05 09:26:50','2020-08-05 09:28:50'),(34,10,'斐波那契','2020-08-05 09:26:50','2020-08-05 09:28:50'),(35,2,'排序','2020-08-05 09:26:50','2020-08-05 09:28:50'),(36,5,'分治','2020-08-05 09:26:50','2020-08-05 09:28:50'),(37,6,'二分查找','2020-08-05 09:26:50','2020-08-05 09:28:50'),(38,6,'剪枝','2020-08-05 09:26:50','2020-08-05 09:28:50');
=======
INSERT INTO `tag` VALUES (1,0,'程序设计入门','2018-12-17 17:17:09','2019-02-13 21:19:00'),(2,0,'基础算法','2018-12-17 17:17:17','2019-02-13 21:19:00'),(4,0,'搜索算法','2018-12-23 19:02:28','2019-02-13 21:19:00'),(5,0,'动态规划','2018-12-23 19:02:28','2019-02-13 21:19:00'),(6,0,'基础数据结构','2018-12-23 19:02:28','2019-02-13 21:19:00'),(7,0,'高级数据结构','2018-12-23 19:02:28','2019-02-13 21:19:00'),(8,0,'字符串','2018-12-23 19:16:00','2019-02-13 21:19:00'),(9,0,'图论','2018-12-23 19:16:00','2019-02-13 21:19:00'),(10,0,'组合数学','2018-12-23 19:16:00','2019-02-13 21:19:00'),(11,0,'计算几何','2019-02-13 21:19:00','2019-02-13 21:19:00'),(13,0,'模板题','2019-02-13 21:19:00','2019-02-13 21:19:00'),(14,0,'其他算法','2019-02-13 21:19:00','2019-02-13 21:19:00'),(15,1,'输入和输出','2019-02-13 22:58:40','2019-02-13 22:59:57'),(16,1,'变量及其输入','2019-02-13 22:59:57','2019-02-13 22:59:57'),(17,1,'循环','2019-02-13 22:59:57','2019-02-13 23:00:13'),(18,1,'条件分支','2019-02-13 22:59:57','2019-02-13 23:00:13'),(19,1,'数学函数','2019-02-13 22:59:57','2019-02-13 23:00:13'),(20,1,'结构体','2019-02-13 22:59:57','2019-02-13 23:00:13'),(21,4,'深度优先搜索','2019-02-13 23:04:26','2019-02-13 23:04:52'),(22,4,'广度优先搜索','2019-02-13 23:04:26','2019-02-13 23:04:52'),(23,4,'搜索减枝','2019-02-13 23:04:26','2019-02-13 23:04:52'),(24,4,'A* 搜索','2019-02-13 23:04:26','2019-02-13 23:04:52'),(25,4,'启发式搜索','2019-02-13 23:04:26','2019-02-13 23:04:52');
>>>>>>> 11c2e33... 0816
/*!40000 ALTER TABLE `tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `testcase_result`
--

DROP TABLE IF EXISTS `testcase_result`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `testcase_result` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pro_re_id` int(11) DEFAULT NULL COMMENT '题目结果id',
  `num` int(11) DEFAULT NULL COMMENT '用例编码',
  `user_output` varchar(2000) DEFAULT NULL COMMENT '用户输出',
  `time` bigint(20) DEFAULT NULL,
  `memory` bigint(20) DEFAULT NULL,
  `status` int(11) DEFAULT NULL COMMENT '1 ac 2 ce 3 pe 4 re 5 tle 6 me 7 wa',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1289 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `testcase_result`
--

LOCK TABLES `testcase_result` WRITE;
/*!40000 ALTER TABLE `testcase_result` DISABLE KEYS */;
INSERT INTO `testcase_result` VALUES (839,182,1,'101\n',198,27036,1,'2019-03-16 23:01:18','2019-03-16 23:01:18'),(840,182,2,'7\n',192,27092,1,'2019-03-16 23:01:18','2019-03-16 23:01:18'),(841,182,3,'11\n',211,26704,1,'2019-03-16 23:01:18','2019-03-16 23:01:18'),(842,182,4,'15\n',187,26652,1,'2019-03-16 23:01:18','2019-03-16 23:01:18'),(843,182,5,'21\n',179,26208,1,'2019-03-16 23:01:18','2019-03-16 23:01:18'),(844,183,1,'101\n',156,26804,1,'2019-03-16 23:01:29','2019-03-16 23:01:29'),(845,183,2,'7\n',167,26824,1,'2019-03-16 23:01:29','2019-03-16 23:01:29'),(846,183,3,'11\n',170,26584,1,'2019-03-16 23:01:29','2019-03-16 23:01:29'),(847,183,4,'15\n',194,26756,1,'2019-03-16 23:01:29','2019-03-16 23:01:29'),(848,183,5,'21\n',186,26628,1,'2019-03-16 23:01:29','2019-03-16 23:01:29'),(849,184,1,NULL,NULL,NULL,4,'2019-03-16 23:02:07','2019-03-16 23:02:06'),(850,185,1,NULL,NULL,NULL,4,'2019-03-16 23:02:26','2019-03-16 23:02:25'),(851,186,1,NULL,NULL,NULL,4,'2019-03-16 23:04:22','2019-03-16 23:04:21'),(852,187,1,NULL,NULL,NULL,4,'2019-03-16 23:05:28','2019-03-16 23:05:28'),(853,187,2,NULL,NULL,NULL,4,'2019-03-16 23:05:28','2019-03-16 23:05:28'),(854,189,1,NULL,NULL,NULL,4,'2019-03-16 23:07:32','2019-03-16 23:07:31'),(855,189,2,NULL,NULL,NULL,4,'2019-03-16 23:07:32','2019-03-16 23:07:31'),(856,190,1,'123\n',80,24136,7,'2019-03-16 23:08:13','2019-03-16 23:08:12'),(857,190,2,'123\n',76,24336,1,'2019-03-16 23:08:13','2019-03-16 23:08:12'),(858,191,1,'123\n',75,24260,7,'2019-03-16 23:17:07','2019-03-16 23:17:06'),(859,191,2,'123\n',73,24416,1,'2019-03-16 23:17:07','2019-03-16 23:17:06'),(860,192,1,'Exception in thread \"main\" java.util.InputMismatchException\n	at java.util.Scanner.throwFor(Scanner.java:864)\n	at java.util.Scanner.next(Scanner.java:1485)\n	at java.util.Scanner.nextInt(Scanner.java:2117)\n	at java.util.Scanner.nextInt(Scanner.java:2076)\n	at Main.main(Main.java:6)\n',113,26380,4,'2019-03-16 23:18:36','2019-03-16 23:18:36'),(861,192,2,'Exception in thread \"main\" java.util.NoSuchElementException\n	at java.util.Scanner.throwFor(Scanner.java:862)\n	at java.util.Scanner.next(Scanner.java:1485)\n	at java.util.Scanner.nextInt(Scanner.java:2117)\n	at java.util.Scanner.nextInt(Scanner.java:2076)\n	at Main.main(Main.java:6)\n',119,26868,4,'2019-03-16 23:18:36','2019-03-16 23:18:36'),(862,193,1,'123\n',77,24148,7,'2019-03-16 23:18:48','2019-03-16 23:18:48'),(863,193,2,'123\n',71,24276,1,'2019-03-16 23:18:48','2019-03-16 23:18:48'),(864,194,1,'Exception in thread \"main\" java.util.InputMismatchException\n	at java.util.Scanner.throwFor(Scanner.java:864)\n	at java.util.Scanner.next(Scanner.java:1485)\n	at java.util.Scanner.nextInt(Scanner.java:2117)\n	at java.util.Scanner.nextInt(Scanner.java:2076)\n	at Main.main(Main.java:6)\n',122,26864,4,'2019-03-16 23:19:25','2019-03-16 23:19:25'),(865,194,2,'Exception in thread \"main\" java.util.NoSuchElementException\n	at java.util.Scanner.throwFor(Scanner.java:862)\n	at java.util.Scanner.next(Scanner.java:1485)\n	at java.util.Scanner.nextInt(Scanner.java:2117)\n	at java.util.Scanner.nextInt(Scanner.java:2076)\n	at Main.main(Main.java:6)\n',132,26448,4,'2019-03-16 23:19:25','2019-03-16 23:19:25'),(866,195,1,'Exception in thread \"main\" java.util.InputMismatchException\n	at java.util.Scanner.throwFor(Scanner.java:864)\n	at java.util.Scanner.next(Scanner.java:1485)\n	at java.util.Scanner.nextInt(Scanner.java:2117)\n	at java.util.Scanner.nextInt(Scanner.java:2076)\n	at Main.main(Main.java:6)\n',132,26700,4,'2019-03-16 23:19:26','2019-03-16 23:19:26'),(867,195,2,'Exception in thread \"main\" java.util.NoSuchElementException\n	at java.util.Scanner.throwFor(Scanner.java:862)\n	at java.util.Scanner.next(Scanner.java:1485)\n	at java.util.Scanner.nextInt(Scanner.java:2117)\n	at java.util.Scanner.nextInt(Scanner.java:2076)\n	at Main.main(Main.java:6)\n',137,26284,4,'2019-03-16 23:19:26','2019-03-16 23:19:26'),(868,196,1,'Exception in thread \"main\" java.util.InputMismatchException\n	at java.util.Scanner.throwFor(Scanner.java:864)\n	at java.util.Scanner.next(Scanner.java:1485)\n	at java.util.Scanner.nextInt(Scanner.java:2117)\n	at java.util.Scanner.nextInt(Scanner.java:2076)\n	at Main.main(Main.java:6)\n',138,26956,4,'2019-03-16 23:19:27','2019-03-16 23:19:26'),(869,196,2,'Exception in thread \"main\" java.util.NoSuchElementException\n	at java.util.Scanner.throwFor(Scanner.java:862)\n	at java.util.Scanner.next(Scanner.java:1485)\n	at java.util.Scanner.nextInt(Scanner.java:2117)\n	at java.util.Scanner.nextInt(Scanner.java:2076)\n	at Main.main(Main.java:6)\n',137,26596,4,'2019-03-16 23:19:27','2019-03-16 23:19:26'),(870,197,1,'Exception in thread \"main\" java.util.InputMismatchException\n	at java.util.Scanner.throwFor(Scanner.java:864)\n	at java.util.Scanner.next(Scanner.java:1485)\n	at java.util.Scanner.nextInt(Scanner.java:2117)\n	at java.util.Scanner.nextInt(Scanner.java:2076)\n	at Main.main(Main.java:6)\n',153,25936,4,'2019-03-16 23:19:27','2019-03-16 23:19:27'),(871,197,2,'Exception in thread \"main\" java.util.NoSuchElementException\n	at java.util.Scanner.throwFor(Scanner.java:862)\n	at java.util.Scanner.next(Scanner.java:1485)\n	at java.util.Scanner.nextInt(Scanner.java:2117)\n	at java.util.Scanner.nextInt(Scanner.java:2076)\n	at Main.main(Main.java:6)\n',126,26548,4,'2019-03-16 23:19:27','2019-03-16 23:19:27'),(872,198,1,'Exception in thread \"main\" java.util.InputMismatchException\n	at java.util.Scanner.throwFor(Scanner.java:864)\n	at java.util.Scanner.next(Scanner.java:1485)\n	at java.util.Scanner.nextInt(Scanner.java:2117)\n	at java.util.Scanner.nextInt(Scanner.java:2076)\n	at Main.main(Main.java:6)\n',119,26492,4,'2019-03-16 23:19:28','2019-03-16 23:19:28'),(873,198,2,'Exception in thread \"main\" java.util.NoSuchElementException\n	at java.util.Scanner.throwFor(Scanner.java:862)\n	at java.util.Scanner.next(Scanner.java:1485)\n	at java.util.Scanner.nextInt(Scanner.java:2117)\n	at java.util.Scanner.nextInt(Scanner.java:2076)\n	at Main.main(Main.java:6)\n',119,26700,4,'2019-03-16 23:19:28','2019-03-16 23:19:28'),(874,199,1,'101\n',196,26804,1,'2019-03-16 23:49:34','2019-03-16 23:49:34'),(875,199,2,'7\n',181,26824,1,'2019-03-16 23:49:34','2019-03-16 23:49:34'),(876,199,3,'11\n',200,27020,1,'2019-03-16 23:49:34','2019-03-16 23:49:34'),(877,199,4,'15\n',200,26928,1,'2019-03-16 23:49:34','2019-03-16 23:49:34'),(878,199,5,'21\n',182,27008,1,'2019-03-16 23:49:34','2019-03-16 23:49:34'),(879,200,1,'101\n',256,26848,1,'2019-03-16 23:49:38','2019-03-16 23:49:38'),(880,200,2,'7\n',240,27012,1,'2019-03-16 23:49:38','2019-03-16 23:49:38'),(881,200,3,'11\n',213,26924,1,'2019-03-16 23:49:38','2019-03-16 23:49:38'),(882,200,4,'15\n',261,26412,1,'2019-03-16 23:49:38','2019-03-16 23:49:38'),(883,200,5,'21\n',229,26820,1,'2019-03-16 23:49:38','2019-03-16 23:49:38'),(884,201,1,'101\n',208,26728,1,'2019-03-16 23:49:39','2019-03-16 23:49:39'),(885,201,2,'7\n',222,26676,1,'2019-03-16 23:49:39','2019-03-16 23:49:39'),(886,201,3,'11\n',198,26600,1,'2019-03-16 23:49:39','2019-03-16 23:49:39'),(887,201,4,'15\n',206,26804,1,'2019-03-16 23:49:39','2019-03-16 23:49:39'),(888,201,5,'21\n',205,26788,1,'2019-03-16 23:49:39','2019-03-16 23:49:39'),(889,202,1,'101\n',175,26632,1,'2019-03-16 23:51:15','2019-03-16 23:51:46'),(890,202,2,'7\n',191,26764,1,'2019-03-16 23:51:15','2019-03-16 23:51:46'),(891,202,3,'11\n',167,26952,1,'2019-03-16 23:51:15','2019-03-16 23:51:46'),(892,202,4,'15\n',183,26468,1,'2019-03-16 23:51:15','2019-03-16 23:51:46'),(893,202,5,'21\n',189,26632,1,'2019-03-16 23:51:15','2019-03-16 23:51:46'),(894,203,1,'101\n',200,26604,1,'2019-03-16 23:51:56','2019-03-16 23:53:52'),(895,203,2,'7\n',168,26884,1,'2019-03-16 23:51:56','2019-03-16 23:53:52'),(896,203,3,'11\n',186,26884,1,'2019-03-16 23:51:56','2019-03-16 23:53:52'),(897,203,4,'15\n',180,26300,1,'2019-03-16 23:51:56','2019-03-16 23:53:52'),(898,203,5,'21\n',185,26992,1,'2019-03-16 23:51:56','2019-03-16 23:53:52'),(899,204,1,'101\n',208,26444,1,'2019-03-16 23:54:26','2019-03-16 23:55:36'),(900,204,2,'7\n',189,26852,1,'2019-03-16 23:54:26','2019-03-16 23:55:36'),(901,204,3,'11\n',197,26764,1,'2019-03-16 23:54:26','2019-03-16 23:55:36'),(902,204,4,'15\n',177,26684,1,'2019-03-16 23:54:26','2019-03-16 23:55:36'),(903,204,5,'21\n',154,26948,1,'2019-03-16 23:54:26','2019-03-16 23:55:36'),(904,204,1,'101\n',232,27052,1,'2019-03-16 23:55:45','2019-03-16 23:55:52'),(905,204,2,'7\n',235,26800,1,'2019-03-16 23:55:45','2019-03-16 23:55:52'),(906,204,3,'11\n',198,26548,1,'2019-03-16 23:55:45','2019-03-16 23:55:52'),(907,204,4,'15\n',229,26948,1,'2019-03-16 23:55:45','2019-03-16 23:55:52'),(908,204,5,'21\n',227,27048,1,'2019-03-16 23:55:45','2019-03-16 23:55:52'),(909,205,1,'101\n',231,26668,1,'2019-03-16 23:56:10','2019-03-16 23:56:10'),(910,205,2,'7\n',203,26492,1,'2019-03-16 23:56:10','2019-03-16 23:56:10'),(911,205,3,'11\n',249,27092,1,'2019-03-16 23:56:10','2019-03-16 23:56:10'),(912,205,4,'15\n',207,27112,1,'2019-03-16 23:56:10','2019-03-16 23:56:10'),(913,205,5,'21\n',230,26992,1,'2019-03-16 23:56:10','2019-03-16 23:56:10'),(914,206,1,'101\n',194,26844,1,'2019-03-25 00:33:57','2019-03-25 00:33:57'),(915,206,2,'7\n',279,26844,1,'2019-03-25 00:33:57','2019-03-25 00:33:57'),(916,206,3,'11\n',253,26912,1,'2019-03-25 00:33:57','2019-03-25 00:33:57'),(917,206,4,'15\n',203,27176,1,'2019-03-25 00:33:57','2019-03-25 00:33:57'),(918,206,5,'21\n',294,27116,1,'2019-03-25 00:33:57','2019-03-25 00:33:57'),(919,207,1,'101\n',210,27136,1,'2019-03-25 00:39:37','2019-03-25 00:39:36'),(920,207,2,'7\n',210,27012,1,'2019-03-25 00:39:37','2019-03-25 00:39:36'),(921,207,3,'11\n',197,26736,1,'2019-03-25 00:39:37','2019-03-25 00:39:36'),(922,207,4,'15\n',233,26696,1,'2019-03-25 00:39:37','2019-03-25 00:39:36'),(923,207,5,'21\n',187,26732,1,'2019-03-25 00:39:37','2019-03-25 00:39:36'),(924,208,1,'101',0,0,1,'2019-03-25 00:42:49','2019-03-25 00:42:49'),(925,208,2,'7',0,0,1,'2019-03-25 00:42:49','2019-03-25 00:42:49'),(926,208,3,'11',0,0,1,'2019-03-25 00:42:49','2019-03-25 00:42:49'),(927,208,4,'15',0,0,1,'2019-03-25 00:42:49','2019-03-25 00:42:49'),(928,208,5,'21',0,0,1,'2019-03-25 00:42:49','2019-03-25 00:42:49'),(929,209,1,'101',0,0,1,'2019-03-25 00:43:24','2019-03-25 00:43:23'),(930,209,2,'7',0,0,1,'2019-03-25 00:43:24','2019-03-25 00:43:23'),(931,209,3,'11',0,0,1,'2019-03-25 00:43:24','2019-03-25 00:43:23'),(932,209,4,'15',0,0,1,'2019-03-25 00:43:24','2019-03-25 00:43:23'),(933,209,5,'21',0,0,1,'2019-03-25 00:43:24','2019-03-25 00:43:23'),(934,210,1,'123\n',67,24216,1,'2019-03-25 00:44:56','2019-03-25 00:44:56'),(935,211,1,'Exception in thread \"main\" java.util.InputMismatchException\n	at java.util.Scanner.throwFor(Scanner.java:864)\n	at java.util.Scanner.next(Scanner.java:1485)\n	at java.util.Scanner.nextInt(Scanner.java:2117)\n	at java.util.Scanner.nextInt(Scanner.java:2076)\n	at Main.main(Main.java:6)\n',108,26688,4,'2019-03-25 00:45:43','2019-03-25 00:45:43'),(936,212,1,'123\n',67,23912,1,'2019-03-25 00:45:50','2019-03-25 00:45:49'),(937,213,1,NULL,NULL,NULL,4,'2019-03-25 00:46:23','2019-03-25 00:46:23'),(938,213,2,NULL,NULL,NULL,4,'2019-03-25 00:46:23','2019-03-25 00:46:23'),(939,214,1,'101\n',195,26624,1,'2019-03-25 01:05:36','2019-03-25 01:05:36'),(940,214,2,'7\n',196,26688,1,'2019-03-25 01:05:36','2019-03-25 01:05:36'),(941,214,3,'11\n',193,26636,1,'2019-03-25 01:05:36','2019-03-25 01:05:36'),(942,214,4,'15\n',195,26792,1,'2019-03-25 01:05:36','2019-03-25 01:05:36'),(943,214,5,'21\n',197,26728,1,'2019-03-25 01:05:36','2019-03-25 01:05:36'),(944,215,1,'101\n',246,26668,1,'2019-03-25 01:05:42','2019-03-25 01:05:42'),(945,215,2,'7\n',256,27052,1,'2019-03-25 01:05:42','2019-03-25 01:05:42'),(946,215,3,'11\n',225,26800,1,'2019-03-25 01:05:42','2019-03-25 01:05:42'),(947,215,4,'15\n',198,26736,1,'2019-03-25 01:05:42','2019-03-25 01:05:42'),(948,215,5,'21\n',221,26920,1,'2019-03-25 01:05:42','2019-03-25 01:05:42'),(949,216,1,'101\n',279,26892,1,'2019-03-25 01:05:43','2019-03-25 01:05:43'),(950,216,2,'7\n',287,27212,1,'2019-03-25 01:05:43','2019-03-25 01:05:43'),(951,216,3,'11\n',311,27120,1,'2019-03-25 01:05:43','2019-03-25 01:05:43'),(952,216,4,'15\n',207,27092,1,'2019-03-25 01:05:43','2019-03-25 01:05:43'),(953,216,5,'21\n',284,26760,1,'2019-03-25 01:05:43','2019-03-25 01:05:43'),(954,217,1,'101\n',1,0,1,'2019-03-29 00:24:29','2019-03-29 00:24:29'),(955,217,2,'7\n',3,7128,1,'2019-03-29 00:24:29','2019-03-29 00:24:29'),(956,217,3,'11\n',2,0,1,'2019-03-29 00:24:29','2019-03-29 00:24:29'),(957,217,4,'15\n',0,0,1,'2019-03-29 00:24:29','2019-03-29 00:24:29'),(958,217,5,'21\n',0,0,1,'2019-03-29 00:24:29','2019-03-29 00:24:29'),(959,218,1,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790311375\'\n',11,0,4,'2019-03-29 00:25:11','2019-03-29 00:25:11'),(960,218,2,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790311375\'\n',3,0,4,'2019-03-29 00:25:11','2019-03-29 00:25:11'),(961,218,3,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790311375\'\n',0,0,4,'2019-03-29 00:25:11','2019-03-29 00:25:11'),(962,218,4,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790311375\'\n',39,0,4,'2019-03-29 00:25:11','2019-03-29 00:25:11'),(963,218,5,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790311375\'\n',4,0,4,'2019-03-29 00:25:11','2019-03-29 00:25:11'),(964,219,1,'101\n',294,26716,1,'2019-03-29 00:25:34','2019-03-29 00:25:34'),(965,219,2,'7\n',281,26820,1,'2019-03-29 00:25:34','2019-03-29 00:25:34'),(966,219,3,'11\n',292,26728,1,'2019-03-29 00:25:34','2019-03-29 00:25:34'),(967,219,4,'15\n',290,27072,1,'2019-03-29 00:25:34','2019-03-29 00:25:34'),(968,219,5,'21\n',289,26600,1,'2019-03-29 00:25:34','2019-03-29 00:25:34'),(969,220,1,'101',0,0,1,'2019-03-29 00:25:38','2019-03-29 00:25:37'),(970,220,2,'7',0,0,1,'2019-03-29 00:25:38','2019-03-29 00:25:37'),(971,220,3,'11',0,0,1,'2019-03-29 00:25:38','2019-03-29 00:25:37'),(972,220,4,'15',0,0,1,'2019-03-29 00:25:38','2019-03-29 00:25:37'),(973,220,5,'21',0,0,1,'2019-03-29 00:25:38','2019-03-29 00:25:37'),(974,221,1,'101',0,0,1,'2019-03-29 00:25:43','2019-03-29 00:25:43'),(975,221,2,'7',0,0,1,'2019-03-29 00:25:43','2019-03-29 00:25:43'),(976,221,3,'11',0,0,1,'2019-03-29 00:25:43','2019-03-29 00:25:43'),(977,221,4,'15',0,0,1,'2019-03-29 00:25:43','2019-03-29 00:25:43'),(978,221,5,'21',0,0,1,'2019-03-29 00:25:43','2019-03-29 00:25:43'),(979,222,1,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790347172\'\n',45,9168,4,'2019-03-29 00:25:47','2019-03-29 00:25:47'),(980,222,2,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790347172\'\n',38,9400,4,'2019-03-29 00:25:47','2019-03-29 00:25:47'),(981,222,3,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790347172\'\n',43,9228,4,'2019-03-29 00:25:47','2019-03-29 00:25:47'),(982,222,4,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790347172\'\n',48,9396,4,'2019-03-29 00:25:47','2019-03-29 00:25:47'),(983,222,5,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790347172\'\n',49,9332,4,'2019-03-29 00:25:47','2019-03-29 00:25:47'),(984,223,1,'101\n',7,6048,1,'2019-03-29 00:25:52','2019-03-29 00:25:52'),(985,223,2,'7\n',1,0,1,'2019-03-29 00:25:52','2019-03-29 00:25:52'),(986,223,3,'11\n',13,5624,1,'2019-03-29 00:25:52','2019-03-29 00:25:52'),(987,223,4,'15\n',13,4800,1,'2019-03-29 00:25:52','2019-03-29 00:25:52'),(988,223,5,'21\n',3,0,1,'2019-03-29 00:25:52','2019-03-29 00:25:52'),(989,224,1,'101\n',6,0,1,'2019-03-29 00:25:54','2019-03-29 00:25:54'),(990,224,2,'7\n',5,7176,1,'2019-03-29 00:25:54','2019-03-29 00:25:54'),(991,224,3,'11\n',9,7112,1,'2019-03-29 00:25:54','2019-03-29 00:25:54'),(992,224,4,'15\n',12,7104,1,'2019-03-29 00:25:54','2019-03-29 00:25:54'),(993,224,5,'21\n',3,0,1,'2019-03-29 00:25:54','2019-03-29 00:25:54'),(994,225,1,'101\n',14,6148,1,'2019-03-29 00:25:55','2019-03-29 00:25:55'),(995,225,2,'7\n',4,0,1,'2019-03-29 00:25:55','2019-03-29 00:25:55'),(996,225,3,'11\n',12,5976,1,'2019-03-29 00:25:55','2019-03-29 00:25:55'),(997,225,4,'15\n',16,7100,1,'2019-03-29 00:25:55','2019-03-29 00:25:55'),(998,225,5,'21\n',18,5816,1,'2019-03-29 00:25:55','2019-03-29 00:25:55'),(999,226,1,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790363811\'\n',64,9332,4,'2019-03-29 00:26:04','2019-03-29 00:26:03'),(1000,226,2,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790363811\'\n',42,9340,4,'2019-03-29 00:26:04','2019-03-29 00:26:03'),(1001,226,3,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790363811\'\n',56,9344,4,'2019-03-29 00:26:04','2019-03-29 00:26:03'),(1002,226,4,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790363811\'\n',47,9212,4,'2019-03-29 00:26:04','2019-03-29 00:26:03'),(1003,226,5,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790363811\'\n',53,9400,4,'2019-03-29 00:26:04','2019-03-29 00:26:03'),(1004,227,1,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790460536\'\n',39,9144,4,'2019-03-29 00:27:41','2019-03-29 00:27:40'),(1005,227,2,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790460536\'\n',50,9332,4,'2019-03-29 00:27:41','2019-03-29 00:27:40'),(1006,227,3,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790460536\'\n',48,9348,4,'2019-03-29 00:27:41','2019-03-29 00:27:40'),(1007,227,4,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790460536\'\n',36,9060,4,'2019-03-29 00:27:41','2019-03-29 00:27:40'),(1008,227,5,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790460536\'\n',53,9140,4,'2019-03-29 00:27:41','2019-03-29 00:27:40'),(1009,228,1,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790484853\'\n',10,9404,4,'2019-03-29 00:28:05','2019-03-29 00:28:04'),(1010,228,2,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790484853\'\n',14,9404,4,'2019-03-29 00:28:05','2019-03-29 00:28:04'),(1011,228,3,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790484853\'\n',44,9404,4,'2019-03-29 00:28:05','2019-03-29 00:28:04'),(1012,228,4,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790484853\'\n',37,8612,4,'2019-03-29 00:28:05','2019-03-29 00:28:04'),(1013,228,5,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790484853\'\n',21,9396,4,'2019-03-29 00:28:05','2019-03-29 00:28:04'),(1014,229,1,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790541903\'\n',18,9332,4,'2019-03-29 00:29:02','2019-03-29 00:29:02'),(1015,229,2,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790541903\'\n',29,9404,4,'2019-03-29 00:29:02','2019-03-29 00:29:02'),(1016,229,3,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790541903\'\n',39,9344,4,'2019-03-29 00:29:02','2019-03-29 00:29:02'),(1017,229,4,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790541903\'\n',26,9332,4,'2019-03-29 00:29:02','2019-03-29 00:29:02'),(1018,229,5,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790541903\'\n',39,9168,4,'2019-03-29 00:29:02','2019-03-29 00:29:02'),(1019,230,1,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790558406\'\n',43,9348,4,'2019-03-29 00:29:18','2019-03-29 00:29:18'),(1020,230,2,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790558406\'\n',48,9344,4,'2019-03-29 00:29:18','2019-03-29 00:29:18'),(1021,230,3,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790558406\'\n',36,9212,4,'2019-03-29 00:29:18','2019-03-29 00:29:18'),(1022,230,4,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790558406\'\n',50,9212,4,'2019-03-29 00:29:18','2019-03-29 00:29:18'),(1023,230,5,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790558406\'\n',42,9228,4,'2019-03-29 00:29:18','2019-03-29 00:29:18'),(1024,231,1,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790583417\'\n',52,9404,4,'2019-03-29 00:29:43','2019-03-29 00:29:43'),(1025,231,2,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790583417\'\n',40,9212,4,'2019-03-29 00:29:43','2019-03-29 00:29:43'),(1026,231,3,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790583417\'\n',52,9332,4,'2019-03-29 00:29:43','2019-03-29 00:29:43'),(1027,231,4,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790583417\'\n',51,9404,4,'2019-03-29 00:29:43','2019-03-29 00:29:43'),(1028,231,5,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790583417\'\n',60,9144,4,'2019-03-29 00:29:43','2019-03-29 00:29:43'),(1029,232,1,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790596182\'\n',584,9392,4,'2019-03-29 00:29:56','2019-03-29 00:30:26'),(1030,232,2,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790596182\'\n',583,9340,4,'2019-03-29 00:29:56','2019-03-29 00:30:26'),(1031,232,3,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790596182\'\n',55,9140,4,'2019-03-29 00:29:56','2019-03-29 00:30:26'),(1032,232,4,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790596182\'\n',51,9348,4,'2019-03-29 00:29:56','2019-03-29 00:30:26'),(1033,232,5,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553790596182\'\n',607,9144,4,'2019-03-29 00:29:56','2019-03-29 00:30:26'),(1034,233,1,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791164398\'\n',122,9400,4,'2019-03-29 00:39:24','2019-03-29 00:39:48'),(1035,233,2,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791164398\'\n',111,9244,4,'2019-03-29 00:39:24','2019-03-29 00:39:48'),(1036,233,3,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791164398\'\n',141,9604,4,'2019-03-29 00:39:24','2019-03-29 00:39:48'),(1037,233,4,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791164398\'\n',46,9188,4,'2019-03-29 00:39:24','2019-03-29 00:39:48'),(1038,233,5,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791164398\'\n',26,9212,4,'2019-03-29 00:39:24','2019-03-29 00:39:48'),(1039,234,1,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791215592\'\n',2,0,4,'2019-03-29 00:40:16','2019-03-29 00:40:34'),(1040,234,2,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791215592\'\n',0,0,4,'2019-03-29 00:40:20','2019-03-29 00:40:34'),(1041,234,3,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791215592\'\n',10,0,4,'2019-03-29 00:40:16','2019-03-29 00:40:34'),(1042,234,4,NULL,NULL,NULL,5,'2019-03-29 00:40:16','2019-03-29 00:40:34'),(1043,234,5,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791215592\'\n',0,0,4,'2019-03-29 00:40:16','2019-03-29 00:40:34'),(1044,235,1,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791303944\'\n',15690,9172,5,'2019-03-29 00:41:44','2019-03-29 00:43:06'),(1045,235,2,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791303944\'\n',27501,NULL,5,'2019-03-29 00:42:37','2019-03-29 00:43:06'),(1046,235,3,'',0,0,5,'2019-03-29 00:41:44','2019-03-29 00:43:06'),(1047,235,4,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791303944\'\n',0,0,4,'2019-03-29 00:42:00','2019-03-29 00:43:06'),(1048,235,5,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791303944\'\n',15709,8932,5,'2019-03-29 00:41:44','2019-03-29 00:43:06'),(1049,236,1,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791672831\'\n',97,9404,4,'2019-03-29 00:47:53','2019-03-29 00:47:52'),(1050,236,2,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791672831\'\n',81,9224,4,'2019-03-29 00:47:53','2019-03-29 00:47:52'),(1051,236,3,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791672831\'\n',95,9212,4,'2019-03-29 00:47:53','2019-03-29 00:47:52'),(1052,236,4,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791672831\'\n',96,9412,4,'2019-03-29 00:47:53','2019-03-29 00:47:52'),(1053,236,5,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791672831\'\n',93,9264,4,'2019-03-29 00:47:53','2019-03-29 00:47:52'),(1054,237,1,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791681129\'\n',0,0,4,'2019-03-29 00:50:07','2019-03-29 00:50:06'),(1055,237,2,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791681129\'\n',30,9416,4,'2019-03-29 00:50:07','2019-03-29 00:50:06'),(1056,237,3,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791681129\'\n',0,0,4,'2019-03-29 00:50:05','2019-03-29 00:50:06'),(1057,237,4,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791681129\'\n',646,0,4,'2019-03-29 00:50:04','2019-03-29 00:50:06'),(1058,237,5,'/usr/bin/python3: can\'t find \'__main__\' module in \'/home/ming/gkuoj/file/testcase/1000/1553791681129\'\n',0,0,4,'2019-03-29 00:50:04','2019-03-29 00:50:06'),(1059,238,1,'101\n',5,8484,1,'2019-03-29 00:50:37','2019-03-29 00:50:36'),(1060,238,2,'7\n',16,8680,1,'2019-03-29 00:50:37','2019-03-29 00:50:36'),(1061,238,3,'11\n',25,8484,1,'2019-03-29 00:50:36','2019-03-29 00:50:36'),(1062,238,4,'15\n',4,0,1,'2019-03-29 00:50:36','2019-03-29 00:50:36'),(1063,238,5,'21\n',18,8616,1,'2019-03-29 00:50:37','2019-03-29 00:50:36'),(1064,239,1,'101\n',23,8380,1,'2019-03-29 00:50:39','2019-03-29 00:50:38'),(1065,239,2,'7\n',15,8488,1,'2019-03-29 00:50:39','2019-03-29 00:50:38'),(1066,239,3,'11\n',30,8688,1,'2019-03-29 00:50:39','2019-03-29 00:50:38'),(1067,239,4,'15\n',32,8496,1,'2019-03-29 00:50:39','2019-03-29 00:50:38'),(1068,239,5,'21\n',20,8608,1,'2019-03-29 00:50:39','2019-03-29 00:50:38'),(1069,240,1,'101\n',16,8416,1,'2019-03-29 00:50:39','2019-03-29 00:50:39'),(1070,240,2,'7\n',20,8328,1,'2019-03-29 00:50:39','2019-03-29 00:50:39'),(1071,240,3,'11\n',21,8120,1,'2019-03-29 00:50:39','2019-03-29 00:50:39'),(1072,240,4,'15\n',29,7804,1,'2019-03-29 00:50:39','2019-03-29 00:50:39'),(1073,240,5,'21\n',20,8680,1,'2019-03-29 00:50:39','2019-03-29 00:50:39'),(1074,241,1,'  File \"/home/ming/gkuoj/file/testcase/1000/1553791875618/Main.py3\", line 3\n    \n                       ^\nSyntaxError: unexpected EOF while parsing\n',23,8356,4,'2019-03-29 00:51:16','2019-03-29 00:51:15'),(1075,241,2,'  File \"/home/ming/gkuoj/file/testcase/1000/1553791875618/Main.py3\", line 3\n    \n                       ^\nSyntaxError: unexpected EOF while parsing\n',25,8484,4,'2019-03-29 00:51:16','2019-03-29 00:51:15'),(1076,241,3,'  File \"/home/ming/gkuoj/file/testcase/1000/1553791875618/Main.py3\", line 3\n    \n                       ^\nSyntaxError: unexpected EOF while parsing\n',23,8488,4,'2019-03-29 00:51:16','2019-03-29 00:51:15'),(1077,241,4,'  File \"/home/ming/gkuoj/file/testcase/1000/1553791875618/Main.py3\", line 3\n    \n                       ^\nSyntaxError: unexpected EOF while parsing\n',23,8412,4,'2019-03-29 00:51:16','2019-03-29 00:51:15'),(1078,241,5,'  File \"/home/ming/gkuoj/file/testcase/1000/1553791875618/Main.py3\", line 3\n    \n                       ^\nSyntaxError: unexpected EOF while parsing\n',25,8612,4,'2019-03-29 00:51:16','2019-03-29 00:51:15'),(1079,242,1,'  File \"/home/ming/gkuoj/file/testcase/1000/1553791879479/Main.py3\", line 3\n    \n           ^\nSyntaxError: unexpected EOF while parsing\n',14,8388,4,'2019-03-29 00:51:20','2019-03-29 00:51:19'),(1080,242,2,'  File \"/home/ming/gkuoj/file/testcase/1000/1553791879479/Main.py3\", line 3\n    \n           ^\nSyntaxError: unexpected EOF while parsing\n',14,8556,4,'2019-03-29 00:51:20','2019-03-29 00:51:19'),(1081,242,3,'  File \"/home/ming/gkuoj/file/testcase/1000/1553791879479/Main.py3\", line 3\n    \n           ^\nSyntaxError: unexpected EOF while parsing\n',26,8616,4,'2019-03-29 00:51:20','2019-03-29 00:51:19'),(1082,242,4,'  File \"/home/ming/gkuoj/file/testcase/1000/1553791879479/Main.py3\", line 3\n    \n           ^\nSyntaxError: unexpected EOF while parsing\n',21,8412,4,'2019-03-29 00:51:20','2019-03-29 00:51:19'),(1083,242,5,'  File \"/home/ming/gkuoj/file/testcase/1000/1553791879479/Main.py3\", line 3\n    \n           ^\nSyntaxError: unexpected EOF while parsing\n',21,8432,4,'2019-03-29 00:51:20','2019-03-29 00:51:19'),(1084,244,1,'101\n',250,26748,1,'2019-04-21 21:51:29','2019-04-21 21:51:29'),(1085,244,2,'7\n',352,26828,1,'2019-04-21 21:51:29','2019-04-21 21:51:29'),(1086,244,3,'11\n',351,26676,1,'2019-04-21 21:51:29','2019-04-21 21:51:29'),(1087,244,4,'15\n',359,26708,1,'2019-04-21 21:51:29','2019-04-21 21:51:29'),(1088,244,5,'21\n',364,26744,1,'2019-04-21 21:51:29','2019-04-21 21:51:29'),(1089,245,1,'101\n',176,26996,1,'2019-04-21 21:53:56','2019-04-21 21:53:56'),(1090,245,2,'7\n',217,26996,1,'2019-04-21 21:53:56','2019-04-21 21:53:56'),(1091,245,3,'11\n',173,26616,1,'2019-04-21 21:53:56','2019-04-21 21:53:56'),(1092,245,4,'15\n',208,26804,1,'2019-04-21 21:53:56','2019-04-21 21:53:56'),(1093,245,5,'21\n',152,26440,1,'2019-04-21 21:53:56','2019-04-21 21:53:56'),(1094,246,1,'101',0,0,1,'2019-04-21 21:55:28','2019-04-21 21:55:28'),(1095,246,2,'7',0,0,1,'2019-04-21 21:55:28','2019-04-21 21:55:28'),(1096,246,3,'11',0,0,1,'2019-04-21 21:55:28','2019-04-21 21:55:28'),(1097,246,4,'15',0,0,1,'2019-04-21 21:55:28','2019-04-21 21:55:28'),(1098,246,5,'21',0,0,1,'2019-04-21 21:55:28','2019-04-21 21:55:28'),(1099,247,1,'101',0,0,1,'2019-04-21 21:55:46','2019-04-21 21:55:46'),(1100,247,2,'7',0,0,1,'2019-04-21 21:55:46','2019-04-21 21:55:46'),(1101,247,3,'11',0,0,1,'2019-04-21 21:55:46','2019-04-21 21:55:46'),(1102,247,4,'15',0,0,1,'2019-04-21 21:55:46','2019-04-21 21:55:46'),(1103,247,5,'21',0,0,1,'2019-04-21 21:55:46','2019-04-21 21:55:46'),(1104,248,1,'101',0,0,1,'2019-04-21 21:55:48','2019-04-21 21:55:47'),(1105,248,2,'7',0,0,1,'2019-04-21 21:55:48','2019-04-21 21:55:47'),(1106,248,3,'11',0,0,1,'2019-04-21 21:55:48','2019-04-21 21:55:47'),(1107,248,4,'15',0,0,1,'2019-04-21 21:55:48','2019-04-21 21:55:47'),(1108,248,5,'21',0,0,1,'2019-04-21 21:55:48','2019-04-21 21:55:47'),(1109,249,1,'101',0,0,1,'2019-04-21 21:55:49','2019-04-21 21:55:49'),(1110,249,2,'7',0,0,1,'2019-04-21 21:55:49','2019-04-21 21:55:49'),(1111,249,3,'11',0,0,1,'2019-04-21 21:55:49','2019-04-21 21:55:49'),(1112,249,4,'15',0,0,1,'2019-04-21 21:55:49','2019-04-21 21:55:49'),(1113,249,5,'21',0,0,1,'2019-04-21 21:55:49','2019-04-21 21:55:49'),(1114,250,1,'101',0,0,1,'2019-04-21 21:55:50','2019-04-21 21:55:50'),(1115,250,2,'7',0,0,1,'2019-04-21 21:55:50','2019-04-21 21:55:50'),(1116,250,3,'11',0,0,1,'2019-04-21 21:55:50','2019-04-21 21:55:50'),(1117,250,4,'15',0,0,1,'2019-04-21 21:55:50','2019-04-21 21:55:50'),(1118,250,5,'21',1,0,1,'2019-04-21 21:55:50','2019-04-21 21:55:50'),(1119,251,1,'101',0,0,1,'2019-04-21 21:55:51','2019-04-21 21:55:51'),(1120,251,2,'7',0,0,1,'2019-04-21 21:55:51','2019-04-21 21:55:51'),(1121,251,3,'11',0,0,1,'2019-04-21 21:55:51','2019-04-21 21:55:51'),(1122,251,4,'15',0,0,1,'2019-04-21 21:55:51','2019-04-21 21:55:51'),(1123,251,5,'21',0,0,1,'2019-04-21 21:55:51','2019-04-21 21:55:51'),(1124,252,1,'101',1,0,1,'2019-04-21 21:55:52','2019-04-21 21:55:52'),(1125,252,2,'7',0,0,1,'2019-04-21 21:55:52','2019-04-21 21:55:52'),(1126,252,3,'11',0,0,1,'2019-04-21 21:55:52','2019-04-21 21:55:52'),(1127,252,4,'15',0,0,1,'2019-04-21 21:55:52','2019-04-21 21:55:52'),(1128,252,5,'21',0,0,1,'2019-04-21 21:55:52','2019-04-21 21:55:52'),(1129,253,1,'101',0,0,1,'2019-04-21 21:55:53','2019-04-21 21:55:53'),(1130,253,2,'7',0,0,1,'2019-04-21 21:55:53','2019-04-21 21:55:53'),(1131,253,3,'11',0,0,1,'2019-04-21 21:55:53','2019-04-21 21:55:53'),(1132,253,4,'15',0,0,1,'2019-04-21 21:55:53','2019-04-21 21:55:53'),(1133,253,5,'21',0,0,1,'2019-04-21 21:55:53','2019-04-21 21:55:53'),(1134,254,1,'101',0,0,1,'2019-04-21 21:55:55','2019-04-21 21:55:55'),(1135,254,2,'7',0,0,1,'2019-04-21 21:55:55','2019-04-21 21:55:55'),(1136,254,3,'11',0,0,1,'2019-04-21 21:55:55','2019-04-21 21:55:55'),(1137,254,4,'15',0,0,1,'2019-04-21 21:55:55','2019-04-21 21:55:55'),(1138,254,5,'21',0,0,1,'2019-04-21 21:55:55','2019-04-21 21:55:55'),(1139,255,1,'101',0,0,1,'2019-04-21 21:55:59','2019-04-21 21:55:58'),(1140,255,2,'7',0,0,1,'2019-04-21 21:55:59','2019-04-21 21:55:58'),(1141,255,3,'11',0,0,1,'2019-04-21 21:55:59','2019-04-21 21:55:58'),(1142,255,4,'15',0,0,1,'2019-04-21 21:55:59','2019-04-21 21:55:58'),(1143,255,5,'21',0,0,1,'2019-04-21 21:55:59','2019-04-21 21:55:58'),(1144,256,1,'101',0,0,1,'2019-04-21 21:56:00','2019-04-21 21:55:59'),(1145,256,2,'7',0,0,1,'2019-04-21 21:56:00','2019-04-21 21:55:59'),(1146,256,3,'11',0,0,1,'2019-04-21 21:56:00','2019-04-21 21:55:59'),(1147,256,4,'15',0,0,1,'2019-04-21 21:56:00','2019-04-21 21:55:59'),(1148,256,5,'21',0,0,1,'2019-04-21 21:56:00','2019-04-21 21:55:59'),(1149,257,1,'101',0,0,1,'2019-04-21 21:56:20','2019-04-21 21:56:19'),(1150,257,2,'7',0,0,1,'2019-04-21 21:56:20','2019-04-21 21:56:19'),(1151,257,3,'11',0,0,1,'2019-04-21 21:56:20','2019-04-21 21:56:19'),(1152,257,4,'15',0,0,1,'2019-04-21 21:56:20','2019-04-21 21:56:19'),(1153,257,5,'21',0,0,1,'2019-04-21 21:56:20','2019-04-21 21:56:19'),(1154,258,1,'101',0,0,1,'2019-04-21 21:56:21','2019-04-21 21:56:21'),(1155,258,2,'7',0,0,1,'2019-04-21 21:56:21','2019-04-21 21:56:21'),(1156,258,3,'11',0,0,1,'2019-04-21 21:56:21','2019-04-21 21:56:21'),(1157,258,4,'15',0,0,1,'2019-04-21 21:56:21','2019-04-21 21:56:21'),(1158,258,5,'21',0,0,1,'2019-04-21 21:56:21','2019-04-21 21:56:21'),(1159,259,1,'101',0,0,1,'2019-04-21 21:56:22','2019-04-21 21:56:21'),(1160,259,2,'7',0,0,1,'2019-04-21 21:56:22','2019-04-21 21:56:21'),(1161,259,3,'11',0,0,1,'2019-04-21 21:56:22','2019-04-21 21:56:21'),(1162,259,4,'15',0,0,1,'2019-04-21 21:56:22','2019-04-21 21:56:21'),(1163,259,5,'21',0,0,1,'2019-04-21 21:56:22','2019-04-21 21:56:21'),(1164,260,1,'101',0,0,1,'2019-04-21 21:56:22','2019-04-21 21:56:22'),(1165,260,2,'7',0,0,1,'2019-04-21 21:56:22','2019-04-21 21:56:22'),(1166,260,3,'11',0,0,1,'2019-04-21 21:56:22','2019-04-21 21:56:22'),(1167,260,4,'15',0,0,1,'2019-04-21 21:56:22','2019-04-21 21:56:22'),(1168,260,5,'21',0,0,1,'2019-04-21 21:56:22','2019-04-21 21:56:22'),(1169,261,1,'101',0,0,1,'2019-04-21 21:56:22','2019-04-21 21:56:22'),(1170,261,2,'7',0,0,1,'2019-04-21 21:56:22','2019-04-21 21:56:22'),(1171,261,3,'11',0,0,1,'2019-04-21 21:56:22','2019-04-21 21:56:22'),(1172,261,4,'15',0,0,1,'2019-04-21 21:56:22','2019-04-21 21:56:22'),(1173,261,5,'21',0,0,1,'2019-04-21 21:56:22','2019-04-21 21:56:22'),(1174,262,1,'101',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:22'),(1175,262,2,'7',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:22'),(1176,262,3,'11',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:22'),(1177,262,4,'15',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:22'),(1178,262,5,'21',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:22'),(1179,263,1,'101',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:22'),(1180,263,2,'7',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:22'),(1181,263,3,'11',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:22'),(1182,263,4,'15',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:22'),(1183,263,5,'21',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:22'),(1184,264,1,'101',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:23'),(1185,264,2,'7',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:23'),(1186,264,3,'11',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:23'),(1187,264,4,'15',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:23'),(1188,264,5,'21',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:23'),(1189,265,1,'101',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:23'),(1190,265,2,'7',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:23'),(1191,265,3,'11',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:23'),(1192,265,4,'15',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:23'),(1193,265,5,'21',0,0,1,'2019-04-21 21:56:23','2019-04-21 21:56:23'),(1194,266,1,'101\n',466,6024,1,'2019-04-21 21:57:03','2019-04-21 21:57:03'),(1195,266,2,'7\n',469,5916,1,'2019-04-21 21:57:03','2019-04-21 21:57:03'),(1196,266,3,'11\n',493,7148,1,'2019-04-21 21:57:03','2019-04-21 21:57:03'),(1197,266,4,'15\n',496,6944,1,'2019-04-21 21:57:03','2019-04-21 21:57:03'),(1198,266,5,'21\n',486,5932,1,'2019-04-21 21:57:03','2019-04-21 21:57:03'),(1199,267,1,'101\n',8,6188,1,'2019-04-21 21:57:21','2019-04-21 21:57:20'),(1200,267,2,'7\n',10,6192,1,'2019-04-21 21:57:21','2019-04-21 21:57:20'),(1201,267,3,'11\n',13,5500,1,'2019-04-21 21:57:21','2019-04-21 21:57:20'),(1202,267,4,'15\n',11,6956,1,'2019-04-21 21:57:21','2019-04-21 21:57:20'),(1203,267,5,'21\n',5,0,1,'2019-04-21 21:57:21','2019-04-21 21:57:20'),(1204,268,1,'101\n',16,7164,1,'2019-04-21 21:57:25','2019-04-21 21:57:25'),(1205,268,2,'7\n',18,6188,1,'2019-04-21 21:57:25','2019-04-21 21:57:25'),(1206,268,3,'11\n',22,7104,1,'2019-04-21 21:57:25','2019-04-21 21:57:25'),(1207,268,4,'15\n',14,5044,1,'2019-04-21 21:57:25','2019-04-21 21:57:25'),(1208,268,5,'21\n',24,6960,1,'2019-04-21 21:57:25','2019-04-21 21:57:25'),(1209,269,1,'101\n',3,0,1,'2019-04-21 21:57:25','2019-04-21 21:57:25'),(1210,269,2,'7\n',9,6188,1,'2019-04-21 21:57:25','2019-04-21 21:57:25'),(1211,269,3,'11\n',9,0,1,'2019-04-21 21:57:25','2019-04-21 21:57:25'),(1212,269,4,'15\n',13,6976,1,'2019-04-21 21:57:25','2019-04-21 21:57:25'),(1213,269,5,'21\n',24,5496,1,'2019-04-21 21:57:25','2019-04-21 21:57:25'),(1214,270,1,'101\n',10,6184,1,'2019-04-21 21:57:26','2019-04-21 21:57:25'),(1215,270,2,'7\n',14,5464,1,'2019-04-21 21:57:26','2019-04-21 21:57:25'),(1216,270,3,'11\n',16,7260,1,'2019-04-21 21:57:25','2019-04-21 21:57:25'),(1217,270,4,'15\n',17,7168,1,'2019-04-21 21:57:25','2019-04-21 21:57:25'),(1218,270,5,'21\n',16,5972,1,'2019-04-21 21:57:25','2019-04-21 21:57:25'),(1219,271,1,'101\n',13,6328,1,'2019-04-21 21:57:26','2019-04-21 21:57:25'),(1220,271,2,'7\n',11,5968,1,'2019-04-21 21:57:26','2019-04-21 21:57:25'),(1221,271,3,'11\n',14,6204,1,'2019-04-21 21:57:26','2019-04-21 21:57:25'),(1222,271,4,'15\n',14,6196,1,'2019-04-21 21:57:26','2019-04-21 21:57:25'),(1223,271,5,'21\n',18,7240,1,'2019-04-21 21:57:26','2019-04-21 21:57:25'),(1224,272,1,'101\n',0,0,1,'2019-04-21 21:57:26','2019-04-21 21:57:25'),(1225,272,2,'7\n',2,0,1,'2019-04-21 21:57:26','2019-04-21 21:57:25'),(1226,272,3,'11\n',22,6072,1,'2019-04-21 21:57:26','2019-04-21 21:57:25'),(1227,272,4,'15\n',16,5060,1,'2019-04-21 21:57:26','2019-04-21 21:57:25'),(1228,272,5,'21\n',12,6184,1,'2019-04-21 21:57:26','2019-04-21 21:57:25'),(1229,273,1,'101\n',20,6892,1,'2019-04-21 21:57:26','2019-04-21 21:57:25'),(1230,273,2,'7\n',17,7160,1,'2019-04-21 21:57:26','2019-04-21 21:57:25'),(1231,273,3,'11\n',19,5500,1,'2019-04-21 21:57:26','2019-04-21 21:57:25'),(1232,273,4,'15\n',18,7036,1,'2019-04-21 21:57:26','2019-04-21 21:57:25'),(1233,273,5,'21\n',19,5124,1,'2019-04-21 21:57:26','2019-04-21 21:57:25'),(1234,274,1,'101\n',223,26700,1,'2019-04-21 21:58:20','2019-04-21 21:58:19'),(1235,274,2,'7\n',198,26644,1,'2019-04-21 21:58:20','2019-04-21 21:58:19'),(1236,274,3,'11\n',184,26968,1,'2019-04-21 21:58:20','2019-04-21 21:58:19'),(1237,274,4,'15\n',196,26708,1,'2019-04-21 21:58:20','2019-04-21 21:58:19'),(1238,274,5,'21\n',188,26512,1,'2019-04-21 21:58:20','2019-04-21 21:58:19'),(1239,275,1,'101\n',223,26852,1,'2019-04-21 21:58:45','2019-04-21 21:58:45'),(1240,275,2,'7\n',241,26728,1,'2019-04-21 21:58:45','2019-04-21 21:58:45'),(1241,275,3,'11\n',250,26900,1,'2019-04-21 21:58:45','2019-04-21 21:58:45'),(1242,275,4,'15\n',242,27008,1,'2019-04-21 21:58:45','2019-04-21 21:58:45'),(1243,275,5,'21\n',254,26724,1,'2019-04-21 21:58:45','2019-04-21 21:58:45'),(1244,276,1,'101\n',194,27080,1,'2019-04-21 22:02:48','2019-04-21 22:02:48'),(1245,276,2,'7\n',195,26928,1,'2019-04-21 22:02:48','2019-04-21 22:02:48'),(1246,276,3,'11\n',193,27000,1,'2019-04-21 22:02:48','2019-04-21 22:02:48'),(1247,276,4,'15\n',215,27056,1,'2019-04-21 22:02:48','2019-04-21 22:02:48'),(1248,276,5,'21\n',217,26916,1,'2019-04-21 22:02:48','2019-04-21 22:02:48'),(1249,277,1,'101 \n',203,26776,1,'2019-04-21 22:03:03','2019-04-21 22:03:03'),(1250,277,2,'7 \n',206,26956,1,'2019-04-21 22:03:03','2019-04-21 22:03:03'),(1251,277,3,'11 \n',199,26832,1,'2019-04-21 22:03:03','2019-04-21 22:03:03'),(1252,277,4,'15 \n',211,26900,1,'2019-04-21 22:03:03','2019-04-21 22:03:03'),(1253,277,5,'21 \n',197,26676,1,'2019-04-21 22:03:03','2019-04-21 22:03:03'),(1254,279,1,' 1100\n',226,26780,7,'2019-04-21 22:03:40','2019-04-21 22:03:40'),(1255,279,2,' 34\n',217,26508,7,'2019-04-21 22:03:40','2019-04-21 22:03:40'),(1256,279,3,' 56\n',219,26816,7,'2019-04-21 22:03:40','2019-04-21 22:03:40'),(1257,279,4,' 78\n',205,26216,7,'2019-04-21 22:03:40','2019-04-21 22:03:40'),(1258,279,5,' 1011\n',204,26792,7,'2019-04-21 22:03:40','2019-04-21 22:03:40'),(1259,280,1,'\n101\n',201,26752,3,'2019-04-21 22:03:55','2019-04-21 22:03:55'),(1260,280,2,'\n7\n',206,26788,3,'2019-04-21 22:03:55','2019-04-21 22:03:55'),(1261,280,3,'\n11\n',185,26660,3,'2019-04-21 22:03:55','2019-04-21 22:03:55'),(1262,280,4,'\n15\n',196,26328,3,'2019-04-21 22:03:55','2019-04-21 22:03:55'),(1263,280,5,'\n21\n',218,26724,3,'2019-04-21 22:03:55','2019-04-21 22:03:55'),(1264,281,1,'101\n\n',181,26156,1,'2019-04-21 22:04:15','2019-04-21 22:04:15'),(1265,281,2,'7\n\n',189,26584,1,'2019-04-21 22:04:15','2019-04-21 22:04:15'),(1266,281,3,'11\n\n',212,26748,1,'2019-04-21 22:04:15','2019-04-21 22:04:15'),(1267,281,4,'15\n\n',170,26776,1,'2019-04-21 22:04:15','2019-04-21 22:04:15'),(1268,281,5,'21\n\n',212,26532,1,'2019-04-21 22:04:15','2019-04-21 22:04:15'),(1269,284,1,'Exception in thread \"main\" java.lang.Exception\n	at Main.main(Main.java:5)\n',155,24436,4,'2019-04-21 22:06:16','2019-04-21 22:06:16'),(1270,284,2,'Exception in thread \"main\" java.lang.Exception\n	at Main.main(Main.java:5)\n',157,24108,4,'2019-04-21 22:06:16','2019-04-21 22:06:16'),(1271,284,3,'Exception in thread \"main\" java.lang.Exception\n	at Main.main(Main.java:5)\n',168,24092,4,'2019-04-21 22:06:16','2019-04-21 22:06:16'),(1272,284,4,'Exception in thread \"main\" java.lang.Exception\n	at Main.main(Main.java:5)\n',170,24744,4,'2019-04-21 22:06:16','2019-04-21 22:06:16'),(1273,284,5,'Exception in thread \"main\" java.lang.Exception\n	at Main.main(Main.java:5)\n',165,24444,4,'2019-04-21 22:06:16','2019-04-21 22:06:16'),(1274,285,1,'101',0,0,1,'2019-04-22 00:37:17','2019-04-22 00:37:17'),(1275,285,2,'7',0,0,1,'2019-04-22 00:37:17','2019-04-22 00:37:17'),(1276,285,3,'11',0,0,1,'2019-04-22 00:37:17','2019-04-22 00:37:17'),(1277,285,4,'15',0,0,1,'2019-04-22 00:37:17','2019-04-22 00:37:17'),(1278,285,5,'21',0,0,1,'2019-04-22 00:37:17','2019-04-22 00:37:17'),(1279,286,1,'101\n',290,26912,1,'2019-04-22 00:37:26','2019-04-22 00:37:26'),(1280,286,2,'7\n',290,27104,1,'2019-04-22 00:37:26','2019-04-22 00:37:26'),(1281,286,3,'11\n',298,26780,1,'2019-04-22 00:37:26','2019-04-22 00:37:26'),(1282,286,4,'15\n',299,26592,1,'2019-04-22 00:37:26','2019-04-22 00:37:26'),(1283,286,5,'21\n',296,26812,1,'2019-04-22 00:37:26','2019-04-22 00:37:26'),(1284,287,1,'\n101\n',225,26784,3,'2019-04-22 00:37:51','2019-04-22 00:37:51'),(1285,287,2,'\n7\n',198,26704,3,'2019-04-22 00:37:51','2019-04-22 00:37:51'),(1286,287,3,'\n11\n',232,26688,3,'2019-04-22 00:37:51','2019-04-22 00:37:51'),(1287,287,4,'\n15\n',200,26728,3,'2019-04-22 00:37:51','2019-04-22 00:37:51'),(1288,287,5,'\n21\n',199,26852,3,'2019-04-22 00:37:51','2019-04-22 00:37:51');
/*!40000 ALTER TABLE `testcase_result` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `up`
--

DROP TABLE IF EXISTS `up`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `up` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type_id` int(11) DEFAULT NULL COMMENT '博客或评论的id',
  `type` int(11) DEFAULT NULL COMMENT '0博客1评论',
  `user_id` int(11) DEFAULT NULL,
  `status` tinyint(1) DEFAULT '1' COMMENT '1已赞0取消',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
<<<<<<< HEAD
) ENGINE=InnoDB AUTO_INCREMENT=72 DEFAULT CHARSET=utf8;
=======
) ENGINE=InnoDB AUTO_INCREMENT=70 DEFAULT CHARSET=utf8;
>>>>>>> 11c2e33... 0816
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `up`
--

LOCK TABLES `up` WRITE;
/*!40000 ALTER TABLE `up` DISABLE KEYS */;
<<<<<<< HEAD
INSERT INTO `up` VALUES (35,43,1,1,0,'2019-02-01 02:17:40','2019-02-01 13:22:44'),(36,41,1,1,1,'2019-02-01 02:17:43','2019-02-16 00:56:36'),(37,42,1,1,1,'2019-02-01 02:17:43','2019-02-16 00:56:37'),(38,11,0,1,1,'2019-02-01 02:17:44','2019-02-16 00:56:34'),(39,11,0,2,0,'2019-02-01 02:18:18','2019-02-01 02:25:37'),(40,41,1,2,0,'2019-02-01 02:25:42','2019-02-01 13:22:04'),(41,42,1,2,0,'2019-02-01 02:25:43','2019-02-01 13:22:02'),(42,43,1,2,0,'2019-02-01 02:25:43','2019-02-01 13:22:03'),(43,7,0,1,1,'2019-02-01 13:00:27','2019-02-01 13:23:41'),(44,35,1,1,0,'2019-02-01 13:00:38','2019-02-15 18:30:34'),(45,36,1,1,0,'2019-02-01 13:00:39','2019-02-01 13:23:32'),(46,40,1,1,0,'2019-02-01 13:00:43','2019-02-01 13:23:36'),(47,39,1,1,0,'2019-02-01 13:00:44','2019-02-01 13:23:35'),(48,38,1,1,0,'2019-02-01 13:00:44','2019-02-01 13:23:34'),(49,37,1,1,0,'2019-02-01 13:00:45','2019-02-01 13:23:33'),(50,7,1,1,1,'2019-02-01 22:30:16','2019-02-17 01:02:50'),(51,5,1,1,0,'2019-02-01 22:32:25','2019-02-17 01:02:50'),(52,5,0,1,1,'2019-02-01 22:32:33','2019-02-17 01:02:58'),(53,50,1,1,0,'2019-02-01 22:48:12','2019-02-01 23:39:43'),(54,28,1,1,0,'2019-02-02 00:23:40','2019-02-14 23:54:26'),(55,11,1,1,1,'2019-02-02 14:42:42','2019-02-02 14:42:42'),(56,10,1,1,1,'2019-02-02 14:42:43','2019-02-02 14:42:43'),(57,8,0,1,0,'2019-02-13 15:31:33','2019-02-13 15:31:38'),(58,52,1,1,0,'2019-02-16 00:59:38','2019-04-21 22:22:19'),(59,51,1,1,0,'2019-03-22 20:43:36','2019-04-21 22:22:20'),(60,57,1,35,1,'2019-03-24 23:13:16','2019-03-24 23:13:16'),(61,24,0,35,1,'2019-03-24 23:13:18','2019-03-24 23:13:18'),(62,57,1,1,1,'2019-03-24 23:13:46','2019-03-24 23:13:46'),(63,24,0,1,1,'2019-03-24 23:13:49','2019-04-22 00:35:56'),(64,6,1,1,1,'2019-03-25 00:49:56','2019-03-25 00:49:56'),(65,6,0,1,1,'2019-03-25 00:49:56','2019-03-25 00:49:56'),(66,17,1,1,1,'2019-03-25 00:49:59','2019-03-25 00:49:59'),(67,27,0,1,1,'2019-04-21 22:10:52','2019-05-03 15:26:17'),(68,12,0,1,0,'2019-04-21 22:22:16','2019-04-21 22:23:39'),(69,58,1,1,1,'2019-04-22 00:36:09','2019-04-22 00:36:09'),(70,58,1,37,1,'2020-08-06 10:00:20','2020-08-06 10:00:20'),(71,24,0,37,1,'2020-08-06 10:05:27','2020-08-06 10:05:27');
=======
INSERT INTO `up` VALUES (35,43,1,1,0,'2019-02-01 02:17:40','2019-02-01 13:22:44'),(36,41,1,1,1,'2019-02-01 02:17:43','2019-02-16 00:56:36'),(37,42,1,1,1,'2019-02-01 02:17:43','2019-02-16 00:56:37'),(38,11,0,1,1,'2019-02-01 02:17:44','2019-02-16 00:56:34'),(39,11,0,2,0,'2019-02-01 02:18:18','2019-02-01 02:25:37'),(40,41,1,2,0,'2019-02-01 02:25:42','2019-02-01 13:22:04'),(41,42,1,2,0,'2019-02-01 02:25:43','2019-02-01 13:22:02'),(42,43,1,2,0,'2019-02-01 02:25:43','2019-02-01 13:22:03'),(43,7,0,1,1,'2019-02-01 13:00:27','2019-02-01 13:23:41'),(44,35,1,1,0,'2019-02-01 13:00:38','2019-02-15 18:30:34'),(45,36,1,1,0,'2019-02-01 13:00:39','2019-02-01 13:23:32'),(46,40,1,1,0,'2019-02-01 13:00:43','2019-02-01 13:23:36'),(47,39,1,1,0,'2019-02-01 13:00:44','2019-02-01 13:23:35'),(48,38,1,1,0,'2019-02-01 13:00:44','2019-02-01 13:23:34'),(49,37,1,1,0,'2019-02-01 13:00:45','2019-02-01 13:23:33'),(50,7,1,1,1,'2019-02-01 22:30:16','2019-02-17 01:02:50'),(51,5,1,1,0,'2019-02-01 22:32:25','2019-02-17 01:02:50'),(52,5,0,1,1,'2019-02-01 22:32:33','2019-02-17 01:02:58'),(53,50,1,1,0,'2019-02-01 22:48:12','2019-02-01 23:39:43'),(54,28,1,1,0,'2019-02-02 00:23:40','2019-02-14 23:54:26'),(55,11,1,1,1,'2019-02-02 14:42:42','2019-02-02 14:42:42'),(56,10,1,1,1,'2019-02-02 14:42:43','2019-02-02 14:42:43'),(57,8,0,1,0,'2019-02-13 15:31:33','2019-02-13 15:31:38'),(58,52,1,1,0,'2019-02-16 00:59:38','2019-04-21 22:22:19'),(59,51,1,1,0,'2019-03-22 20:43:36','2019-04-21 22:22:20'),(60,57,1,35,1,'2019-03-24 23:13:16','2019-03-24 23:13:16'),(61,24,0,35,1,'2019-03-24 23:13:18','2019-03-24 23:13:18'),(62,57,1,1,1,'2019-03-24 23:13:46','2019-03-24 23:13:46'),(63,24,0,1,1,'2019-03-24 23:13:49','2019-04-22 00:35:56'),(64,6,1,1,1,'2019-03-25 00:49:56','2019-03-25 00:49:56'),(65,6,0,1,1,'2019-03-25 00:49:56','2019-03-25 00:49:56'),(66,17,1,1,1,'2019-03-25 00:49:59','2019-03-25 00:49:59'),(67,27,0,1,1,'2019-04-21 22:10:52','2019-05-03 15:26:17'),(68,12,0,1,0,'2019-04-21 22:22:16','2019-04-21 22:23:39'),(69,58,1,1,1,'2019-04-22 00:36:09','2019-04-22 00:36:09');
>>>>>>> 11c2e33... 0816
/*!40000 ALTER TABLE `up` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(25) DEFAULT NULL COMMENT '账号',
  `password` varchar(128) DEFAULT NULL COMMENT '密码',
  `name` varchar(15) DEFAULT NULL COMMENT '昵称',
  `mood` varchar(255) DEFAULT NULL COMMENT '心情',
  `avatar` varchar(500) DEFAULT NULL COMMENT '头像',
  `flag` int(11) DEFAULT '0' COMMENT '0　已激活　1冻结　2　已删除',
  `sex` char(2) DEFAULT NULL COMMENT '性别',
  `email` varchar(30) DEFAULT NULL COMMENT '邮箱',
  `phone` varchar(15) DEFAULT NULL COMMENT '手机',
  `school` varchar(20) DEFAULT NULL COMMENT '学校',
  `sign_count` int(11) DEFAULT '0' COMMENT '签到次数',
  `submit_count` int(11) DEFAULT '0' COMMENT '提交次数',
  `solution_count` int(11) DEFAULT '0' COMMENT '解决问题数',
  `ac_count` int(11) DEFAULT '0' COMMENT '通过次数',
  `tle_count` int(11) DEFAULT '0' COMMENT '超时次数',
  `pe_count` int(11) DEFAULT '0' COMMENT '格式错误次数',
  `me_count` int(11) DEFAULT '0' COMMENT '内存超限次数',
  `ce_count` int(11) DEFAULT '0' COMMENT '编译错误次数',
  `re_count` int(11) DEFAULT '0' COMMENT '运行时错误次数',
  `wa_count` int(11) DEFAULT '0' COMMENT '答案错误次数',
  `gold_count` int(11) DEFAULT '0' COMMENT '金币数',
  `rating` int(11) DEFAULT '0' COMMENT '评级',
  `last_login_time` datetime DEFAULT NULL COMMENT '最后登录时间',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`),
  UNIQUE KEY `user_name_uindex` (`name`)
<<<<<<< HEAD
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8;
=======
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8;
>>>>>>> 11c2e33... 0816
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
<<<<<<< HEAD
INSERT INTO `user` VALUES (1,'969130721','$2a$10$Z.Fsd5siXwl/nd1owg9NnOMCZHmeKTePG6ygCCb/7/n5Rv//ERhOi','君の名は~','我只是一个Java的狂热者哦！！！','http://yuangauss287.top:8889/img/133151.png',0,'男','969130721@qq.com','123456789','广东科技学院',0,133,4,82,0,2,0,9,34,6,2,50,NULL,'2018-12-17 17:16:27','2020-08-04 21:14:05'),(2,'123456','$2a$10$palSi6U7pvz/SEzXzWf2OuoIXYZHUuOH1c1rbtTm4bjc8smHyV1wC','五五开','我没有开挂!!!!','http://yuangauss287.top:8889/img/152449.png',0,'男','123456@qq.com','123123123','清华大学',0,3,2,3,0,0,0,0,0,0,2,30,NULL,'2019-01-16 18:44:23','2020-08-04 21:17:05'),(3,'007','','詹姆斯高斯林','123123','http://yuangauss287.top:8889/img/238370.png',0,'男','123123','123123','MIT',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-01-29 22:14:05','2020-08-04 21:17:33'),(4,'008','$2a$10$Y/DSpdZsvqou1D./253y8OemJvJCp0gqgtzD0De1PEKfO18HudusO','玩具','我是玩具','http://yuangauss287.top:8889/img/259944.png',0,'男','12313123','131231232','',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-01-29 22:14:05','2020-08-04 21:18:13'),(5,'fei','$2a$10$l7pEZQ6YZwV4GVVlgFFR6OH5Na0Jb.jWloCy5XuWyPBHcyWrDO8D6','润发飞','我是银行仔1231231231213213','http://yuangauss287.top:8889/img/28313.png',0,'女','12321312312312312','','123123123',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-01-30 23:03:56','2020-08-04 21:18:40'),(6,'sb1','$2a$10$GLqfnCA.ixjLeuHbHllBTuIrcXpnyKFlrRTYrdrjUPNEpNq69/uDm','sb1','我是sb1','http://yuangauss287.top:8889/img/311615.png',0,'男','123131','','',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-02-02 17:26:28','2020-08-04 21:19:07'),(8,'sb3','$2a$10$GLqfnCA.ixjLeuHbHllBTuIrcXpnyKFlrRTYrdrjUPNEpNq69/uDm','sb3','','http://yuangauss287.top:8889/img/330759.png',0,'男','12312312312','','',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-02-02 17:28:20','2020-08-04 21:19:34'),(19,'Ming','$2a$10$Twq9dhH9eZPjXvpVGDftNe2KbtDcO22TSoPGwi1wyNxJNnGkp.f9C','1549881659450','','http://yuangauss287.top:8889/img/330759.png',0,'男','154109511@qq.com','23132433242','',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-02-11 18:40:59','2020-08-04 21:27:32'),(32,'0080','$2a$10$K9gwqH7snP02.i66meFwoulLqz7kCtcwoGyRfIDftRwFAM3JBpZce','玩具123','我是玩具','http://yuangauss287.top:8889/img/330759.png',0,'男','m96913072123121@163.com','12312312312','',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-03-17 14:52:38','2020-08-04 21:27:42'),(33,'154109511','$2a$10$GthQsWoFlCN0gtYD3g1BBudX2tiLTZ.wO3YxqRW4aLeykbKtLDg56','大声道撒多撒多','',NULL,0,'女','asdasdsadas','asdasd','asdasdada',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-03-17 20:57:39','2019-03-22 14:46:42'),(34,'123123123','$2a$10$ehHkY6P8NMjTmyjhy0koyO66bsEBGZhKrYLJESNpN3K32odtSClTS','123213','12321312','http://yuangauss287.top:8889/img/330759.png',0,'男','31312321312','321312','',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-03-17 20:59:32','2020-08-04 21:27:54'),(35,'cls','$2a$10$7.Ru2hlXmqFXc7kUamAKb.lIx3O8v3LSggeN23CatWknnnP36Runq','WJMZBMR','我好弱啊','http://yuangauss287.top:8889/img/104380.png',0,'男','123@qq.com','123','清华大学',0,1,1,1,0,0,0,0,0,0,1,10,NULL,'2019-03-24 23:08:42','2020-08-04 21:25:24'),(37,'hai','$2a$10$sYfqbfhwDzxeYQnmKhjZrOumt28maSS3E8tXbCfFc2dbvCXm5X.Wq','hai','你好','http://yuangauss287.top:8889/img/125665.png',0,'男','1483104839@qq.com',NULL,NULL,0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2020-08-04 21:55:10','2020-08-04 21:59:54');
=======
INSERT INTO `user` VALUES (1,'969130721','$2a$10$Z.Fsd5siXwl/nd1owg9NnOMCZHmeKTePG6ygCCb/7/n5Rv//ERhOi','君の名は~','我只是一个Java的狂热者哦！！！','http://file.gkuoj.com/image/969130721/84d90993-fb4e-40ef-b3af-547b55d2fb61.jpg',0,'男','969130721@qq.com','123456789','广东科技学院',0,133,4,82,0,2,0,9,34,6,2,50,NULL,'2018-12-17 17:16:27','2019-05-04 14:54:04'),(2,'123456','$2a$10$palSi6U7pvz/SEzXzWf2OuoIXYZHUuOH1c1rbtTm4bjc8smHyV1wC','五五开','我没有开挂!!!!','http://file.gkuoj.com/image/123456/55.jpeg',0,'男','123456@qq.com','123123123','清华大学',0,3,2,3,0,0,0,0,0,0,2,30,NULL,'2019-01-16 18:44:23','2019-03-25 00:44:56'),(3,'007','','詹姆斯高斯林','123123','http://file.gkuoj.com/image/007/007.jpg',0,'男','123123','123123','MIT',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-01-29 22:14:05','2019-03-17 22:11:22'),(4,'008','$2a$10$Y/DSpdZsvqou1D./253y8OemJvJCp0gqgtzD0De1PEKfO18HudusO','玩具','我是玩具','http://file.gkuoj.com/image/wj/wj.jpg',0,'男','12313123','131231232','',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-01-29 22:14:05','2019-03-22 18:04:14'),(5,'fei','$2a$10$l7pEZQ6YZwV4GVVlgFFR6OH5Na0Jb.jWloCy5XuWyPBHcyWrDO8D6','润发飞','我是银行仔1231231231213213','http://file.gkuoj.com/image/fei/fb4eb6dd-15ce-4c43-879a-fab48aff436a.jpg',0,'女','12321312312312312','','123123123',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-01-30 23:03:56','2019-03-18 00:04:39'),(6,'sb1','$2a$10$GLqfnCA.ixjLeuHbHllBTuIrcXpnyKFlrRTYrdrjUPNEpNq69/uDm','sb1','我是sb1','http://file.gkuoj.com/image/sb1/89fb24d5-63a7-452d-8a51-bce338d9cb4b.jpeg',0,'男','123131','','',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-02-02 17:26:28','2019-03-24 23:34:34'),(8,'sb3','$2a$10$GLqfnCA.ixjLeuHbHllBTuIrcXpnyKFlrRTYrdrjUPNEpNq69/uDm','sb3','','http://file.gkuoj.com/image/sb3/ecee3256-ee18-45cd-8c69-0a744fd480e5.png',0,'男','12312312312','','',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-02-02 17:28:20','2019-05-04 01:44:45'),(19,'Ming','$2a$10$Twq9dhH9eZPjXvpVGDftNe2KbtDcO22TSoPGwi1wyNxJNnGkp.f9C','1549881659450','','http://file.gkuoj.com/image/Ming/e5ad745c-249d-4447-a4b5-a1c0da4d6c80.png',0,'男','154109511@qq.com','23132433242','',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-02-11 18:40:59','2019-03-24 10:41:30'),(32,'0080','$2a$10$K9gwqH7snP02.i66meFwoulLqz7kCtcwoGyRfIDftRwFAM3JBpZce','玩具123','我是玩具','http://file.gkuoj.com/image/0080/092c572b-b919-4302-9a03-66aa70259d6c.png',0,'男','m96913072123121@163.com','12312312312','',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-03-17 14:52:38','2019-03-24 23:34:43'),(33,'154109511','$2a$10$GthQsWoFlCN0gtYD3g1BBudX2tiLTZ.wO3YxqRW4aLeykbKtLDg56','大声道撒多撒多','',NULL,0,'女','asdasdsadas','asdasd','asdasdada',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-03-17 20:57:39','2019-03-22 14:46:42'),(34,'123123123','$2a$10$ehHkY6P8NMjTmyjhy0koyO66bsEBGZhKrYLJESNpN3K32odtSClTS','123213','12321312','http://file.gkuoj.com/image/123123123/975c0e2c-12f6-4267-9f5e-805028df3681.jpg',0,'男','31312321312','321312','',0,0,0,0,0,0,0,0,0,0,0,0,NULL,'2019-03-17 20:59:32','2019-03-22 15:49:56'),(35,'cls','$2a$10$7.Ru2hlXmqFXc7kUamAKb.lIx3O8v3LSggeN23CatWknnnP36Runq','WJMZBMR','我好弱啊','http://file.gkuoj.com/image/cls/3637d846-eed1-401c-8101-40f275e512b6.jpg',0,'男','123@qq.com','123','清华大学',0,1,1,1,0,0,0,0,0,0,1,10,NULL,'2019-03-24 23:08:42','2019-03-25 00:39:37');
>>>>>>> 11c2e33... 0816
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_role`
--

DROP TABLE IF EXISTS `user_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
<<<<<<< HEAD
/*!50503 SET character_set_client = utf8mb4 */;
=======
/*!40101 SET character_set_client = utf8 */;
>>>>>>> 11c2e33... 0816
CREATE TABLE `user_role` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL COMMENT '用户id',
  `role_id` int(11) DEFAULT NULL COMMENT '角色id',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `update_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
<<<<<<< HEAD
) ENGINE=InnoDB AUTO_INCREMENT=109 DEFAULT CHARSET=utf8;
=======
) ENGINE=InnoDB AUTO_INCREMENT=107 DEFAULT CHARSET=utf8;
>>>>>>> 11c2e33... 0816
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_role`
--

LOCK TABLES `user_role` WRITE;
/*!40000 ALTER TABLE `user_role` DISABLE KEYS */;
<<<<<<< HEAD
INSERT INTO `user_role` VALUES (6,33,1,'2019-03-17 20:57:39','2019-03-17 20:57:39'),(18,2,2,'2019-03-17 22:10:30','2019-03-17 22:10:30'),(41,34,2,'2019-03-18 00:18:38','2019-03-18 00:18:38'),(47,3,2,'2019-03-23 23:36:22','2019-03-23 23:36:22'),(61,4,2,'2019-03-23 23:51:55','2019-03-23 23:51:55'),(62,5,2,'2019-03-23 23:51:58','2019-03-23 23:51:58'),(63,30,1,'2019-03-23 23:53:09','2019-03-23 23:53:09'),(80,19,2,'2019-03-24 10:41:30','2019-03-24 10:41:30'),(88,35,1,'2019-03-24 23:12:20','2019-03-24 23:12:20'),(92,6,2,'2019-03-24 23:34:34','2019-03-24 23:34:34'),(93,32,1,'2019-03-24 23:34:43','2019-03-24 23:34:43'),(102,8,2,'2019-05-02 19:48:53','2019-05-02 19:48:53'),(106,1,1,'2019-05-02 19:54:28','2019-05-02 19:59:06'),(107,36,2,'2020-08-04 21:34:41','2020-08-04 21:34:41'),(108,37,2,'2020-08-04 21:55:10','2020-08-04 21:55:10');
=======
INSERT INTO `user_role` VALUES (6,33,1,'2019-03-17 20:57:39','2019-03-17 20:57:39'),(18,2,2,'2019-03-17 22:10:30','2019-03-17 22:10:30'),(41,34,2,'2019-03-18 00:18:38','2019-03-18 00:18:38'),(47,3,2,'2019-03-23 23:36:22','2019-03-23 23:36:22'),(61,4,2,'2019-03-23 23:51:55','2019-03-23 23:51:55'),(62,5,2,'2019-03-23 23:51:58','2019-03-23 23:51:58'),(63,30,1,'2019-03-23 23:53:09','2019-03-23 23:53:09'),(80,19,2,'2019-03-24 10:41:30','2019-03-24 10:41:30'),(88,35,1,'2019-03-24 23:12:20','2019-03-24 23:12:20'),(92,6,2,'2019-03-24 23:34:34','2019-03-24 23:34:34'),(93,32,1,'2019-03-24 23:34:43','2019-03-24 23:34:43'),(102,8,2,'2019-05-02 19:48:53','2019-05-02 19:48:53'),(106,1,1,'2019-05-02 19:54:28','2019-05-02 19:59:06');
>>>>>>> 11c2e33... 0816
/*!40000 ALTER TABLE `user_role` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

<<<<<<< HEAD
-- Dump completed on 2020-08-13  9:59:33
=======
-- Dump completed on 2019-05-09 17:06:56
>>>>>>> 11c2e33... 0816
